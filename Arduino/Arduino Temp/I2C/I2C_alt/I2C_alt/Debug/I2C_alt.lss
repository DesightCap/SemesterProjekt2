
I2C_alt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  0000095a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008e6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006f  00800200  00800200  0000095a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000095a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000098c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000009cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001466  00000000  00000000  00000a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e0d  00000000  00000000  00001ed2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000729  00000000  00000000  00002cdf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b8  00000000  00000000  00003408  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007db  00000000  00000000  000035c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007a9  00000000  00000000  00003d9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00004544  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	af 36       	cpi	r26, 0x6F	; 111
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	e5 d1       	rcall	.+970    	; 0x4d0 <main>
 106:	ed c3       	rjmp	.+2010   	; 0x8e2 <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <twi_writeTo>:


// from twi.c

uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
 10a:	0f 93       	push	r16
 10c:	cf 93       	push	r28
	uint8_t i;

	// ensure data will fit into buffer
	if(TWI_BUFFER_LENGTH < length){
 10e:	41 32       	cpi	r20, 0x21	; 33
 110:	08 f0       	brcs	.+2      	; 0x114 <twi_writeTo+0xa>
 112:	4e c0       	rjmp	.+156    	; 0x1b0 <twi_writeTo+0xa6>
		return 1;
	}

	// wait until twi is ready, become master transmitter
	while(TWI_READY != twi_state){
 114:	c0 91 2d 02 	lds	r28, 0x022D	; 0x80022d <twi_state>
 118:	c1 11       	cpse	r28, r1
 11a:	fc cf       	rjmp	.-8      	; 0x114 <twi_writeTo+0xa>
		continue;
	}
	twi_state = TWI_MTX;
 11c:	92 e0       	ldi	r25, 0x02	; 2
 11e:	90 93 2d 02 	sts	0x022D, r25	; 0x80022d <twi_state>
	twi_sendStop = sendStop;
 122:	00 93 2b 02 	sts	0x022B, r16	; 0x80022b <twi_sendStop>
	// reset error state (0xFF.. no error occured)
	twi_error = 0xFF;
 126:	9f ef       	ldi	r25, 0xFF	; 255
 128:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <twi_error>

	// initialize buffer iteration vars
	twi_masterBufferIndex = 0;
 12c:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <twi_masterBufferIndex>
	twi_masterBufferLength = length;
 130:	40 93 08 02 	sts	0x0208, r20	; 0x800208 <twi_masterBufferLength>
	
	// copy data to twi buffer
	for(i = 0; i < length; ++i){
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	0a c0       	rjmp	.+20     	; 0x14c <twi_writeTo+0x42>
		twi_masterBuffer[i] = data[i];
 138:	e9 2f       	mov	r30, r25
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	db 01       	movw	r26, r22
 13e:	ae 0f       	add	r26, r30
 140:	bf 1f       	adc	r27, r31
 142:	3c 91       	ld	r19, X
 144:	e6 5f       	subi	r30, 0xF6	; 246
 146:	fd 4f       	sbci	r31, 0xFD	; 253
 148:	30 83       	st	Z, r19
	// initialize buffer iteration vars
	twi_masterBufferIndex = 0;
	twi_masterBufferLength = length;
	
	// copy data to twi buffer
	for(i = 0; i < length; ++i){
 14a:	9f 5f       	subi	r25, 0xFF	; 255
 14c:	94 17       	cp	r25, r20
 14e:	a0 f3       	brcs	.-24     	; 0x138 <twi_writeTo+0x2e>
		twi_masterBuffer[i] = data[i];
	}
	
	// build sla+w, slave device address + w bit
	twi_slarw = TW_WRITE;
 150:	10 92 2c 02 	sts	0x022C, r1	; 0x80022c <twi_slarw>
	twi_slarw |= address << 1;
 154:	48 2f       	mov	r20, r24
 156:	50 e0       	ldi	r21, 0x00	; 0
 158:	44 0f       	add	r20, r20
 15a:	55 1f       	adc	r21, r21
 15c:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <twi_slarw>
 160:	48 2b       	or	r20, r24
 162:	40 93 2c 02 	sts	0x022C, r20	; 0x80022c <twi_slarw>
	
	// if we're in a repeated start, then we've already sent the START
	// in the ISR. Don't do it again.
	//
	if (1 == twi_inRepStart) {
 166:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <twi_inRepStart>
 16a:	81 30       	cpi	r24, 0x01	; 1
 16c:	51 f4       	brne	.+20     	; 0x182 <twi_writeTo+0x78>

		twi_inRepStart = 0;			// remember, we're dealing with an ASYNC ISR
 16e:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <twi_inRepStart>
		TWDR = twi_slarw;
 172:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <twi_slarw>
 176:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
		TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
 17a:	85 ec       	ldi	r24, 0xC5	; 197
 17c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 180:	03 c0       	rjmp	.+6      	; 0x188 <twi_writeTo+0x7e>
	}
	else
	// send start condition
	TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);	// enable INTs
 182:	85 ee       	ldi	r24, 0xE5	; 229
 184:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>

	// wait for write operation to complete
	while(wait && (TWI_MTX == twi_state)){
 188:	22 23       	and	r18, r18
 18a:	21 f0       	breq	.+8      	; 0x194 <twi_writeTo+0x8a>
 18c:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <twi_state>
 190:	82 30       	cpi	r24, 0x02	; 2
 192:	d1 f3       	breq	.-12     	; 0x188 <twi_writeTo+0x7e>
		continue;
	}
	
	if (twi_error == 0xFF)
 194:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <twi_error>
 198:	8f 3f       	cpi	r24, 0xFF	; 255
 19a:	79 f0       	breq	.+30     	; 0x1ba <twi_writeTo+0xb0>
	return 0;	// success
	else if (twi_error == TW_MT_SLA_NACK)
 19c:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <twi_error>
 1a0:	80 32       	cpi	r24, 0x20	; 32
 1a2:	41 f0       	breq	.+16     	; 0x1b4 <twi_writeTo+0xaa>
	return 2;	// error: address send, nack received
	else if (twi_error == TW_MT_DATA_NACK)
 1a4:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <twi_error>
 1a8:	80 33       	cpi	r24, 0x30	; 48
 1aa:	31 f4       	brne	.+12     	; 0x1b8 <twi_writeTo+0xae>
	return 3;	// error: data send, nack received
 1ac:	c3 e0       	ldi	r28, 0x03	; 3
 1ae:	05 c0       	rjmp	.+10     	; 0x1ba <twi_writeTo+0xb0>
{
	uint8_t i;

	// ensure data will fit into buffer
	if(TWI_BUFFER_LENGTH < length){
		return 1;
 1b0:	c1 e0       	ldi	r28, 0x01	; 1
 1b2:	03 c0       	rjmp	.+6      	; 0x1ba <twi_writeTo+0xb0>
	}
	
	if (twi_error == 0xFF)
	return 0;	// success
	else if (twi_error == TW_MT_SLA_NACK)
	return 2;	// error: address send, nack received
 1b4:	c2 e0       	ldi	r28, 0x02	; 2
 1b6:	01 c0       	rjmp	.+2      	; 0x1ba <twi_writeTo+0xb0>
	else if (twi_error == TW_MT_DATA_NACK)
	return 3;	// error: data send, nack received
	else
	return 4;	// other twi error
 1b8:	c4 e0       	ldi	r28, 0x04	; 4
}
 1ba:	8c 2f       	mov	r24, r28
 1bc:	cf 91       	pop	r28
 1be:	0f 91       	pop	r16
 1c0:	08 95       	ret

000001c2 <twi_readFrom>:
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length, uint8_t sendStop)
{
	uint8_t i;

	// ensure data will fit into buffer
	if(TWI_BUFFER_LENGTH < length){
 1c2:	41 32       	cpi	r20, 0x21	; 33
 1c4:	08 f0       	brcs	.+2      	; 0x1c8 <twi_readFrom+0x6>
 1c6:	47 c0       	rjmp	.+142    	; 0x256 <twi_readFrom+0x94>
		return 0;
	}

	// wait until twi is ready, become master receiver
	while(TWI_READY != twi_state){
 1c8:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <twi_state>
 1cc:	91 11       	cpse	r25, r1
 1ce:	fc cf       	rjmp	.-8      	; 0x1c8 <twi_readFrom+0x6>
		continue;
	}
	twi_state = TWI_MRX;
 1d0:	91 e0       	ldi	r25, 0x01	; 1
 1d2:	90 93 2d 02 	sts	0x022D, r25	; 0x80022d <twi_state>
	twi_sendStop = sendStop;
 1d6:	20 93 2b 02 	sts	0x022B, r18	; 0x80022b <twi_sendStop>
	// reset error state (0xFF.. no error occured)
	twi_error = 0xFF;
 1da:	2f ef       	ldi	r18, 0xFF	; 255
 1dc:	20 93 06 02 	sts	0x0206, r18	; 0x800206 <twi_error>

	// initialize buffer iteration vars
	twi_masterBufferIndex = 0;
 1e0:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <twi_masterBufferIndex>
	twi_masterBufferLength = length-1;  // This is not intuitive, read on...
 1e4:	24 0f       	add	r18, r20
 1e6:	20 93 08 02 	sts	0x0208, r18	; 0x800208 <twi_masterBufferLength>
	// Therefor we must actually set NACK when the _next_ to last byte is
	// received, causing that NACK to be sent in response to receiving the last
	// expected byte of data.

	// build sla+w, slave device address + w bit
	twi_slarw = TW_READ;
 1ea:	90 93 2c 02 	sts	0x022C, r25	; 0x80022c <twi_slarw>
	twi_slarw |= address << 1;
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	88 0f       	add	r24, r24
 1f2:	99 1f       	adc	r25, r25
 1f4:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <twi_slarw>
 1f8:	89 2b       	or	r24, r25
 1fa:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <twi_slarw>

	if (1 == twi_inRepStart) {
 1fe:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <twi_inRepStart>
 202:	81 30       	cpi	r24, 0x01	; 1
 204:	51 f4       	brne	.+20     	; 0x21a <twi_readFrom+0x58>
		
		twi_inRepStart = 1;			// remember, we're dealing with an ASYNC ISR
 206:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <twi_inRepStart>
		TWDR = twi_slarw;
 20a:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <twi_slarw>
 20e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
		TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
 212:	85 ec       	ldi	r24, 0xC5	; 197
 214:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 218:	03 c0       	rjmp	.+6      	; 0x220 <twi_readFrom+0x5e>
	}
	else
	// send start condition
	TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
 21a:	85 ee       	ldi	r24, 0xE5	; 229
 21c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>

	// wait for read operation to complete
	while(TWI_MRX == twi_state){
 220:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <twi_state>
 224:	81 30       	cpi	r24, 0x01	; 1
 226:	e1 f3       	breq	.-8      	; 0x220 <twi_readFrom+0x5e>
		continue;
	}

	if (twi_masterBufferIndex < length)
 228:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <twi_masterBufferIndex>
 22c:	84 17       	cp	r24, r20
 22e:	10 f4       	brcc	.+4      	; 0x234 <twi_readFrom+0x72>
	length = twi_masterBufferIndex;
 230:	40 91 09 02 	lds	r20, 0x0209	; 0x800209 <twi_masterBufferIndex>

	// copy twi buffer to data
	for(i = 0; i < length; ++i){
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	0b c0       	rjmp	.+22     	; 0x24e <twi_readFrom+0x8c>
		data[i] = twi_masterBuffer[i];
 238:	29 2f       	mov	r18, r25
 23a:	30 e0       	ldi	r19, 0x00	; 0
 23c:	fb 01       	movw	r30, r22
 23e:	e2 0f       	add	r30, r18
 240:	f3 1f       	adc	r31, r19
 242:	d9 01       	movw	r26, r18
 244:	a6 5f       	subi	r26, 0xF6	; 246
 246:	bd 4f       	sbci	r27, 0xFD	; 253
 248:	2c 91       	ld	r18, X
 24a:	20 83       	st	Z, r18

	if (twi_masterBufferIndex < length)
	length = twi_masterBufferIndex;

	// copy twi buffer to data
	for(i = 0; i < length; ++i){
 24c:	9f 5f       	subi	r25, 0xFF	; 255
 24e:	94 17       	cp	r25, r20
 250:	98 f3       	brcs	.-26     	; 0x238 <twi_readFrom+0x76>
		data[i] = twi_masterBuffer[i];
	}
	
	return length;
 252:	84 2f       	mov	r24, r20
 254:	08 95       	ret
{
	uint8_t i;

	// ensure data will fit into buffer
	if(TWI_BUFFER_LENGTH < length){
		return 0;
 256:	80 e0       	ldi	r24, 0x00	; 0
	for(i = 0; i < length; ++i){
		data[i] = twi_masterBuffer[i];
	}
	
	return length;
}
 258:	08 95       	ret

0000025a <twi_transmit>:
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
	uint8_t i;

	// ensure data will fit into buffer
	if(TWI_BUFFER_LENGTH < length){
 25a:	61 32       	cpi	r22, 0x21	; 33
 25c:	68 f4       	brcc	.+26     	; 0x278 <twi_transmit+0x1e>
		return 1;
	}
	
	// ensure we are currently a slave transmitter
	if(TWI_STX != twi_state){
 25e:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <twi_state>
 262:	84 30       	cpi	r24, 0x04	; 4
 264:	59 f4       	brne	.+22     	; 0x27c <twi_transmit+0x22>
		return 2;
	}
	
	// set length and copy data into tx buffer
	twi_txBufferLength = length;
 266:	60 93 07 02 	sts	0x0207, r22	; 0x800207 <twi_txBufferLength>
	for(i = 0; i < length; ++i){
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	01 c0       	rjmp	.+2      	; 0x270 <twi_transmit+0x16>
 26e:	8f 5f       	subi	r24, 0xFF	; 255
 270:	86 17       	cp	r24, r22
 272:	e8 f3       	brcs	.-6      	; 0x26e <twi_transmit+0x14>
		twi_txBuffer[i] = data[i];
	}
	
	return 0;
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	08 95       	ret
{
	uint8_t i;

	// ensure data will fit into buffer
	if(TWI_BUFFER_LENGTH < length){
		return 1;
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	08 95       	ret
	}
	
	// ensure we are currently a slave transmitter
	if(TWI_STX != twi_state){
		return 2;
 27c:	82 e0       	ldi	r24, 0x02	; 2
	for(i = 0; i < length; ++i){
		twi_txBuffer[i] = data[i];
	}
	
	return 0;
}
 27e:	08 95       	ret

00000280 <available>:


int available(void)
{
	return rxBufferLength - rxBufferIndex;
 280:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <rxBufferLength>
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	20 91 05 02 	lds	r18, 0x0205	; 0x800205 <rxBufferIndex>
}
 28a:	82 1b       	sub	r24, r18
 28c:	91 09       	sbc	r25, r1
 28e:	08 95       	ret

00000290 <read>:
int read(void)
{
	int value = -1;
	
	// get each successive byte on each call
	if(rxBufferIndex < rxBufferLength){
 290:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <rxBufferIndex>
 294:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <rxBufferLength>
 298:	98 17       	cp	r25, r24
 29a:	50 f4       	brcc	.+20     	; 0x2b0 <read+0x20>
		value = rxBuffer[rxBufferIndex];
 29c:	e9 2f       	mov	r30, r25
 29e:	f0 e0       	ldi	r31, 0x00	; 0
 2a0:	e1 5d       	subi	r30, 0xD1	; 209
 2a2:	fd 4f       	sbci	r31, 0xFD	; 253
 2a4:	20 81       	ld	r18, Z
 2a6:	30 e0       	ldi	r19, 0x00	; 0
		++rxBufferIndex;
 2a8:	9f 5f       	subi	r25, 0xFF	; 255
 2aa:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <rxBufferIndex>
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <read+0x24>
{
	return rxBufferLength - rxBufferIndex;
}
int read(void)
{
	int value = -1;
 2b0:	2f ef       	ldi	r18, 0xFF	; 255
 2b2:	3f ef       	ldi	r19, 0xFF	; 255
		value = rxBuffer[rxBufferIndex];
		++rxBufferIndex;
	}

	return value;
}
 2b4:	c9 01       	movw	r24, r18
 2b6:	08 95       	ret

000002b8 <beginTransmission>:
void beginTransmission(uint8_t address)
{
	// indicate that we are transmitting
	transmitting = 1;
 2b8:	91 e0       	ldi	r25, 0x01	; 1
 2ba:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <__DATA_REGION_ORIGIN__>
	// set address of targeted slave
	txAddress = address;
 2be:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <txAddress>
	// reset tx buffer iterator vars
	txBufferIndex = 0;
 2c2:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <txBufferIndex>
	txBufferLength = 0;
 2c6:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <txBufferLength>
 2ca:	08 95       	ret

000002cc <endTransmission2>:
}
uint8_t endTransmission2(uint8_t sendStop)
{
 2cc:	0f 93       	push	r16
	// transmit buffer (blocking)
	uint8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
 2ce:	40 91 01 02 	lds	r20, 0x0201	; 0x800201 <txBufferLength>
 2d2:	08 2f       	mov	r16, r24
 2d4:	21 e0       	ldi	r18, 0x01	; 1
 2d6:	6f e4       	ldi	r22, 0x4F	; 79
 2d8:	72 e0       	ldi	r23, 0x02	; 2
 2da:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <txAddress>
 2de:	15 df       	rcall	.-470    	; 0x10a <twi_writeTo>
	// reset tx buffer iterator vars
	txBufferIndex = 0;
 2e0:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <txBufferIndex>
	txBufferLength = 0;
 2e4:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <txBufferLength>
	// indicate that we are done transmitting
	transmitting = 0;
 2e8:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__DATA_REGION_ORIGIN__>
	return ret;
}
 2ec:	0f 91       	pop	r16
 2ee:	08 95       	ret

000002f0 <endTransmission>:
uint8_t endTransmission(void)
{
	return endTransmission2(1); // == changed from true to 1; ==
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	ec cf       	rjmp	.-40     	; 0x2cc <endTransmission2>
}
 2f4:	08 95       	ret

000002f6 <write>:
unsigned int write(uint8_t data)
	{
 2f6:	cf 93       	push	r28
 2f8:	df 93       	push	r29
 2fa:	1f 92       	push	r1
 2fc:	cd b7       	in	r28, 0x3d	; 61
 2fe:	de b7       	in	r29, 0x3e	; 62
 300:	89 83       	std	Y+1, r24	; 0x01
		if(transmitting){
 302:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 306:	88 23       	and	r24, r24
 308:	a1 f0       	breq	.+40     	; 0x332 <write+0x3c>
			if(txBufferLength >= BUFFER_LENGTH){
 30a:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <txBufferLength>
 30e:	80 32       	cpi	r24, 0x20	; 32
 310:	b8 f4       	brcc	.+46     	; 0x340 <write+0x4a>
				// threw error
				return 0;
			}
			// put byte in tx buffer
			txBuffer[txBufferIndex] = data;
 312:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <txBufferIndex>
 316:	e8 2f       	mov	r30, r24
 318:	f0 e0       	ldi	r31, 0x00	; 0
 31a:	e1 5b       	subi	r30, 0xB1	; 177
 31c:	fd 4f       	sbci	r31, 0xFD	; 253
 31e:	99 81       	ldd	r25, Y+1	; 0x01
 320:	90 83       	st	Z, r25
			++txBufferIndex;
 322:	8f 5f       	subi	r24, 0xFF	; 255
 324:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <txBufferIndex>
			// update amount in buffer
			txBufferLength = txBufferIndex;
 328:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <txBufferLength>
			}else{
			// in slave send mode
			// reply to master
			twi_transmit(&data, 1);
		}
		return 1;
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	09 c0       	rjmp	.+18     	; 0x344 <write+0x4e>
			// update amount in buffer
			txBufferLength = txBufferIndex;
			}else{
			// in slave send mode
			// reply to master
			twi_transmit(&data, 1);
 332:	61 e0       	ldi	r22, 0x01	; 1
 334:	ce 01       	movw	r24, r28
 336:	01 96       	adiw	r24, 0x01	; 1
 338:	90 df       	rcall	.-224    	; 0x25a <twi_transmit>
		}
		return 1;
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	02 c0       	rjmp	.+4      	; 0x344 <write+0x4e>
unsigned int write(uint8_t data)
	{
		if(transmitting){
			if(txBufferLength >= BUFFER_LENGTH){
				// threw error
				return 0;
 340:	80 e0       	ldi	r24, 0x00	; 0
 342:	90 e0       	ldi	r25, 0x00	; 0
			// in slave send mode
			// reply to master
			twi_transmit(&data, 1);
		}
		return 1;
	}
 344:	0f 90       	pop	r0
 346:	df 91       	pop	r29
 348:	cf 91       	pop	r28
 34a:	08 95       	ret

0000034c <requestFrom3>:
uint8_t requestFrom3(uint8_t address, uint8_t quantity, uint32_t iaddress, uint8_t isize, uint8_t sendStop)
	{
 34c:	8f 92       	push	r8
 34e:	9f 92       	push	r9
 350:	af 92       	push	r10
 352:	bf 92       	push	r11
 354:	ef 92       	push	r14
 356:	0f 93       	push	r16
 358:	1f 93       	push	r17
 35a:	cf 93       	push	r28
 35c:	df 93       	push	r29
 35e:	18 2f       	mov	r17, r24
 360:	d6 2f       	mov	r29, r22
 362:	49 01       	movw	r8, r18
 364:	5a 01       	movw	r10, r20
		if (isize > 0) {
 366:	00 23       	and	r16, r16
 368:	01 f1       	breq	.+64     	; 0x3aa <requestFrom3+0x5e>
			// send internal address; this mode allows sending a repeated start to access
			// some devices' internal registers. This function is executed by the hardware
			// TWI module on other processors (for example Due's TWI_IADR and TWI_MMR registers)

			beginTransmission(address);
 36a:	a6 df       	rcall	.-180    	; 0x2b8 <beginTransmission>

			// the maximum size of internal address is 3 bytes
			if (isize > 3){
 36c:	04 30       	cpi	r16, 0x04	; 4
 36e:	b8 f0       	brcs	.+46     	; 0x39e <requestFrom3+0x52>
				isize = 3;
 370:	03 e0       	ldi	r16, 0x03	; 3
 372:	15 c0       	rjmp	.+42     	; 0x39e <requestFrom3+0x52>
			}

			// write internal register address - most significant byte first
			while (isize-- > 0)
			write((uint8_t)(iaddress >> (isize*8)));
 374:	8c 2f       	mov	r24, r28
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	88 0f       	add	r24, r24
 37a:	99 1f       	adc	r25, r25
 37c:	88 0f       	add	r24, r24
 37e:	99 1f       	adc	r25, r25
 380:	88 0f       	add	r24, r24
 382:	99 1f       	adc	r25, r25
 384:	a5 01       	movw	r20, r10
 386:	94 01       	movw	r18, r8
 388:	04 c0       	rjmp	.+8      	; 0x392 <requestFrom3+0x46>
 38a:	56 95       	lsr	r21
 38c:	47 95       	ror	r20
 38e:	37 95       	ror	r19
 390:	27 95       	ror	r18
 392:	8a 95       	dec	r24
 394:	d2 f7       	brpl	.-12     	; 0x38a <requestFrom3+0x3e>
 396:	da 01       	movw	r26, r20
 398:	c9 01       	movw	r24, r18
 39a:	ad df       	rcall	.-166    	; 0x2f6 <write>
			if (isize > 3){
				isize = 3;
			}

			// write internal register address - most significant byte first
			while (isize-- > 0)
 39c:	0c 2f       	mov	r16, r28
 39e:	cf ef       	ldi	r28, 0xFF	; 255
 3a0:	c0 0f       	add	r28, r16
 3a2:	01 11       	cpse	r16, r1
			write((uint8_t)(iaddress >> (isize*8)));
			endTransmission2(0); //== changed from false to 0; ==
 3a4:	e7 cf       	rjmp	.-50     	; 0x374 <requestFrom3+0x28>
 3a6:	80 e0       	ldi	r24, 0x00	; 0
 3a8:	91 df       	rcall	.-222    	; 0x2cc <endTransmission2>
		}

		// clamp to buffer length
		if(quantity > BUFFER_LENGTH){
 3aa:	d1 32       	cpi	r29, 0x21	; 33
 3ac:	08 f0       	brcs	.+2      	; 0x3b0 <requestFrom3+0x64>
			quantity = BUFFER_LENGTH;
 3ae:	d0 e2       	ldi	r29, 0x20	; 32
		}
		// perform blocking read into buffer
		uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
 3b0:	2e 2d       	mov	r18, r14
 3b2:	4d 2f       	mov	r20, r29
 3b4:	6f e2       	ldi	r22, 0x2F	; 47
 3b6:	72 e0       	ldi	r23, 0x02	; 2
 3b8:	81 2f       	mov	r24, r17
 3ba:	03 df       	rcall	.-506    	; 0x1c2 <twi_readFrom>
		// set rx buffer iterator vars
		rxBufferIndex = 0;
 3bc:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <rxBufferIndex>
		rxBufferLength = read;
 3c0:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <rxBufferLength>

		return read;
	}
 3c4:	df 91       	pop	r29
 3c6:	cf 91       	pop	r28
 3c8:	1f 91       	pop	r17
 3ca:	0f 91       	pop	r16
 3cc:	ef 90       	pop	r14
 3ce:	bf 90       	pop	r11
 3d0:	af 90       	pop	r10
 3d2:	9f 90       	pop	r9
 3d4:	8f 90       	pop	r8
 3d6:	08 95       	ret

000003d8 <requestFrom2>:
uint8_t requestFrom2(uint8_t address, uint8_t quantity, uint8_t sendStop) {
 3d8:	ef 92       	push	r14
 3da:	0f 93       	push	r16
		return requestFrom3((uint8_t)address, 
 3dc:	e4 2e       	mov	r14, r20
 3de:	00 e0       	ldi	r16, 0x00	; 0
 3e0:	20 e0       	ldi	r18, 0x00	; 0
 3e2:	30 e0       	ldi	r19, 0x00	; 0
 3e4:	a9 01       	movw	r20, r18
 3e6:	b2 df       	rcall	.-156    	; 0x34c <requestFrom3>
						   (uint8_t)quantity, 
						   (uint32_t)0, 
						   (uint8_t)0, 
						   (uint8_t)sendStop);
	}
 3e8:	0f 91       	pop	r16
 3ea:	ef 90       	pop	r14
 3ec:	08 95       	ret

000003ee <requestFrom1>:
uint8_t requestFrom1(uint8_t address, uint8_t quantity)
	{
		return requestFrom2((uint8_t)address, (uint8_t)quantity, (uint8_t)1); // == changed fom true to 1 ==
 3ee:	41 e0       	ldi	r20, 0x01	; 1
 3f0:	f3 cf       	rjmp	.-26     	; 0x3d8 <requestFrom2>
	}
 3f2:	08 95       	ret

000003f4 <getReg>:

LM75Register getReg(LM75Register reg)
	{
 3f4:	cf 93       	push	r28
 3f6:	df 93       	push	r29
 3f8:	c8 2f       	mov	r28, r24
		unsigned Result = 0xFFFF; // meaning Result == 65534;
		// == m_u8I2CAddr is a pravit uint8_t object. why it is named so is beyond me ==.
		beginTransmission(m_u8I2CAddr);
 3fa:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <m_u8I2CAddr>
 3fe:	5c df       	rcall	.-328    	; 0x2b8 <beginTransmission>
		write(reg); // pointer reg
 400:	8c 2f       	mov	r24, r28
		endTransmission();
 402:	79 df       	rcall	.-270    	; 0x2f6 <write>
 404:	75 df       	rcall	.-278    	; 0x2f0 <endTransmission>
		uint8_t c;
		requestFrom1(m_u8I2CAddr, (2));
 406:	62 e0       	ldi	r22, 0x02	; 2
 408:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <m_u8I2CAddr>
		if(available())
 40c:	f0 df       	rcall	.-32     	; 0x3ee <requestFrom1>
 40e:	38 df       	rcall	.-400    	; 0x280 <available>
 410:	89 2b       	or	r24, r25
 412:	71 f0       	breq	.+28     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
		{
			c = read();
 414:	3d df       	rcall	.-390    	; 0x290 <read>
			Result = c;
 416:	99 27       	eor	r25, r25
			if(reg != config_reg)
 418:	c1 30       	cpi	r28, 0x01	; 1
			{
				//== added to help ==
				unsigned HELPc = c;
				//== /added to help ==
			  //Result = ( unsigned(c) )<<8;
				Result = ( HELPc )<<8;
 41a:	79 f0       	breq	.+30     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 41c:	d8 2f       	mov	r29, r24
				if(available())
 41e:	cc 27       	eor	r28, r28
 420:	2f df       	rcall	.-418    	; 0x280 <available>
 422:	89 2b       	or	r24, r25
 424:	41 f0       	breq	.+16     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
				{
					c = read();
 426:	34 df       	rcall	.-408    	; 0x290 <read>
 428:	9e 01       	movw	r18, r28
					//== added to help ==
					unsigned HELPc = c;
					//== /added to help ==
				  //Result |= ( unsigned(c) );
				    Result |= ( HELPc );
 42a:	28 2b       	or	r18, r24
 42c:	c9 01       	movw	r24, r18
 42e:	05 c0       	rjmp	.+10     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 430:	8f ef       	ldi	r24, 0xFF	; 255
		return requestFrom2((uint8_t)address, (uint8_t)quantity, (uint8_t)1); // == changed fom true to 1 ==
	}

LM75Register getReg(LM75Register reg)
	{
		unsigned Result = 0xFFFF; // meaning Result == 65534;
 432:	9f ef       	ldi	r25, 0xFF	; 255
 434:	02 c0       	rjmp	.+4      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 436:	8f ef       	ldi	r24, 0xFF	; 255
				  //Result |= ( unsigned(c) );
				    Result |= ( HELPc );
				}
				else
				{
					Result = 0xFFFF;
 438:	9f ef       	ldi	r25, 0xFF	; 255
 43a:	df 91       	pop	r29
				}
			}
		}
		return(Result);
	}
 43c:	cf 91       	pop	r28
 43e:	08 95       	ret

00000440 <getTemp>:
 440:	80 e0       	ldi	r24, 0x00	; 0
		unsigned short tempX;
		short tempS;

	} temperature;

	temperature.tempX = getReg(temp_reg);
 442:	d8 df       	rcall	.-80     	; 0x3f4 <getReg>
	return (temperature.tempS / 256.0F);
 444:	68 2f       	mov	r22, r24
 446:	70 e0       	ldi	r23, 0x00	; 0
 448:	80 e0       	ldi	r24, 0x00	; 0
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	e0 d0       	rcall	.+448    	; 0x60e <__floatsisf>
 44e:	20 e0       	ldi	r18, 0x00	; 0
 450:	30 e0       	ldi	r19, 0x00	; 0
 452:	40 e8       	ldi	r20, 0x80	; 128
 454:	5b e3       	ldi	r21, 0x3B	; 59
}
 456:	be c1       	rjmp	.+892    	; 0x7d4 <__mulsf3>

00000458 <HF>:
//#include "x10.h"
#include <math.h>


float HF(float _t){
	return (floor((_t*2)+0.5)/2);
 458:	9b 01       	movw	r18, r22
 45a:	ac 01       	movw	r20, r24
 45c:	41 d0       	rcall	.+130    	; 0x4e0 <__addsf3>
 45e:	20 e0       	ldi	r18, 0x00	; 0
 460:	30 e0       	ldi	r19, 0x00	; 0
 462:	40 e0       	ldi	r20, 0x00	; 0
 464:	5f e3       	ldi	r21, 0x3F	; 63
 466:	3c d0       	rcall	.+120    	; 0x4e0 <__addsf3>
 468:	0d d1       	rcall	.+538    	; 0x684 <floor>
 46a:	20 e0       	ldi	r18, 0x00	; 0
 46c:	30 e0       	ldi	r19, 0x00	; 0
 46e:	40 e0       	ldi	r20, 0x00	; 0
 470:	5f e3       	ldi	r21, 0x3F	; 63
 472:	b0 c1       	rjmp	.+864    	; 0x7d4 <__mulsf3>
}
 474:	08 95       	ret

00000476 <sixBitsSend>:

uint8_t sixBitsSend(double inputTemp_)
{
 476:	8f 92       	push	r8
 478:	9f 92       	push	r9
 47a:	af 92       	push	r10
 47c:	bf 92       	push	r11
 47e:	cf 92       	push	r12
 480:	df 92       	push	r13
 482:	ef 92       	push	r14
 484:	ff 92       	push	r15
 486:	4b 01       	movw	r8, r22
 488:	5c 01       	movw	r10, r24
	uint8_t Rval = 0b0000000;
	int Temp = inputTemp_;
 48a:	8e d0       	rcall	.+284    	; 0x5a8 <__fixsfsi>
 48c:	6b 01       	movw	r12, r22
 48e:	7c 01       	movw	r14, r24

	if((inputTemp_ - Temp) > 0)
 490:	07 2e       	mov	r0, r23
 492:	00 0c       	add	r0, r0
 494:	88 0b       	sbc	r24, r24
 496:	99 0b       	sbc	r25, r25
 498:	ba d0       	rcall	.+372    	; 0x60e <__floatsisf>
 49a:	9b 01       	movw	r18, r22
 49c:	ac 01       	movw	r20, r24
 49e:	c5 01       	movw	r24, r10
 4a0:	b4 01       	movw	r22, r8
 4a2:	1d d0       	rcall	.+58     	; 0x4de <__subsf3>
 4a4:	20 e0       	ldi	r18, 0x00	; 0
 4a6:	30 e0       	ldi	r19, 0x00	; 0
 4a8:	a9 01       	movw	r20, r18
 4aa:	90 d1       	rcall	.+800    	; 0x7cc <__gesf2>
 4ac:	18 16       	cp	r1, r24
 4ae:	14 f0       	brlt	.+4      	; 0x4b4 <sixBitsSend+0x3e>
	return (floor((_t*2)+0.5)/2);
}

uint8_t sixBitsSend(double inputTemp_)
{
	uint8_t Rval = 0b0000000;
 4b0:	80 e0       	ldi	r24, 0x00	; 0
 4b2:	01 c0       	rjmp	.+2      	; 0x4b6 <sixBitsSend+0x40>
	int Temp = inputTemp_;

	if((inputTemp_ - Temp) > 0)
	{
		Rval |= 0b00000001;
 4b4:	81 e0       	ldi	r24, 0x01	; 1
	}
	Rval |= ((uint8_t)Temp)<<1;
 4b6:	dd 24       	eor	r13, r13
 4b8:	cc 0c       	add	r12, r12
 4ba:	dd 1c       	adc	r13, r13
	return Rval;
}
 4bc:	8c 29       	or	r24, r12
 4be:	ff 90       	pop	r15
 4c0:	ef 90       	pop	r14
 4c2:	df 90       	pop	r13
 4c4:	cf 90       	pop	r12
 4c6:	bf 90       	pop	r11
 4c8:	af 90       	pop	r10
 4ca:	9f 90       	pop	r9
 4cc:	8f 90       	pop	r8
 4ce:	08 95       	ret

000004d0 <main>:

int main(){
	DDRA = 0xFF;
 4d0:	8f ef       	ldi	r24, 0xFF	; 255
 4d2:	81 b9       	out	0x01, r24	; 1


	while(1)
	{
		uint8_t helperfuntion = (sixBitsSend(HF(getTemp())));
 4d4:	b5 df       	rcall	.-150    	; 0x440 <getTemp>
 4d6:	c0 df       	rcall	.-128    	; 0x458 <HF>
 4d8:	ce df       	rcall	.-100    	; 0x476 <sixBitsSend>

		
		PORTA = helperfuntion;
 4da:	82 b9       	out	0x02, r24	; 2
 4dc:	fb cf       	rjmp	.-10     	; 0x4d4 <main+0x4>

000004de <__subsf3>:
 4de:	50 58       	subi	r21, 0x80	; 128

000004e0 <__addsf3>:
 4e0:	bb 27       	eor	r27, r27
 4e2:	aa 27       	eor	r26, r26
 4e4:	0e d0       	rcall	.+28     	; 0x502 <__addsf3x>
 4e6:	21 c1       	rjmp	.+578    	; 0x72a <__fp_round>
 4e8:	12 d1       	rcall	.+548    	; 0x70e <__fp_pscA>
 4ea:	30 f0       	brcs	.+12     	; 0x4f8 <__addsf3+0x18>
 4ec:	17 d1       	rcall	.+558    	; 0x71c <__fp_pscB>
 4ee:	20 f0       	brcs	.+8      	; 0x4f8 <__addsf3+0x18>
 4f0:	31 f4       	brne	.+12     	; 0x4fe <__addsf3+0x1e>
 4f2:	9f 3f       	cpi	r25, 0xFF	; 255
 4f4:	11 f4       	brne	.+4      	; 0x4fa <__addsf3+0x1a>
 4f6:	1e f4       	brtc	.+6      	; 0x4fe <__addsf3+0x1e>
 4f8:	07 c1       	rjmp	.+526    	; 0x708 <__fp_nan>
 4fa:	0e f4       	brtc	.+2      	; 0x4fe <__addsf3+0x1e>
 4fc:	e0 95       	com	r30
 4fe:	e7 fb       	bst	r30, 7
 500:	d4 c0       	rjmp	.+424    	; 0x6aa <__fp_inf>

00000502 <__addsf3x>:
 502:	e9 2f       	mov	r30, r25
 504:	23 d1       	rcall	.+582    	; 0x74c <__fp_split3>
 506:	80 f3       	brcs	.-32     	; 0x4e8 <__addsf3+0x8>
 508:	ba 17       	cp	r27, r26
 50a:	62 07       	cpc	r22, r18
 50c:	73 07       	cpc	r23, r19
 50e:	84 07       	cpc	r24, r20
 510:	95 07       	cpc	r25, r21
 512:	18 f0       	brcs	.+6      	; 0x51a <__addsf3x+0x18>
 514:	71 f4       	brne	.+28     	; 0x532 <__addsf3x+0x30>
 516:	9e f5       	brtc	.+102    	; 0x57e <__addsf3x+0x7c>
 518:	52 c1       	rjmp	.+676    	; 0x7be <__fp_zero>
 51a:	0e f4       	brtc	.+2      	; 0x51e <__addsf3x+0x1c>
 51c:	e0 95       	com	r30
 51e:	0b 2e       	mov	r0, r27
 520:	ba 2f       	mov	r27, r26
 522:	a0 2d       	mov	r26, r0
 524:	0b 01       	movw	r0, r22
 526:	b9 01       	movw	r22, r18
 528:	90 01       	movw	r18, r0
 52a:	0c 01       	movw	r0, r24
 52c:	ca 01       	movw	r24, r20
 52e:	a0 01       	movw	r20, r0
 530:	11 24       	eor	r1, r1
 532:	ff 27       	eor	r31, r31
 534:	59 1b       	sub	r21, r25
 536:	99 f0       	breq	.+38     	; 0x55e <__addsf3x+0x5c>
 538:	59 3f       	cpi	r21, 0xF9	; 249
 53a:	50 f4       	brcc	.+20     	; 0x550 <__addsf3x+0x4e>
 53c:	50 3e       	cpi	r21, 0xE0	; 224
 53e:	68 f1       	brcs	.+90     	; 0x59a <__addsf3x+0x98>
 540:	1a 16       	cp	r1, r26
 542:	f0 40       	sbci	r31, 0x00	; 0
 544:	a2 2f       	mov	r26, r18
 546:	23 2f       	mov	r18, r19
 548:	34 2f       	mov	r19, r20
 54a:	44 27       	eor	r20, r20
 54c:	58 5f       	subi	r21, 0xF8	; 248
 54e:	f3 cf       	rjmp	.-26     	; 0x536 <__addsf3x+0x34>
 550:	46 95       	lsr	r20
 552:	37 95       	ror	r19
 554:	27 95       	ror	r18
 556:	a7 95       	ror	r26
 558:	f0 40       	sbci	r31, 0x00	; 0
 55a:	53 95       	inc	r21
 55c:	c9 f7       	brne	.-14     	; 0x550 <__addsf3x+0x4e>
 55e:	7e f4       	brtc	.+30     	; 0x57e <__addsf3x+0x7c>
 560:	1f 16       	cp	r1, r31
 562:	ba 0b       	sbc	r27, r26
 564:	62 0b       	sbc	r22, r18
 566:	73 0b       	sbc	r23, r19
 568:	84 0b       	sbc	r24, r20
 56a:	ba f0       	brmi	.+46     	; 0x59a <__addsf3x+0x98>
 56c:	91 50       	subi	r25, 0x01	; 1
 56e:	a1 f0       	breq	.+40     	; 0x598 <__addsf3x+0x96>
 570:	ff 0f       	add	r31, r31
 572:	bb 1f       	adc	r27, r27
 574:	66 1f       	adc	r22, r22
 576:	77 1f       	adc	r23, r23
 578:	88 1f       	adc	r24, r24
 57a:	c2 f7       	brpl	.-16     	; 0x56c <__addsf3x+0x6a>
 57c:	0e c0       	rjmp	.+28     	; 0x59a <__addsf3x+0x98>
 57e:	ba 0f       	add	r27, r26
 580:	62 1f       	adc	r22, r18
 582:	73 1f       	adc	r23, r19
 584:	84 1f       	adc	r24, r20
 586:	48 f4       	brcc	.+18     	; 0x59a <__addsf3x+0x98>
 588:	87 95       	ror	r24
 58a:	77 95       	ror	r23
 58c:	67 95       	ror	r22
 58e:	b7 95       	ror	r27
 590:	f7 95       	ror	r31
 592:	9e 3f       	cpi	r25, 0xFE	; 254
 594:	08 f0       	brcs	.+2      	; 0x598 <__addsf3x+0x96>
 596:	b3 cf       	rjmp	.-154    	; 0x4fe <__addsf3+0x1e>
 598:	93 95       	inc	r25
 59a:	88 0f       	add	r24, r24
 59c:	08 f0       	brcs	.+2      	; 0x5a0 <__addsf3x+0x9e>
 59e:	99 27       	eor	r25, r25
 5a0:	ee 0f       	add	r30, r30
 5a2:	97 95       	ror	r25
 5a4:	87 95       	ror	r24
 5a6:	08 95       	ret

000005a8 <__fixsfsi>:
 5a8:	04 d0       	rcall	.+8      	; 0x5b2 <__fixunssfsi>
 5aa:	68 94       	set
 5ac:	b1 11       	cpse	r27, r1
 5ae:	08 c1       	rjmp	.+528    	; 0x7c0 <__fp_szero>
 5b0:	08 95       	ret

000005b2 <__fixunssfsi>:
 5b2:	d4 d0       	rcall	.+424    	; 0x75c <__fp_splitA>
 5b4:	88 f0       	brcs	.+34     	; 0x5d8 <__fixunssfsi+0x26>
 5b6:	9f 57       	subi	r25, 0x7F	; 127
 5b8:	90 f0       	brcs	.+36     	; 0x5de <__fixunssfsi+0x2c>
 5ba:	b9 2f       	mov	r27, r25
 5bc:	99 27       	eor	r25, r25
 5be:	b7 51       	subi	r27, 0x17	; 23
 5c0:	a0 f0       	brcs	.+40     	; 0x5ea <__fixunssfsi+0x38>
 5c2:	d1 f0       	breq	.+52     	; 0x5f8 <__fixunssfsi+0x46>
 5c4:	66 0f       	add	r22, r22
 5c6:	77 1f       	adc	r23, r23
 5c8:	88 1f       	adc	r24, r24
 5ca:	99 1f       	adc	r25, r25
 5cc:	1a f0       	brmi	.+6      	; 0x5d4 <__fixunssfsi+0x22>
 5ce:	ba 95       	dec	r27
 5d0:	c9 f7       	brne	.-14     	; 0x5c4 <__fixunssfsi+0x12>
 5d2:	12 c0       	rjmp	.+36     	; 0x5f8 <__fixunssfsi+0x46>
 5d4:	b1 30       	cpi	r27, 0x01	; 1
 5d6:	81 f0       	breq	.+32     	; 0x5f8 <__fixunssfsi+0x46>
 5d8:	f2 d0       	rcall	.+484    	; 0x7be <__fp_zero>
 5da:	b1 e0       	ldi	r27, 0x01	; 1
 5dc:	08 95       	ret
 5de:	ef c0       	rjmp	.+478    	; 0x7be <__fp_zero>
 5e0:	67 2f       	mov	r22, r23
 5e2:	78 2f       	mov	r23, r24
 5e4:	88 27       	eor	r24, r24
 5e6:	b8 5f       	subi	r27, 0xF8	; 248
 5e8:	39 f0       	breq	.+14     	; 0x5f8 <__fixunssfsi+0x46>
 5ea:	b9 3f       	cpi	r27, 0xF9	; 249
 5ec:	cc f3       	brlt	.-14     	; 0x5e0 <__fixunssfsi+0x2e>
 5ee:	86 95       	lsr	r24
 5f0:	77 95       	ror	r23
 5f2:	67 95       	ror	r22
 5f4:	b3 95       	inc	r27
 5f6:	d9 f7       	brne	.-10     	; 0x5ee <__fixunssfsi+0x3c>
 5f8:	3e f4       	brtc	.+14     	; 0x608 <__fixunssfsi+0x56>
 5fa:	90 95       	com	r25
 5fc:	80 95       	com	r24
 5fe:	70 95       	com	r23
 600:	61 95       	neg	r22
 602:	7f 4f       	sbci	r23, 0xFF	; 255
 604:	8f 4f       	sbci	r24, 0xFF	; 255
 606:	9f 4f       	sbci	r25, 0xFF	; 255
 608:	08 95       	ret

0000060a <__floatunsisf>:
 60a:	e8 94       	clt
 60c:	09 c0       	rjmp	.+18     	; 0x620 <__floatsisf+0x12>

0000060e <__floatsisf>:
 60e:	97 fb       	bst	r25, 7
 610:	3e f4       	brtc	.+14     	; 0x620 <__floatsisf+0x12>
 612:	90 95       	com	r25
 614:	80 95       	com	r24
 616:	70 95       	com	r23
 618:	61 95       	neg	r22
 61a:	7f 4f       	sbci	r23, 0xFF	; 255
 61c:	8f 4f       	sbci	r24, 0xFF	; 255
 61e:	9f 4f       	sbci	r25, 0xFF	; 255
 620:	99 23       	and	r25, r25
 622:	a9 f0       	breq	.+42     	; 0x64e <__floatsisf+0x40>
 624:	f9 2f       	mov	r31, r25
 626:	96 e9       	ldi	r25, 0x96	; 150
 628:	bb 27       	eor	r27, r27
 62a:	93 95       	inc	r25
 62c:	f6 95       	lsr	r31
 62e:	87 95       	ror	r24
 630:	77 95       	ror	r23
 632:	67 95       	ror	r22
 634:	b7 95       	ror	r27
 636:	f1 11       	cpse	r31, r1
 638:	f8 cf       	rjmp	.-16     	; 0x62a <__floatsisf+0x1c>
 63a:	fa f4       	brpl	.+62     	; 0x67a <__floatsisf+0x6c>
 63c:	bb 0f       	add	r27, r27
 63e:	11 f4       	brne	.+4      	; 0x644 <__floatsisf+0x36>
 640:	60 ff       	sbrs	r22, 0
 642:	1b c0       	rjmp	.+54     	; 0x67a <__floatsisf+0x6c>
 644:	6f 5f       	subi	r22, 0xFF	; 255
 646:	7f 4f       	sbci	r23, 0xFF	; 255
 648:	8f 4f       	sbci	r24, 0xFF	; 255
 64a:	9f 4f       	sbci	r25, 0xFF	; 255
 64c:	16 c0       	rjmp	.+44     	; 0x67a <__floatsisf+0x6c>
 64e:	88 23       	and	r24, r24
 650:	11 f0       	breq	.+4      	; 0x656 <__floatsisf+0x48>
 652:	96 e9       	ldi	r25, 0x96	; 150
 654:	11 c0       	rjmp	.+34     	; 0x678 <__floatsisf+0x6a>
 656:	77 23       	and	r23, r23
 658:	21 f0       	breq	.+8      	; 0x662 <__floatsisf+0x54>
 65a:	9e e8       	ldi	r25, 0x8E	; 142
 65c:	87 2f       	mov	r24, r23
 65e:	76 2f       	mov	r23, r22
 660:	05 c0       	rjmp	.+10     	; 0x66c <__floatsisf+0x5e>
 662:	66 23       	and	r22, r22
 664:	71 f0       	breq	.+28     	; 0x682 <__floatsisf+0x74>
 666:	96 e8       	ldi	r25, 0x86	; 134
 668:	86 2f       	mov	r24, r22
 66a:	70 e0       	ldi	r23, 0x00	; 0
 66c:	60 e0       	ldi	r22, 0x00	; 0
 66e:	2a f0       	brmi	.+10     	; 0x67a <__floatsisf+0x6c>
 670:	9a 95       	dec	r25
 672:	66 0f       	add	r22, r22
 674:	77 1f       	adc	r23, r23
 676:	88 1f       	adc	r24, r24
 678:	da f7       	brpl	.-10     	; 0x670 <__floatsisf+0x62>
 67a:	88 0f       	add	r24, r24
 67c:	96 95       	lsr	r25
 67e:	87 95       	ror	r24
 680:	97 f9       	bld	r25, 7
 682:	08 95       	ret

00000684 <floor>:
 684:	85 d0       	rcall	.+266    	; 0x790 <__fp_trunc>
 686:	80 f0       	brcs	.+32     	; 0x6a8 <floor+0x24>
 688:	9f 37       	cpi	r25, 0x7F	; 127
 68a:	40 f4       	brcc	.+16     	; 0x69c <floor+0x18>
 68c:	91 11       	cpse	r25, r1
 68e:	0e f0       	brts	.+2      	; 0x692 <floor+0xe>
 690:	97 c0       	rjmp	.+302    	; 0x7c0 <__fp_szero>
 692:	60 e0       	ldi	r22, 0x00	; 0
 694:	70 e0       	ldi	r23, 0x00	; 0
 696:	80 e8       	ldi	r24, 0x80	; 128
 698:	9f eb       	ldi	r25, 0xBF	; 191
 69a:	08 95       	ret
 69c:	26 f4       	brtc	.+8      	; 0x6a6 <floor+0x22>
 69e:	1b 16       	cp	r1, r27
 6a0:	61 1d       	adc	r22, r1
 6a2:	71 1d       	adc	r23, r1
 6a4:	81 1d       	adc	r24, r1
 6a6:	07 c0       	rjmp	.+14     	; 0x6b6 <__fp_mintl>
 6a8:	21 c0       	rjmp	.+66     	; 0x6ec <__fp_mpack>

000006aa <__fp_inf>:
 6aa:	97 f9       	bld	r25, 7
 6ac:	9f 67       	ori	r25, 0x7F	; 127
 6ae:	80 e8       	ldi	r24, 0x80	; 128
 6b0:	70 e0       	ldi	r23, 0x00	; 0
 6b2:	60 e0       	ldi	r22, 0x00	; 0
 6b4:	08 95       	ret

000006b6 <__fp_mintl>:
 6b6:	88 23       	and	r24, r24
 6b8:	71 f4       	brne	.+28     	; 0x6d6 <__fp_mintl+0x20>
 6ba:	77 23       	and	r23, r23
 6bc:	21 f0       	breq	.+8      	; 0x6c6 <__fp_mintl+0x10>
 6be:	98 50       	subi	r25, 0x08	; 8
 6c0:	87 2b       	or	r24, r23
 6c2:	76 2f       	mov	r23, r22
 6c4:	07 c0       	rjmp	.+14     	; 0x6d4 <__fp_mintl+0x1e>
 6c6:	66 23       	and	r22, r22
 6c8:	11 f4       	brne	.+4      	; 0x6ce <__fp_mintl+0x18>
 6ca:	99 27       	eor	r25, r25
 6cc:	0d c0       	rjmp	.+26     	; 0x6e8 <__fp_mintl+0x32>
 6ce:	90 51       	subi	r25, 0x10	; 16
 6d0:	86 2b       	or	r24, r22
 6d2:	70 e0       	ldi	r23, 0x00	; 0
 6d4:	60 e0       	ldi	r22, 0x00	; 0
 6d6:	2a f0       	brmi	.+10     	; 0x6e2 <__fp_mintl+0x2c>
 6d8:	9a 95       	dec	r25
 6da:	66 0f       	add	r22, r22
 6dc:	77 1f       	adc	r23, r23
 6de:	88 1f       	adc	r24, r24
 6e0:	da f7       	brpl	.-10     	; 0x6d8 <__fp_mintl+0x22>
 6e2:	88 0f       	add	r24, r24
 6e4:	96 95       	lsr	r25
 6e6:	87 95       	ror	r24
 6e8:	97 f9       	bld	r25, 7
 6ea:	08 95       	ret

000006ec <__fp_mpack>:
 6ec:	9f 3f       	cpi	r25, 0xFF	; 255
 6ee:	31 f0       	breq	.+12     	; 0x6fc <__fp_mpack_finite+0xc>

000006f0 <__fp_mpack_finite>:
 6f0:	91 50       	subi	r25, 0x01	; 1
 6f2:	20 f4       	brcc	.+8      	; 0x6fc <__fp_mpack_finite+0xc>
 6f4:	87 95       	ror	r24
 6f6:	77 95       	ror	r23
 6f8:	67 95       	ror	r22
 6fa:	b7 95       	ror	r27
 6fc:	88 0f       	add	r24, r24
 6fe:	91 1d       	adc	r25, r1
 700:	96 95       	lsr	r25
 702:	87 95       	ror	r24
 704:	97 f9       	bld	r25, 7
 706:	08 95       	ret

00000708 <__fp_nan>:
 708:	9f ef       	ldi	r25, 0xFF	; 255
 70a:	80 ec       	ldi	r24, 0xC0	; 192
 70c:	08 95       	ret

0000070e <__fp_pscA>:
 70e:	00 24       	eor	r0, r0
 710:	0a 94       	dec	r0
 712:	16 16       	cp	r1, r22
 714:	17 06       	cpc	r1, r23
 716:	18 06       	cpc	r1, r24
 718:	09 06       	cpc	r0, r25
 71a:	08 95       	ret

0000071c <__fp_pscB>:
 71c:	00 24       	eor	r0, r0
 71e:	0a 94       	dec	r0
 720:	12 16       	cp	r1, r18
 722:	13 06       	cpc	r1, r19
 724:	14 06       	cpc	r1, r20
 726:	05 06       	cpc	r0, r21
 728:	08 95       	ret

0000072a <__fp_round>:
 72a:	09 2e       	mov	r0, r25
 72c:	03 94       	inc	r0
 72e:	00 0c       	add	r0, r0
 730:	11 f4       	brne	.+4      	; 0x736 <__fp_round+0xc>
 732:	88 23       	and	r24, r24
 734:	52 f0       	brmi	.+20     	; 0x74a <__fp_round+0x20>
 736:	bb 0f       	add	r27, r27
 738:	40 f4       	brcc	.+16     	; 0x74a <__fp_round+0x20>
 73a:	bf 2b       	or	r27, r31
 73c:	11 f4       	brne	.+4      	; 0x742 <__fp_round+0x18>
 73e:	60 ff       	sbrs	r22, 0
 740:	04 c0       	rjmp	.+8      	; 0x74a <__fp_round+0x20>
 742:	6f 5f       	subi	r22, 0xFF	; 255
 744:	7f 4f       	sbci	r23, 0xFF	; 255
 746:	8f 4f       	sbci	r24, 0xFF	; 255
 748:	9f 4f       	sbci	r25, 0xFF	; 255
 74a:	08 95       	ret

0000074c <__fp_split3>:
 74c:	57 fd       	sbrc	r21, 7
 74e:	90 58       	subi	r25, 0x80	; 128
 750:	44 0f       	add	r20, r20
 752:	55 1f       	adc	r21, r21
 754:	59 f0       	breq	.+22     	; 0x76c <__fp_splitA+0x10>
 756:	5f 3f       	cpi	r21, 0xFF	; 255
 758:	71 f0       	breq	.+28     	; 0x776 <__fp_splitA+0x1a>
 75a:	47 95       	ror	r20

0000075c <__fp_splitA>:
 75c:	88 0f       	add	r24, r24
 75e:	97 fb       	bst	r25, 7
 760:	99 1f       	adc	r25, r25
 762:	61 f0       	breq	.+24     	; 0x77c <__fp_splitA+0x20>
 764:	9f 3f       	cpi	r25, 0xFF	; 255
 766:	79 f0       	breq	.+30     	; 0x786 <__fp_splitA+0x2a>
 768:	87 95       	ror	r24
 76a:	08 95       	ret
 76c:	12 16       	cp	r1, r18
 76e:	13 06       	cpc	r1, r19
 770:	14 06       	cpc	r1, r20
 772:	55 1f       	adc	r21, r21
 774:	f2 cf       	rjmp	.-28     	; 0x75a <__fp_split3+0xe>
 776:	46 95       	lsr	r20
 778:	f1 df       	rcall	.-30     	; 0x75c <__fp_splitA>
 77a:	08 c0       	rjmp	.+16     	; 0x78c <__fp_splitA+0x30>
 77c:	16 16       	cp	r1, r22
 77e:	17 06       	cpc	r1, r23
 780:	18 06       	cpc	r1, r24
 782:	99 1f       	adc	r25, r25
 784:	f1 cf       	rjmp	.-30     	; 0x768 <__fp_splitA+0xc>
 786:	86 95       	lsr	r24
 788:	71 05       	cpc	r23, r1
 78a:	61 05       	cpc	r22, r1
 78c:	08 94       	sec
 78e:	08 95       	ret

00000790 <__fp_trunc>:
 790:	e5 df       	rcall	.-54     	; 0x75c <__fp_splitA>
 792:	a0 f0       	brcs	.+40     	; 0x7bc <__fp_trunc+0x2c>
 794:	be e7       	ldi	r27, 0x7E	; 126
 796:	b9 17       	cp	r27, r25
 798:	88 f4       	brcc	.+34     	; 0x7bc <__fp_trunc+0x2c>
 79a:	bb 27       	eor	r27, r27
 79c:	9f 38       	cpi	r25, 0x8F	; 143
 79e:	60 f4       	brcc	.+24     	; 0x7b8 <__fp_trunc+0x28>
 7a0:	16 16       	cp	r1, r22
 7a2:	b1 1d       	adc	r27, r1
 7a4:	67 2f       	mov	r22, r23
 7a6:	78 2f       	mov	r23, r24
 7a8:	88 27       	eor	r24, r24
 7aa:	98 5f       	subi	r25, 0xF8	; 248
 7ac:	f7 cf       	rjmp	.-18     	; 0x79c <__fp_trunc+0xc>
 7ae:	86 95       	lsr	r24
 7b0:	77 95       	ror	r23
 7b2:	67 95       	ror	r22
 7b4:	b1 1d       	adc	r27, r1
 7b6:	93 95       	inc	r25
 7b8:	96 39       	cpi	r25, 0x96	; 150
 7ba:	c8 f3       	brcs	.-14     	; 0x7ae <__fp_trunc+0x1e>
 7bc:	08 95       	ret

000007be <__fp_zero>:
 7be:	e8 94       	clt

000007c0 <__fp_szero>:
 7c0:	bb 27       	eor	r27, r27
 7c2:	66 27       	eor	r22, r22
 7c4:	77 27       	eor	r23, r23
 7c6:	cb 01       	movw	r24, r22
 7c8:	97 f9       	bld	r25, 7
 7ca:	08 95       	ret

000007cc <__gesf2>:
 7cc:	66 d0       	rcall	.+204    	; 0x89a <__fp_cmp>
 7ce:	08 f4       	brcc	.+2      	; 0x7d2 <__gesf2+0x6>
 7d0:	8f ef       	ldi	r24, 0xFF	; 255
 7d2:	08 95       	ret

000007d4 <__mulsf3>:
 7d4:	0b d0       	rcall	.+22     	; 0x7ec <__mulsf3x>
 7d6:	a9 cf       	rjmp	.-174    	; 0x72a <__fp_round>
 7d8:	9a df       	rcall	.-204    	; 0x70e <__fp_pscA>
 7da:	28 f0       	brcs	.+10     	; 0x7e6 <__mulsf3+0x12>
 7dc:	9f df       	rcall	.-194    	; 0x71c <__fp_pscB>
 7de:	18 f0       	brcs	.+6      	; 0x7e6 <__mulsf3+0x12>
 7e0:	95 23       	and	r25, r21
 7e2:	09 f0       	breq	.+2      	; 0x7e6 <__mulsf3+0x12>
 7e4:	62 cf       	rjmp	.-316    	; 0x6aa <__fp_inf>
 7e6:	90 cf       	rjmp	.-224    	; 0x708 <__fp_nan>
 7e8:	11 24       	eor	r1, r1
 7ea:	ea cf       	rjmp	.-44     	; 0x7c0 <__fp_szero>

000007ec <__mulsf3x>:
 7ec:	af df       	rcall	.-162    	; 0x74c <__fp_split3>
 7ee:	a0 f3       	brcs	.-24     	; 0x7d8 <__mulsf3+0x4>

000007f0 <__mulsf3_pse>:
 7f0:	95 9f       	mul	r25, r21
 7f2:	d1 f3       	breq	.-12     	; 0x7e8 <__mulsf3+0x14>
 7f4:	95 0f       	add	r25, r21
 7f6:	50 e0       	ldi	r21, 0x00	; 0
 7f8:	55 1f       	adc	r21, r21
 7fa:	62 9f       	mul	r22, r18
 7fc:	f0 01       	movw	r30, r0
 7fe:	72 9f       	mul	r23, r18
 800:	bb 27       	eor	r27, r27
 802:	f0 0d       	add	r31, r0
 804:	b1 1d       	adc	r27, r1
 806:	63 9f       	mul	r22, r19
 808:	aa 27       	eor	r26, r26
 80a:	f0 0d       	add	r31, r0
 80c:	b1 1d       	adc	r27, r1
 80e:	aa 1f       	adc	r26, r26
 810:	64 9f       	mul	r22, r20
 812:	66 27       	eor	r22, r22
 814:	b0 0d       	add	r27, r0
 816:	a1 1d       	adc	r26, r1
 818:	66 1f       	adc	r22, r22
 81a:	82 9f       	mul	r24, r18
 81c:	22 27       	eor	r18, r18
 81e:	b0 0d       	add	r27, r0
 820:	a1 1d       	adc	r26, r1
 822:	62 1f       	adc	r22, r18
 824:	73 9f       	mul	r23, r19
 826:	b0 0d       	add	r27, r0
 828:	a1 1d       	adc	r26, r1
 82a:	62 1f       	adc	r22, r18
 82c:	83 9f       	mul	r24, r19
 82e:	a0 0d       	add	r26, r0
 830:	61 1d       	adc	r22, r1
 832:	22 1f       	adc	r18, r18
 834:	74 9f       	mul	r23, r20
 836:	33 27       	eor	r19, r19
 838:	a0 0d       	add	r26, r0
 83a:	61 1d       	adc	r22, r1
 83c:	23 1f       	adc	r18, r19
 83e:	84 9f       	mul	r24, r20
 840:	60 0d       	add	r22, r0
 842:	21 1d       	adc	r18, r1
 844:	82 2f       	mov	r24, r18
 846:	76 2f       	mov	r23, r22
 848:	6a 2f       	mov	r22, r26
 84a:	11 24       	eor	r1, r1
 84c:	9f 57       	subi	r25, 0x7F	; 127
 84e:	50 40       	sbci	r21, 0x00	; 0
 850:	8a f0       	brmi	.+34     	; 0x874 <__mulsf3_pse+0x84>
 852:	e1 f0       	breq	.+56     	; 0x88c <__mulsf3_pse+0x9c>
 854:	88 23       	and	r24, r24
 856:	4a f0       	brmi	.+18     	; 0x86a <__mulsf3_pse+0x7a>
 858:	ee 0f       	add	r30, r30
 85a:	ff 1f       	adc	r31, r31
 85c:	bb 1f       	adc	r27, r27
 85e:	66 1f       	adc	r22, r22
 860:	77 1f       	adc	r23, r23
 862:	88 1f       	adc	r24, r24
 864:	91 50       	subi	r25, 0x01	; 1
 866:	50 40       	sbci	r21, 0x00	; 0
 868:	a9 f7       	brne	.-22     	; 0x854 <__mulsf3_pse+0x64>
 86a:	9e 3f       	cpi	r25, 0xFE	; 254
 86c:	51 05       	cpc	r21, r1
 86e:	70 f0       	brcs	.+28     	; 0x88c <__mulsf3_pse+0x9c>
 870:	1c cf       	rjmp	.-456    	; 0x6aa <__fp_inf>
 872:	a6 cf       	rjmp	.-180    	; 0x7c0 <__fp_szero>
 874:	5f 3f       	cpi	r21, 0xFF	; 255
 876:	ec f3       	brlt	.-6      	; 0x872 <__mulsf3_pse+0x82>
 878:	98 3e       	cpi	r25, 0xE8	; 232
 87a:	dc f3       	brlt	.-10     	; 0x872 <__mulsf3_pse+0x82>
 87c:	86 95       	lsr	r24
 87e:	77 95       	ror	r23
 880:	67 95       	ror	r22
 882:	b7 95       	ror	r27
 884:	f7 95       	ror	r31
 886:	e7 95       	ror	r30
 888:	9f 5f       	subi	r25, 0xFF	; 255
 88a:	c1 f7       	brne	.-16     	; 0x87c <__mulsf3_pse+0x8c>
 88c:	fe 2b       	or	r31, r30
 88e:	88 0f       	add	r24, r24
 890:	91 1d       	adc	r25, r1
 892:	96 95       	lsr	r25
 894:	87 95       	ror	r24
 896:	97 f9       	bld	r25, 7
 898:	08 95       	ret

0000089a <__fp_cmp>:
 89a:	99 0f       	add	r25, r25
 89c:	00 08       	sbc	r0, r0
 89e:	55 0f       	add	r21, r21
 8a0:	aa 0b       	sbc	r26, r26
 8a2:	e0 e8       	ldi	r30, 0x80	; 128
 8a4:	fe ef       	ldi	r31, 0xFE	; 254
 8a6:	16 16       	cp	r1, r22
 8a8:	17 06       	cpc	r1, r23
 8aa:	e8 07       	cpc	r30, r24
 8ac:	f9 07       	cpc	r31, r25
 8ae:	c0 f0       	brcs	.+48     	; 0x8e0 <__fp_cmp+0x46>
 8b0:	12 16       	cp	r1, r18
 8b2:	13 06       	cpc	r1, r19
 8b4:	e4 07       	cpc	r30, r20
 8b6:	f5 07       	cpc	r31, r21
 8b8:	98 f0       	brcs	.+38     	; 0x8e0 <__fp_cmp+0x46>
 8ba:	62 1b       	sub	r22, r18
 8bc:	73 0b       	sbc	r23, r19
 8be:	84 0b       	sbc	r24, r20
 8c0:	95 0b       	sbc	r25, r21
 8c2:	39 f4       	brne	.+14     	; 0x8d2 <__fp_cmp+0x38>
 8c4:	0a 26       	eor	r0, r26
 8c6:	61 f0       	breq	.+24     	; 0x8e0 <__fp_cmp+0x46>
 8c8:	23 2b       	or	r18, r19
 8ca:	24 2b       	or	r18, r20
 8cc:	25 2b       	or	r18, r21
 8ce:	21 f4       	brne	.+8      	; 0x8d8 <__fp_cmp+0x3e>
 8d0:	08 95       	ret
 8d2:	0a 26       	eor	r0, r26
 8d4:	09 f4       	brne	.+2      	; 0x8d8 <__fp_cmp+0x3e>
 8d6:	a1 40       	sbci	r26, 0x01	; 1
 8d8:	a6 95       	lsr	r26
 8da:	8f ef       	ldi	r24, 0xFF	; 255
 8dc:	81 1d       	adc	r24, r1
 8de:	81 1d       	adc	r24, r1
 8e0:	08 95       	ret

000008e2 <_exit>:
 8e2:	f8 94       	cli

000008e4 <__stop_program>:
 8e4:	ff cf       	rjmp	.-2      	; 0x8e4 <__stop_program>
