
TempFromPSoC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800200  00000a3a  00000ace  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a3a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  0080020c  0080020c  00000ada  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ada  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b0c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001765  00000000  00000000  00000c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f5a  00000000  00000000  000023a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b43  00000000  00000000  000032fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f0  00000000  00000000  00003e40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007fc  00000000  00000000  00004130  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bf7  00000000  00000000  0000492c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00005523  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	b1 c0       	rjmp	.+354    	; 0x168 <__vector_1>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5f c0       	rjmp	.+190    	; 0x124 <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	73 c0       	rjmp	.+230    	; 0x154 <__vector_27>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea e3       	ldi	r30, 0x3A	; 58
  fc:	fa e0       	ldi	r31, 0x0A	; 10
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ac 30       	cpi	r26, 0x0C	; 12
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	ac e0       	ldi	r26, 0x0C	; 12
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a2 32       	cpi	r26, 0x22	; 34
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	06 d1       	rcall	.+524    	; 0x32c <main>
 120:	8a c4       	rjmp	.+2324   	; 0xa36 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <__vector_25>:
uint32_t datapakke = 0;
char charRecieved;
uint16_t requestTemperature = 0b0000000011111111;

ISR(USART0_RX_vect)
{
 124:	1f 92       	push	r1
 126:	0f 92       	push	r0
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	0f 92       	push	r0
 12c:	11 24       	eor	r1, r1
 12e:	8f 93       	push	r24
 130:	9f 93       	push	r25
	// Vi modtager UART data og gemmer i recievedData
	uint8_t recievedData = UDR0;
 132:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
	// Vi gemmer den modtagede uint8_t data i global uint16_t variable og sætter alle ubrugte pins til 0
	cleanedData = recievedData;
 136:	90 e0       	ldi	r25, 0x00	; 0
	cleanedData &= 0b0000000001111111;
 138:	8f 77       	andi	r24, 0x7F	; 127
 13a:	99 27       	eor	r25, r25
 13c:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <cleanedData+0x1>
 140:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <cleanedData>
	// Visuel test udskrift på LED'er 
	// OBS: Data er pakket. Bit 0 == 0.5, Bit 1 - 6 == binær talt mellem 0 og 63
	// Dvs. at 1111111 svare til temperatur værdien 63.5
	PORTB = cleanedData;
 144:	85 b9       	out	0x05, r24	; 5
	SendString(bufferWhole);
	SendString(bufferDec);
	SendString("\n");
	//*/
	
}
 146:	9f 91       	pop	r25
 148:	8f 91       	pop	r24
 14a:	0f 90       	pop	r0
 14c:	0f be       	out	0x3f, r0	; 63
 14e:	0f 90       	pop	r0
 150:	1f 90       	pop	r1
 152:	18 95       	reti

00000154 <__vector_27>:

ISR(USART0_TX_vect)
{
 154:	1f 92       	push	r1
 156:	0f 92       	push	r0
 158:	0f b6       	in	r0, 0x3f	; 63
 15a:	0f 92       	push	r0
 15c:	11 24       	eor	r1, r1

}
 15e:	0f 90       	pop	r0
 160:	0f be       	out	0x3f, r0	; 63
 162:	0f 90       	pop	r0
 164:	1f 90       	pop	r1
 166:	18 95       	reti

00000168 <__vector_1>:

ISR(INT0_vect)
{
 168:	1f 92       	push	r1
 16a:	0f 92       	push	r0
 16c:	0f b6       	in	r0, 0x3f	; 63
 16e:	0f 92       	push	r0
 170:	11 24       	eor	r1, r1
 172:	2f 93       	push	r18
 174:	3f 93       	push	r19
 176:	4f 93       	push	r20
 178:	5f 93       	push	r21
 17a:	6f 93       	push	r22
 17c:	7f 93       	push	r23
 17e:	8f 93       	push	r24
 180:	9f 93       	push	r25
 182:	af 93       	push	r26
 184:	bf 93       	push	r27
	//////////////////////SENDER ISR!///////////////
	/*Saetter PIN til high / low på ZC interrupt.Counter saettes til 1 når sendx10() kaldes og
	datastroemmen slutter når det sidste bit i datapakke er sat på PORTA*/
	
	if (counter <=4)
 186:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <counter>
 18a:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <counter+0x1>
 18e:	05 97       	sbiw	r24, 0x05	; 5
 190:	cc f4       	brge	.+50     	; 0x1c4 <__vector_1+0x5c>
	{
		if (start & (0b00001000 >> (counter - 1)))
 192:	20 91 09 02 	lds	r18, 0x0209	; 0x800209 <counter>
 196:	30 91 0a 02 	lds	r19, 0x020A	; 0x80020a <counter+0x1>
 19a:	21 50       	subi	r18, 0x01	; 1
 19c:	31 09       	sbc	r19, r1
 19e:	88 e0       	ldi	r24, 0x08	; 8
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	ac 01       	movw	r20, r24
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <__vector_1+0x42>
 1a6:	55 95       	asr	r21
 1a8:	47 95       	ror	r20
 1aa:	2a 95       	dec	r18
 1ac:	e2 f7       	brpl	.-8      	; 0x1a6 <__vector_1+0x3e>
 1ae:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <start>
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	84 23       	and	r24, r20
 1b6:	95 23       	and	r25, r21
 1b8:	89 2b       	or	r24, r25
 1ba:	19 f0       	breq	.+6      	; 0x1c2 <__vector_1+0x5a>
		//sendBurst();
		PORTA = 0b00000001;
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	82 b9       	out	0x02, r24	; 2
 1c0:	01 c0       	rjmp	.+2      	; 0x1c4 <__vector_1+0x5c>
		
		else PORTA = 0;
 1c2:	12 b8       	out	0x02, r1	; 2
	}
	
	
	if (counter > 4 && counter <= dataSIZE+4)
 1c4:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <counter>
 1c8:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <counter+0x1>
 1cc:	05 97       	sbiw	r24, 0x05	; 5
 1ce:	5c f1       	brlt	.+86     	; 0x226 <__vector_1+0xbe>
 1d0:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <counter>
 1d4:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <counter+0x1>
 1d8:	83 97       	sbiw	r24, 0x23	; 35
 1da:	2c f5       	brge	.+74     	; 0x226 <__vector_1+0xbe>
	{
		if (datapakke & (0b10000000000000000000000000000000 >> (counter - 5))) // set PIN high
 1dc:	20 91 09 02 	lds	r18, 0x0209	; 0x800209 <counter>
 1e0:	30 91 0a 02 	lds	r19, 0x020A	; 0x80020a <counter+0x1>
 1e4:	25 50       	subi	r18, 0x05	; 5
 1e6:	31 09       	sbc	r19, r1
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	a0 e0       	ldi	r26, 0x00	; 0
 1ee:	b0 e8       	ldi	r27, 0x80	; 128
 1f0:	04 c0       	rjmp	.+8      	; 0x1fa <__vector_1+0x92>
 1f2:	b6 95       	lsr	r27
 1f4:	a7 95       	ror	r26
 1f6:	97 95       	ror	r25
 1f8:	87 95       	ror	r24
 1fa:	2a 95       	dec	r18
 1fc:	d2 f7       	brpl	.-12     	; 0x1f2 <__vector_1+0x8a>
 1fe:	40 91 0c 02 	lds	r20, 0x020C	; 0x80020c <__data_end>
 202:	50 91 0d 02 	lds	r21, 0x020D	; 0x80020d <__data_end+0x1>
 206:	60 91 0e 02 	lds	r22, 0x020E	; 0x80020e <__data_end+0x2>
 20a:	70 91 0f 02 	lds	r23, 0x020F	; 0x80020f <__data_end+0x3>
 20e:	84 23       	and	r24, r20
 210:	95 23       	and	r25, r21
 212:	a6 23       	and	r26, r22
 214:	b7 23       	and	r27, r23
 216:	89 2b       	or	r24, r25
 218:	8a 2b       	or	r24, r26
 21a:	8b 2b       	or	r24, r27
 21c:	19 f0       	breq	.+6      	; 0x224 <__vector_1+0xbc>
		//sendBurst();
		PORTA = 0b00000001;
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	82 b9       	out	0x02, r24	; 2
 222:	01 c0       	rjmp	.+2      	; 0x226 <__vector_1+0xbe>
		
		else PORTA = 0; //set PIN low
 224:	12 b8       	out	0x02, r1	; 2
	}
	
	if (counter > dataSIZE+4)
 226:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <counter>
 22a:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <counter+0x1>
 22e:	83 97       	sbiw	r24, 0x23	; 35
 230:	0c f0       	brlt	.+2      	; 0x234 <__vector_1+0xcc>
	{
		PORTA = 0;
 232:	12 b8       	out	0x02, r1	; 2
	}
	
	counter++;
 234:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <counter>
 238:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <counter+0x1>
 23c:	01 96       	adiw	r24, 0x01	; 1
 23e:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <counter+0x1>
 242:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <counter>
	
	/////////////////////MODTAGER ISR!///////////////
	

	//_delay_ms(20);
	uint8_t inputPin = (PINC & 0x1);
 246:	86 b1       	in	r24, 0x06	; 6
 248:	98 2f       	mov	r25, r24
 24a:	91 70       	andi	r25, 0x01	; 1
	uint32_t longInputPin = 0x0000;
	longInputPin|= inputPin;
 24c:	49 2f       	mov	r20, r25
 24e:	50 e0       	ldi	r21, 0x00	; 0
 250:	60 e0       	ldi	r22, 0x00	; 0
 252:	70 e0       	ldi	r23, 0x00	; 0
	
	if(startRecieved != 0b00001110)
 254:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <startRecieved>
 258:	8e 30       	cpi	r24, 0x0E	; 14
 25a:	29 f0       	breq	.+10     	; 0x266 <__vector_1+0xfe>
	{
		startRecieved |= inputPin;
 25c:	89 2b       	or	r24, r25
		startRecieved = startRecieved << 1;
 25e:	88 0f       	add	r24, r24
 260:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <startRecieved>
 264:	54 c0       	rjmp	.+168    	; 0x30e <__vector_1+0x1a6>
	}
	else if (startRecieved == 0b00001110)
 266:	8e 30       	cpi	r24, 0x0E	; 14
 268:	09 f0       	breq	.+2      	; 0x26c <__vector_1+0x104>
 26a:	51 c0       	rjmp	.+162    	; 0x30e <__vector_1+0x1a6>

	{
		if(count <= dataSIZE)
 26c:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <count>
 270:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <count+0x1>
 274:	4f 97       	sbiw	r24, 0x1f	; 31
 276:	14 f5       	brge	.+68     	; 0x2bc <__vector_1+0x154>
		{
			datapakkeRecieved |= longInputPin;
 278:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <datapakkeRecieved>
 27c:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <datapakkeRecieved+0x1>
 280:	a0 91 16 02 	lds	r26, 0x0216	; 0x800216 <datapakkeRecieved+0x2>
 284:	b0 91 17 02 	lds	r27, 0x0217	; 0x800217 <datapakkeRecieved+0x3>
 288:	48 2b       	or	r20, r24
 28a:	59 2b       	or	r21, r25
 28c:	6a 2b       	or	r22, r26
 28e:	7b 2b       	or	r23, r27
			datapakkeRecieved = (datapakkeRecieved << 1);
 290:	44 0f       	add	r20, r20
 292:	55 1f       	adc	r21, r21
 294:	66 1f       	adc	r22, r22
 296:	77 1f       	adc	r23, r23
 298:	40 93 14 02 	sts	0x0214, r20	; 0x800214 <datapakkeRecieved>
 29c:	50 93 15 02 	sts	0x0215, r21	; 0x800215 <datapakkeRecieved+0x1>
 2a0:	60 93 16 02 	sts	0x0216, r22	; 0x800216 <datapakkeRecieved+0x2>
 2a4:	70 93 17 02 	sts	0x0217, r23	; 0x800217 <datapakkeRecieved+0x3>
			count++;
 2a8:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <count>
 2ac:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <count+0x1>
 2b0:	01 96       	adiw	r24, 0x01	; 1
 2b2:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <count+0x1>
 2b6:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <count>
 2ba:	29 c0       	rjmp	.+82     	; 0x30e <__vector_1+0x1a6>
		}
		
		else if (count == (dataSIZE+1))
 2bc:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <count>
 2c0:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <count+0x1>
 2c4:	4f 97       	sbiw	r24, 0x1f	; 31
 2c6:	19 f5       	brne	.+70     	; 0x30e <__vector_1+0x1a6>
		{
			datapakkeRecieved = datapakkeRecieved << 2;
 2c8:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <datapakkeRecieved>
 2cc:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <datapakkeRecieved+0x1>
 2d0:	a0 91 16 02 	lds	r26, 0x0216	; 0x800216 <datapakkeRecieved+0x2>
 2d4:	b0 91 17 02 	lds	r27, 0x0217	; 0x800217 <datapakkeRecieved+0x3>
 2d8:	88 0f       	add	r24, r24
 2da:	99 1f       	adc	r25, r25
 2dc:	aa 1f       	adc	r26, r26
 2de:	bb 1f       	adc	r27, r27
 2e0:	88 0f       	add	r24, r24
 2e2:	99 1f       	adc	r25, r25
 2e4:	aa 1f       	adc	r26, r26
 2e6:	bb 1f       	adc	r27, r27
 2e8:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <datapakkeRecieved>
 2ec:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <datapakkeRecieved+0x1>
 2f0:	a0 93 16 02 	sts	0x0216, r26	; 0x800216 <datapakkeRecieved+0x2>
 2f4:	b0 93 17 02 	sts	0x0217, r27	; 0x800217 <datapakkeRecieved+0x3>
			startRecieved = 0;
 2f8:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <startRecieved>
			
			count++;
 2fc:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <count>
 300:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <count+0x1>
 304:	01 96       	adiw	r24, 0x01	; 1
 306:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <count+0x1>
 30a:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <count>
		}
	}
}
 30e:	bf 91       	pop	r27
 310:	af 91       	pop	r26
 312:	9f 91       	pop	r25
 314:	8f 91       	pop	r24
 316:	7f 91       	pop	r23
 318:	6f 91       	pop	r22
 31a:	5f 91       	pop	r21
 31c:	4f 91       	pop	r20
 31e:	3f 91       	pop	r19
 320:	2f 91       	pop	r18
 322:	0f 90       	pop	r0
 324:	0f be       	out	0x3f, r0	; 63
 326:	0f 90       	pop	r0
 328:	1f 90       	pop	r1
 32a:	18 95       	reti

0000032c <main>:

int main(){
	
	DDRE = 0x00;
 32c:	1d b8       	out	0x0d, r1	; 13
	DDRB =0xFF;
 32e:	8f ef       	ldi	r24, 0xFF	; 255
 330:	84 b9       	out	0x04, r24	; 4

	InitUART(9600,8,1);
 332:	21 e0       	ldi	r18, 0x01	; 1
 334:	48 e0       	ldi	r20, 0x08	; 8
 336:	60 e8       	ldi	r22, 0x80	; 128
 338:	75 e2       	ldi	r23, 0x25	; 37
 33a:	80 e0       	ldi	r24, 0x00	; 0
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	49 d0       	rcall	.+146    	; 0x3d2 <InitUART>
	sei();
	initISR();
 340:	78 94       	sei
	initPort();
 342:	aa d0       	rcall	.+340    	; 0x498 <initISR>
 344:	af d0       	rcall	.+350    	; 0x4a4 <initPort>
	
	while (1)
	{
		if (count == dataSIZE+2)
 346:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <count>
 34a:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <count+0x1>
 34e:	80 97       	sbiw	r24, 0x20	; 32
 350:	89 f4       	brne	.+34     	; 0x374 <main+0x48>
			{recievex10(&addressRecieved,&commandRecieved,&combined,&encoded,&datapakkeRecieved,&count);
 352:	0f 2e       	mov	r0, r31
 354:	f7 e0       	ldi	r31, 0x07	; 7
 356:	ef 2e       	mov	r14, r31
 358:	f2 e0       	ldi	r31, 0x02	; 2
 35a:	ff 2e       	mov	r15, r31
 35c:	f0 2d       	mov	r31, r0
 35e:	04 e1       	ldi	r16, 0x14	; 20
 360:	12 e0       	ldi	r17, 0x02	; 2
 362:	29 e1       	ldi	r18, 0x19	; 25
 364:	32 e0       	ldi	r19, 0x02	; 2
 366:	4b e1       	ldi	r20, 0x1B	; 27
 368:	52 e0       	ldi	r21, 0x02	; 2
 36a:	60 e1       	ldi	r22, 0x10	; 16
 36c:	72 e0       	ldi	r23, 0x02	; 2
 36e:	82 e1       	ldi	r24, 0x12	; 18
 370:	92 e0       	ldi	r25, 0x02	; 2
 372:	02 d3       	rcall	.+1540   	; 0x978 <recievex10>
			}
			
	PORTB = commandRecieved;
 374:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <commandRecieved>
 378:	85 b9       	out	0x05, r24	; 5
		
		if (addressRecieved == myAddress)
 37a:	20 91 12 02 	lds	r18, 0x0212	; 0x800212 <addressRecieved>
 37e:	30 91 13 02 	lds	r19, 0x0213	; 0x800213 <addressRecieved+0x1>
 382:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <myAddress>
 386:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <myAddress+0x1>
 38a:	28 17       	cp	r18, r24
 38c:	39 07       	cpc	r19, r25
 38e:	e1 f4       	brne	.+56     	; 0x3c8 <main+0x9c>
		{
			if (commandRecieved == requestTemperature)
 390:	20 91 10 02 	lds	r18, 0x0210	; 0x800210 <commandRecieved>
 394:	30 91 11 02 	lds	r19, 0x0211	; 0x800211 <commandRecieved+0x1>
 398:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 39c:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 3a0:	28 17       	cp	r18, r24
 3a2:	39 07       	cpc	r19, r25
 3a4:	89 f4       	brne	.+34     	; 0x3c8 <main+0x9c>
				sendx10(&address,&cleanedData,&combined,&encoded,&datapakke,&counter); // &cleanedData byttet ud med &commandRecieved for test	
 3a6:	0f 2e       	mov	r0, r31
 3a8:	f9 e0       	ldi	r31, 0x09	; 9
 3aa:	ef 2e       	mov	r14, r31
 3ac:	f2 e0       	ldi	r31, 0x02	; 2
 3ae:	ff 2e       	mov	r15, r31
 3b0:	f0 2d       	mov	r31, r0
 3b2:	0c e0       	ldi	r16, 0x0C	; 12
 3b4:	12 e0       	ldi	r17, 0x02	; 2
 3b6:	29 e1       	ldi	r18, 0x19	; 25
 3b8:	32 e0       	ldi	r19, 0x02	; 2
 3ba:	4b e1       	ldi	r20, 0x1B	; 27
 3bc:	52 e0       	ldi	r21, 0x02	; 2
 3be:	60 e2       	ldi	r22, 0x20	; 32
 3c0:	72 e0       	ldi	r23, 0x02	; 2
 3c2:	83 e0       	ldi	r24, 0x03	; 3
 3c4:	92 e0       	ldi	r25, 0x02	; 2
 3c6:	65 d2       	rcall	.+1226   	; 0x892 <sendx10>
		}
		commandRecieved = 0;
 3c8:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <commandRecieved+0x1>
 3cc:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <commandRecieved>
	}
 3d0:	ba cf       	rjmp	.-140    	; 0x346 <main+0x1a>

000003d2 <InitUART>:
	Databits: Wanted number of Data Bits (5-8).
	Parity: 'E' (Even parity), 'O' (Odd parity), otherwise No Parity.
	Rx_Int: If non-zero, receiver interrupt will be enabled.
*************************************************************************/
void InitUART(unsigned long BaudRate, unsigned char DataBit, unsigned char RX_Int)
{
 3d2:	cf 92       	push	r12
 3d4:	df 92       	push	r13
 3d6:	ef 92       	push	r14
 3d8:	ff 92       	push	r15
 3da:	0f 93       	push	r16
 3dc:	1f 93       	push	r17
 3de:	52 2f       	mov	r21, r18
  if ((BaudRate >= 110) && (BaudRate <= 115200) && (DataBit >=5) && (DataBit <= 8))
 3e0:	8b 01       	movw	r16, r22
 3e2:	9c 01       	movw	r18, r24
 3e4:	0e 56       	subi	r16, 0x6E	; 110
 3e6:	11 09       	sbc	r17, r1
 3e8:	21 09       	sbc	r18, r1
 3ea:	31 09       	sbc	r19, r1
 3ec:	03 39       	cpi	r16, 0x93	; 147
 3ee:	11 4c       	sbci	r17, 0xC1	; 193
 3f0:	21 40       	sbci	r18, 0x01	; 1
 3f2:	31 05       	cpc	r19, r1
 3f4:	08 f0       	brcs	.+2      	; 0x3f8 <InitUART+0x26>
 3f6:	49 c0       	rjmp	.+146    	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 3f8:	45 30       	cpi	r20, 0x05	; 5
 3fa:	08 f4       	brcc	.+2      	; 0x3fe <InitUART+0x2c>
 3fc:	46 c0       	rjmp	.+140    	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 3fe:	49 30       	cpi	r20, 0x09	; 9
 400:	08 f0       	brcs	.+2      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 402:	43 c0       	rjmp	.+134    	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
  { 
    // "Normal" clock, no multiprocessor mode (= default)
    UCSR0A = 0b00100000;
 404:	20 e2       	ldi	r18, 0x20	; 32
 406:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
    // No interrupts enabled
    // Receiver enabled
    // Transmitter enabled
    // No 9 bit operation
    UCSR0B = 0b00011000;
 40a:	28 e1       	ldi	r18, 0x18	; 24
 40c:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
    // Enable RX interrupt (if required by parameter)
    if (RX_Int)
 410:	55 23       	and	r21, r21
 412:	29 f0       	breq	.+10     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
      UCSR0B |= (1<<7);
 414:	e1 ec       	ldi	r30, 0xC1	; 193
 416:	f0 e0       	ldi	r31, 0x00	; 0
 418:	20 81       	ld	r18, Z
 41a:	20 68       	ori	r18, 0x80	; 128
 41c:	20 83       	st	Z, r18
    // Asynchronous operation, 1 stop bit
    // Bit 2 and bit 1 controls the number of data bits
    UCSR0C = (DataBit-5)<<1;
 41e:	45 50       	subi	r20, 0x05	; 5
 420:	44 0f       	add	r20, r20
 422:	40 93 c2 00 	sts	0x00C2, r20	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7c00c2>
    // Set Baud Rate according to the parameter BaudRate:
    // Adding (8*Baudrate) ensures correct rounding (up/down)
    UBRR0 = (XTAL+(8*BaudRate))/(16*BaudRate) - 1;
 426:	6b 01       	movw	r12, r22
 428:	7c 01       	movw	r14, r24
 42a:	20 e8       	ldi	r18, 0x80	; 128
 42c:	c2 0e       	add	r12, r18
 42e:	24 e8       	ldi	r18, 0x84	; 132
 430:	d2 1e       	adc	r13, r18
 432:	2e e1       	ldi	r18, 0x1E	; 30
 434:	e2 1e       	adc	r14, r18
 436:	f1 1c       	adc	r15, r1
 438:	cc 0c       	add	r12, r12
 43a:	dd 1c       	adc	r13, r13
 43c:	ee 1c       	adc	r14, r14
 43e:	ff 1c       	adc	r15, r15
 440:	cc 0c       	add	r12, r12
 442:	dd 1c       	adc	r13, r13
 444:	ee 1c       	adc	r14, r14
 446:	ff 1c       	adc	r15, r15
 448:	cc 0c       	add	r12, r12
 44a:	dd 1c       	adc	r13, r13
 44c:	ee 1c       	adc	r14, r14
 44e:	ff 1c       	adc	r15, r15
 450:	dc 01       	movw	r26, r24
 452:	cb 01       	movw	r24, r22
 454:	88 0f       	add	r24, r24
 456:	99 1f       	adc	r25, r25
 458:	aa 1f       	adc	r26, r26
 45a:	bb 1f       	adc	r27, r27
 45c:	88 0f       	add	r24, r24
 45e:	99 1f       	adc	r25, r25
 460:	aa 1f       	adc	r26, r26
 462:	bb 1f       	adc	r27, r27
 464:	9c 01       	movw	r18, r24
 466:	ad 01       	movw	r20, r26
 468:	22 0f       	add	r18, r18
 46a:	33 1f       	adc	r19, r19
 46c:	44 1f       	adc	r20, r20
 46e:	55 1f       	adc	r21, r21
 470:	22 0f       	add	r18, r18
 472:	33 1f       	adc	r19, r19
 474:	44 1f       	adc	r20, r20
 476:	55 1f       	adc	r21, r21
 478:	c7 01       	movw	r24, r14
 47a:	b6 01       	movw	r22, r12
 47c:	ba d2       	rcall	.+1396   	; 0x9f2 <__udivmodsi4>
 47e:	21 50       	subi	r18, 0x01	; 1
 480:	31 09       	sbc	r19, r1
 482:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 486:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
  }  
}
 48a:	1f 91       	pop	r17
 48c:	0f 91       	pop	r16
 48e:	ff 90       	pop	r15
 490:	ef 90       	pop	r14
 492:	df 90       	pop	r13
 494:	cf 90       	pop	r12
 496:	08 95       	ret

00000498 <initISR>:


int correctModulo(int x, int m) //Modulo in C is not entirely correct, this implementation fixes that
{
	return (x % m + m) % m;
}
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
 49e:	8d bb       	out	0x1d, r24	; 29
 4a0:	78 94       	sei
 4a2:	08 95       	ret

000004a4 <initPort>:
 4a4:	17 b8       	out	0x07, r1	; 7
 4a6:	18 b8       	out	0x08, r1	; 8
 4a8:	8f ef       	ldi	r24, 0xFF	; 255
 4aa:	84 b9       	out	0x04, r24	; 4
 4ac:	15 b8       	out	0x05, r1	; 5
 4ae:	81 b9       	out	0x01, r24	; 1
 4b0:	08 95       	ret

000004b2 <combineBitArrays>:
 4b2:	20 e0       	ldi	r18, 0x00	; 0
 4b4:	30 e0       	ldi	r19, 0x00	; 0
 4b6:	fc 01       	movw	r30, r24
 4b8:	30 81       	ld	r19, Z
 4ba:	fb 01       	movw	r30, r22
 4bc:	80 81       	ld	r24, Z
 4be:	91 81       	ldd	r25, Z+1	; 0x01
 4c0:	82 2b       	or	r24, r18
 4c2:	93 2b       	or	r25, r19
 4c4:	fa 01       	movw	r30, r20
 4c6:	91 83       	std	Z+1, r25	; 0x01
 4c8:	80 83       	st	Z, r24
 4ca:	08 95       	ret

000004cc <splitCombine>:
 4cc:	fa 01       	movw	r30, r20
 4ce:	20 81       	ld	r18, Z
 4d0:	31 81       	ldd	r19, Z+1	; 0x01
 4d2:	33 27       	eor	r19, r19
 4d4:	fb 01       	movw	r30, r22
 4d6:	31 83       	std	Z+1, r19	; 0x01
 4d8:	20 83       	st	Z, r18
 4da:	fa 01       	movw	r30, r20
 4dc:	21 81       	ldd	r18, Z+1	; 0x01
 4de:	fc 01       	movw	r30, r24
 4e0:	20 83       	st	Z, r18
 4e2:	11 82       	std	Z+1, r1	; 0x01
 4e4:	08 95       	ret

000004e6 <hammingEncoding>:
void hammingEncoding(uint16_t* str, uint16_t* encoded) // (15,11) Hamming encoding
{

	//Parity bit 1
	uint16_t checkP1 = 0b11011010101;
	checkP1 &= *str;
 4e6:	dc 01       	movw	r26, r24
 4e8:	ed 91       	ld	r30, X+
 4ea:	fc 91       	ld	r31, X
 4ec:	cf 01       	movw	r24, r30
 4ee:	85 7d       	andi	r24, 0xD5	; 213
 4f0:	96 70       	andi	r25, 0x06	; 6

	char p1 = 0;
 4f2:	40 e0       	ldi	r20, 0x00	; 0

	while (checkP1)
 4f4:	06 c0       	rjmp	.+12     	; 0x502 <hammingEncoding+0x1c>
	{
		if (checkP1 & 1)
 4f6:	80 ff       	sbrs	r24, 0
 4f8:	02 c0       	rjmp	.+4      	; 0x4fe <hammingEncoding+0x18>
		{
			p1 ^= 0b00000001;
 4fa:	21 e0       	ldi	r18, 0x01	; 1
 4fc:	42 27       	eor	r20, r18
		}
		checkP1 >>= 1;
 4fe:	96 95       	lsr	r25
 500:	87 95       	ror	r24
	uint16_t checkP1 = 0b11011010101;
	checkP1 &= *str;

	char p1 = 0;

	while (checkP1)
 502:	00 97       	sbiw	r24, 0x00	; 0
 504:	c1 f7       	brne	.-16     	; 0x4f6 <hammingEncoding+0x10>
		checkP1 >>= 1;
	}

	//Parity bit 2
	uint16_t checkP2 = 0b10110110011;
	checkP2 &= *str;
 506:	cf 01       	movw	r24, r30
 508:	83 7b       	andi	r24, 0xB3	; 179
 50a:	95 70       	andi	r25, 0x05	; 5

	char p2 = 0;
 50c:	30 e0       	ldi	r19, 0x00	; 0

	while (checkP2)
 50e:	06 c0       	rjmp	.+12     	; 0x51c <hammingEncoding+0x36>
	{
		if (checkP2 & 1)
 510:	80 ff       	sbrs	r24, 0
 512:	02 c0       	rjmp	.+4      	; 0x518 <hammingEncoding+0x32>
		{
			p2 ^= 0b00000001;
 514:	21 e0       	ldi	r18, 0x01	; 1
 516:	32 27       	eor	r19, r18
		}
		checkP2 >>= 1;
 518:	96 95       	lsr	r25
 51a:	87 95       	ror	r24
	uint16_t checkP2 = 0b10110110011;
	checkP2 &= *str;

	char p2 = 0;

	while (checkP2)
 51c:	00 97       	sbiw	r24, 0x00	; 0
 51e:	c1 f7       	brne	.-16     	; 0x510 <hammingEncoding+0x2a>
		checkP2 >>= 1;
	}

	//Parity bit 3
	uint16_t checkP3 = 0b01110001111;
	checkP3 &= *str;
 520:	cf 01       	movw	r24, r30
 522:	8f 78       	andi	r24, 0x8F	; 143
 524:	93 70       	andi	r25, 0x03	; 3

	char p3 = 0;
 526:	20 e0       	ldi	r18, 0x00	; 0

	while (checkP3)
 528:	06 c0       	rjmp	.+12     	; 0x536 <hammingEncoding+0x50>
	{
		if (checkP3 & 1)
 52a:	80 ff       	sbrs	r24, 0
 52c:	02 c0       	rjmp	.+4      	; 0x532 <hammingEncoding+0x4c>
		{
			p3 ^= 0b00000001;
 52e:	51 e0       	ldi	r21, 0x01	; 1
 530:	25 27       	eor	r18, r21
		}
		checkP3 >>= 1;
 532:	96 95       	lsr	r25
 534:	87 95       	ror	r24
	uint16_t checkP3 = 0b01110001111;
	checkP3 &= *str;

	char p3 = 0;

	while (checkP3)
 536:	00 97       	sbiw	r24, 0x00	; 0
 538:	c1 f7       	brne	.-16     	; 0x52a <hammingEncoding+0x44>
		checkP3 >>= 1;
	}

	//Parity bit 4
	uint16_t checkP4 = 0b00001111111;
	checkP4 &= *str;
 53a:	cf 01       	movw	r24, r30
 53c:	8f 77       	andi	r24, 0x7F	; 127
 53e:	99 27       	eor	r25, r25

	char p4 = 0;
 540:	50 e0       	ldi	r21, 0x00	; 0

	while (checkP4)
 542:	06 c0       	rjmp	.+12     	; 0x550 <hammingEncoding+0x6a>
	{
		if (checkP4 & 1)
 544:	80 ff       	sbrs	r24, 0
 546:	02 c0       	rjmp	.+4      	; 0x54c <hammingEncoding+0x66>
		{
			p4 ^= 0b00000001;
 548:	a1 e0       	ldi	r26, 0x01	; 1
 54a:	5a 27       	eor	r21, r26
		}
		checkP4 >>= 1;
 54c:	96 95       	lsr	r25
 54e:	87 95       	ror	r24
	uint16_t checkP4 = 0b00001111111;
	checkP4 &= *str;

	char p4 = 0;

	while (checkP4)
 550:	00 97       	sbiw	r24, 0x00	; 0
 552:	c1 f7       	brne	.-16     	; 0x544 <hammingEncoding+0x5e>
			p4 ^= 0b00000001;
		}
		checkP4 >>= 1;
	}

	*encoded = ((*str << 4)) | (p1 << 3) | (p2 << 2) | (p3 << 1) | (p4);
 554:	e2 95       	swap	r30
 556:	f2 95       	swap	r31
 558:	f0 7f       	andi	r31, 0xF0	; 240
 55a:	fe 27       	eor	r31, r30
 55c:	e0 7f       	andi	r30, 0xF0	; 240
 55e:	fe 27       	eor	r31, r30
 560:	84 2f       	mov	r24, r20
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	88 0f       	add	r24, r24
 566:	99 1f       	adc	r25, r25
 568:	88 0f       	add	r24, r24
 56a:	99 1f       	adc	r25, r25
 56c:	88 0f       	add	r24, r24
 56e:	99 1f       	adc	r25, r25
 570:	e8 2b       	or	r30, r24
 572:	f9 2b       	or	r31, r25
 574:	83 2f       	mov	r24, r19
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	88 0f       	add	r24, r24
 57a:	99 1f       	adc	r25, r25
 57c:	88 0f       	add	r24, r24
 57e:	99 1f       	adc	r25, r25
 580:	e8 2b       	or	r30, r24
 582:	f9 2b       	or	r31, r25
 584:	82 2f       	mov	r24, r18
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	88 0f       	add	r24, r24
 58a:	99 1f       	adc	r25, r25
 58c:	8e 2b       	or	r24, r30
 58e:	9f 2b       	or	r25, r31
 590:	85 2b       	or	r24, r21
 592:	fb 01       	movw	r30, r22
 594:	91 83       	std	Z+1, r25	; 0x01
 596:	80 83       	st	Z, r24
 598:	08 95       	ret

0000059a <hammingDecoding>:
}


void hammingDecoding(uint16_t* str, uint16_t* decoded) // (15,11) Hamming decoding
{
 59a:	af 92       	push	r10
 59c:	bf 92       	push	r11
 59e:	cf 92       	push	r12
 5a0:	df 92       	push	r13
 5a2:	ef 92       	push	r14
 5a4:	ff 92       	push	r15
 5a6:	0f 93       	push	r16
 5a8:	1f 93       	push	r17
 5aa:	cf 93       	push	r28
 5ac:	df 93       	push	r29
 5ae:	5b 01       	movw	r10, r22
	*decoded = 0;
 5b0:	eb 01       	movw	r28, r22
 5b2:	19 82       	std	Y+1, r1	; 0x01
 5b4:	18 82       	st	Y, r1
	*decoded |= (*str >> 4);
 5b6:	fc 01       	movw	r30, r24
 5b8:	c0 80       	ld	r12, Z
 5ba:	d1 80       	ldd	r13, Z+1	; 0x01
 5bc:	d6 94       	lsr	r13
 5be:	c7 94       	ror	r12
 5c0:	d6 94       	lsr	r13
 5c2:	c7 94       	ror	r12
 5c4:	d6 94       	lsr	r13
 5c6:	c7 94       	ror	r12
 5c8:	d6 94       	lsr	r13
 5ca:	c7 94       	ror	r12
 5cc:	d9 82       	std	Y+1, r13	; 0x01
 5ce:	c8 82       	st	Y, r12

	//Parity bit 1
	uint16_t checkP1 = (0b11011010101 & *decoded);
 5d0:	d6 01       	movw	r26, r12
 5d2:	a5 7d       	andi	r26, 0xD5	; 213
 5d4:	b6 70       	andi	r27, 0x06	; 6
	//Parity bit 2
	uint16_t checkP2 = (0b10110110011 & *decoded);
 5d6:	f6 01       	movw	r30, r12
 5d8:	e3 7b       	andi	r30, 0xB3	; 179
 5da:	f5 70       	andi	r31, 0x05	; 5
	//Parity bit 3
	uint16_t checkP3 = (0b01110001111 & *decoded);
 5dc:	a6 01       	movw	r20, r12
 5de:	4f 78       	andi	r20, 0x8F	; 143
 5e0:	53 70       	andi	r21, 0x03	; 3
	//Parity bit 4
	uint16_t checkP4 = (0b00001111111 & *decoded);
 5e2:	96 01       	movw	r18, r12
 5e4:	2f 77       	andi	r18, 0x7F	; 127
 5e6:	33 27       	eor	r19, r19

	//The checkSums, initialized with their parity value
	uint16_t checkSum1 = ((*str & 0b000000000001000) >> 3);
 5e8:	ec 01       	movw	r28, r24
 5ea:	88 81       	ld	r24, Y
 5ec:	99 81       	ldd	r25, Y+1	; 0x01
 5ee:	83 fb       	bst	r24, 3
 5f0:	11 27       	eor	r17, r17
 5f2:	10 f9       	bld	r17, 0
 5f4:	c1 2f       	mov	r28, r17
 5f6:	60 e0       	ldi	r22, 0x00	; 0
 5f8:	d6 2f       	mov	r29, r22
	uint16_t checkSum2 = ((*str & 0b000000000000100) >> 2);
 5fa:	82 fb       	bst	r24, 2
 5fc:	00 27       	eor	r16, r16
 5fe:	00 f9       	bld	r16, 0
 600:	10 e0       	ldi	r17, 0x00	; 0
	uint16_t checkSum3 = ((*str & 0b000000000000010) >> 1);
 602:	81 fb       	bst	r24, 1
 604:	ee 24       	eor	r14, r14
 606:	e0 f8       	bld	r14, 0
 608:	f1 2c       	mov	r15, r1
	uint16_t checkSum4 = ((*str & 0b000000000000001) >> 0);
 60a:	81 70       	andi	r24, 0x01	; 1
 60c:	99 27       	eor	r25, r25



	while (checkP1)
 60e:	06 c0       	rjmp	.+12     	; 0x61c <hammingDecoding+0x82>
	{
		if (checkP1 & 1)
 610:	a0 ff       	sbrs	r26, 0
 612:	02 c0       	rjmp	.+4      	; 0x618 <hammingDecoding+0x7e>
		{
			checkSum1^= 0b00000001;
 614:	61 e0       	ldi	r22, 0x01	; 1
 616:	c6 27       	eor	r28, r22
		}
		checkP1 >>= 1;
 618:	b6 95       	lsr	r27
 61a:	a7 95       	ror	r26
	uint16_t checkSum3 = ((*str & 0b000000000000010) >> 1);
	uint16_t checkSum4 = ((*str & 0b000000000000001) >> 0);



	while (checkP1)
 61c:	10 97       	sbiw	r26, 0x00	; 0
 61e:	c1 f7       	brne	.-16     	; 0x610 <hammingDecoding+0x76>
 620:	06 c0       	rjmp	.+12     	; 0x62e <hammingDecoding+0x94>
		checkP1 >>= 1;
	}
	
	while (checkP2)
	{
		if (checkP2 & 1)
 622:	e0 ff       	sbrs	r30, 0
 624:	02 c0       	rjmp	.+4      	; 0x62a <hammingDecoding+0x90>
		{
			checkSum2^= 0b00000001;
 626:	61 e0       	ldi	r22, 0x01	; 1
 628:	06 27       	eor	r16, r22
		}
		checkP2 >>= 1;
 62a:	f6 95       	lsr	r31
 62c:	e7 95       	ror	r30
			checkSum1^= 0b00000001;
		}
		checkP1 >>= 1;
	}
	
	while (checkP2)
 62e:	30 97       	sbiw	r30, 0x00	; 0
 630:	c1 f7       	brne	.-16     	; 0x622 <hammingDecoding+0x88>
 632:	06 c0       	rjmp	.+12     	; 0x640 <hammingDecoding+0xa6>
		checkP2 >>= 1;
	}
	
	while (checkP3)
	{
		if (checkP3 & 1)
 634:	40 ff       	sbrs	r20, 0
 636:	02 c0       	rjmp	.+4      	; 0x63c <hammingDecoding+0xa2>
		{
			checkSum3^= 0b00000001;
 638:	e1 e0       	ldi	r30, 0x01	; 1
 63a:	ee 26       	eor	r14, r30
		}
		checkP3 >>= 1;
 63c:	56 95       	lsr	r21
 63e:	47 95       	ror	r20
			checkSum2^= 0b00000001;
		}
		checkP2 >>= 1;
	}
	
	while (checkP3)
 640:	41 15       	cp	r20, r1
 642:	51 05       	cpc	r21, r1
 644:	b9 f7       	brne	.-18     	; 0x634 <hammingDecoding+0x9a>
 646:	06 c0       	rjmp	.+12     	; 0x654 <hammingDecoding+0xba>
		checkP3 >>= 1;
	}
	
	while (checkP4)
	{
		if (checkP4 & 1)
 648:	20 ff       	sbrs	r18, 0
 64a:	02 c0       	rjmp	.+4      	; 0x650 <hammingDecoding+0xb6>
		{
			checkSum4^= 0b00000001;
 64c:	f1 e0       	ldi	r31, 0x01	; 1
 64e:	8f 27       	eor	r24, r31
		}
		checkP4 >>= 1;
 650:	36 95       	lsr	r19
 652:	27 95       	ror	r18
			checkSum3^= 0b00000001;
		}
		checkP3 >>= 1;
	}
	
	while (checkP4)
 654:	21 15       	cp	r18, r1
 656:	31 05       	cpc	r19, r1
 658:	b9 f7       	brne	.-18     	; 0x648 <hammingDecoding+0xae>
	//errors found
	uint16_t error = 0;


	//Check for each bit in message, if an error, add to error array
	if (checkSum1 && checkSum2 && !checkSum3 && !checkSum4)	//m1
 65a:	20 97       	sbiw	r28, 0x00	; 0
 65c:	59 f0       	breq	.+22     	; 0x674 <hammingDecoding+0xda>
 65e:	01 15       	cp	r16, r1
 660:	11 05       	cpc	r17, r1
 662:	59 f0       	breq	.+22     	; 0x67a <hammingDecoding+0xe0>
 664:	e1 14       	cp	r14, r1
 666:	f1 04       	cpc	r15, r1
 668:	59 f4       	brne	.+22     	; 0x680 <hammingDecoding+0xe6>
 66a:	00 97       	sbiw	r24, 0x00	; 0
 66c:	61 f0       	breq	.+24     	; 0x686 <hammingDecoding+0xec>
		}
		checkP4 >>= 1;
	}

	//errors found
	uint16_t error = 0;
 66e:	20 e0       	ldi	r18, 0x00	; 0
 670:	30 e0       	ldi	r19, 0x00	; 0
 672:	0b c0       	rjmp	.+22     	; 0x68a <hammingDecoding+0xf0>
 674:	20 e0       	ldi	r18, 0x00	; 0
 676:	30 e0       	ldi	r19, 0x00	; 0
 678:	08 c0       	rjmp	.+16     	; 0x68a <hammingDecoding+0xf0>
 67a:	20 e0       	ldi	r18, 0x00	; 0
 67c:	30 e0       	ldi	r19, 0x00	; 0
 67e:	05 c0       	rjmp	.+10     	; 0x68a <hammingDecoding+0xf0>
 680:	20 e0       	ldi	r18, 0x00	; 0
 682:	30 e0       	ldi	r19, 0x00	; 0
 684:	02 c0       	rjmp	.+4      	; 0x68a <hammingDecoding+0xf0>


	//Check for each bit in message, if an error, add to error array
	if (checkSum1 && checkSum2 && !checkSum3 && !checkSum4)	//m1
	{
		error |= 1 << 0;
 686:	21 e0       	ldi	r18, 0x01	; 1
 688:	30 e0       	ldi	r19, 0x00	; 0
	}
	if (checkSum1 && !checkSum2 && checkSum3 && !checkSum4)	//m2
 68a:	20 97       	sbiw	r28, 0x00	; 0
 68c:	49 f0       	breq	.+18     	; 0x6a0 <hammingDecoding+0x106>
 68e:	01 15       	cp	r16, r1
 690:	11 05       	cpc	r17, r1
 692:	31 f4       	brne	.+12     	; 0x6a0 <hammingDecoding+0x106>
 694:	e1 14       	cp	r14, r1
 696:	f1 04       	cpc	r15, r1
 698:	19 f0       	breq	.+6      	; 0x6a0 <hammingDecoding+0x106>
 69a:	00 97       	sbiw	r24, 0x00	; 0
 69c:	09 f4       	brne	.+2      	; 0x6a0 <hammingDecoding+0x106>
	{
		error |= 1 << 1;
 69e:	22 60       	ori	r18, 0x02	; 2
	}
	if (!checkSum1 && checkSum2 && checkSum3 && !checkSum4)	//m3
 6a0:	20 97       	sbiw	r28, 0x00	; 0
 6a2:	49 f4       	brne	.+18     	; 0x6b6 <hammingDecoding+0x11c>
 6a4:	01 15       	cp	r16, r1
 6a6:	11 05       	cpc	r17, r1
 6a8:	31 f0       	breq	.+12     	; 0x6b6 <hammingDecoding+0x11c>
 6aa:	e1 14       	cp	r14, r1
 6ac:	f1 04       	cpc	r15, r1
 6ae:	19 f0       	breq	.+6      	; 0x6b6 <hammingDecoding+0x11c>
 6b0:	00 97       	sbiw	r24, 0x00	; 0
 6b2:	09 f4       	brne	.+2      	; 0x6b6 <hammingDecoding+0x11c>
	{
		error |= 1 << 2;
 6b4:	24 60       	ori	r18, 0x04	; 4
	}
	if (checkSum1 && checkSum2 && checkSum3 && !checkSum4)	//m4
 6b6:	20 97       	sbiw	r28, 0x00	; 0
 6b8:	49 f0       	breq	.+18     	; 0x6cc <hammingDecoding+0x132>
 6ba:	01 15       	cp	r16, r1
 6bc:	11 05       	cpc	r17, r1
 6be:	31 f0       	breq	.+12     	; 0x6cc <hammingDecoding+0x132>
 6c0:	e1 14       	cp	r14, r1
 6c2:	f1 04       	cpc	r15, r1
 6c4:	19 f0       	breq	.+6      	; 0x6cc <hammingDecoding+0x132>
 6c6:	00 97       	sbiw	r24, 0x00	; 0
 6c8:	09 f4       	brne	.+2      	; 0x6cc <hammingDecoding+0x132>
	{
		error |= 1 << 3;
 6ca:	28 60       	ori	r18, 0x08	; 8
	}
	if (checkSum1 && !checkSum2 && !checkSum3 && checkSum4)	//m5
 6cc:	20 97       	sbiw	r28, 0x00	; 0
 6ce:	49 f0       	breq	.+18     	; 0x6e2 <hammingDecoding+0x148>
 6d0:	01 15       	cp	r16, r1
 6d2:	11 05       	cpc	r17, r1
 6d4:	31 f4       	brne	.+12     	; 0x6e2 <hammingDecoding+0x148>
 6d6:	e1 14       	cp	r14, r1
 6d8:	f1 04       	cpc	r15, r1
 6da:	19 f4       	brne	.+6      	; 0x6e2 <hammingDecoding+0x148>
 6dc:	00 97       	sbiw	r24, 0x00	; 0
 6de:	09 f0       	breq	.+2      	; 0x6e2 <hammingDecoding+0x148>
	{
		error |= 1 << 4;
 6e0:	20 61       	ori	r18, 0x10	; 16
	}
	if (!checkSum1 && checkSum2 && !checkSum3 && checkSum4)	//m6
 6e2:	20 97       	sbiw	r28, 0x00	; 0
 6e4:	49 f4       	brne	.+18     	; 0x6f8 <hammingDecoding+0x15e>
 6e6:	01 15       	cp	r16, r1
 6e8:	11 05       	cpc	r17, r1
 6ea:	31 f0       	breq	.+12     	; 0x6f8 <hammingDecoding+0x15e>
 6ec:	e1 14       	cp	r14, r1
 6ee:	f1 04       	cpc	r15, r1
 6f0:	19 f4       	brne	.+6      	; 0x6f8 <hammingDecoding+0x15e>
 6f2:	00 97       	sbiw	r24, 0x00	; 0
 6f4:	09 f0       	breq	.+2      	; 0x6f8 <hammingDecoding+0x15e>
	{
		error |= 1 << 5;
 6f6:	20 62       	ori	r18, 0x20	; 32
	}
	if (checkSum1 && checkSum2 && !checkSum3 && checkSum4)	//m7
 6f8:	20 97       	sbiw	r28, 0x00	; 0
 6fa:	49 f0       	breq	.+18     	; 0x70e <hammingDecoding+0x174>
 6fc:	01 15       	cp	r16, r1
 6fe:	11 05       	cpc	r17, r1
 700:	31 f0       	breq	.+12     	; 0x70e <hammingDecoding+0x174>
 702:	e1 14       	cp	r14, r1
 704:	f1 04       	cpc	r15, r1
 706:	19 f4       	brne	.+6      	; 0x70e <hammingDecoding+0x174>
 708:	00 97       	sbiw	r24, 0x00	; 0
 70a:	09 f0       	breq	.+2      	; 0x70e <hammingDecoding+0x174>
	{
		error |= 1 << 6;
 70c:	20 64       	ori	r18, 0x40	; 64
	}
	if (!checkSum1 && !checkSum2 && checkSum3 && checkSum4)	//m8
 70e:	20 97       	sbiw	r28, 0x00	; 0
 710:	49 f4       	brne	.+18     	; 0x724 <hammingDecoding+0x18a>
 712:	01 15       	cp	r16, r1
 714:	11 05       	cpc	r17, r1
 716:	31 f4       	brne	.+12     	; 0x724 <hammingDecoding+0x18a>
 718:	e1 14       	cp	r14, r1
 71a:	f1 04       	cpc	r15, r1
 71c:	19 f0       	breq	.+6      	; 0x724 <hammingDecoding+0x18a>
 71e:	00 97       	sbiw	r24, 0x00	; 0
 720:	09 f0       	breq	.+2      	; 0x724 <hammingDecoding+0x18a>
	{
		error |= 1 << 7;
 722:	20 68       	ori	r18, 0x80	; 128
	}
	if (checkSum1 && !checkSum2 && checkSum3 && checkSum4)	//m9
 724:	20 97       	sbiw	r28, 0x00	; 0
 726:	49 f0       	breq	.+18     	; 0x73a <hammingDecoding+0x1a0>
 728:	01 15       	cp	r16, r1
 72a:	11 05       	cpc	r17, r1
 72c:	31 f4       	brne	.+12     	; 0x73a <hammingDecoding+0x1a0>
 72e:	e1 14       	cp	r14, r1
 730:	f1 04       	cpc	r15, r1
 732:	19 f0       	breq	.+6      	; 0x73a <hammingDecoding+0x1a0>
 734:	00 97       	sbiw	r24, 0x00	; 0
 736:	09 f0       	breq	.+2      	; 0x73a <hammingDecoding+0x1a0>
	{
		error |= 1 << 8;
 738:	31 60       	ori	r19, 0x01	; 1
	}
	if (!checkSum1 && checkSum2 && checkSum3 && checkSum4)	//m10
 73a:	20 97       	sbiw	r28, 0x00	; 0
 73c:	49 f4       	brne	.+18     	; 0x750 <hammingDecoding+0x1b6>
 73e:	01 15       	cp	r16, r1
 740:	11 05       	cpc	r17, r1
 742:	31 f0       	breq	.+12     	; 0x750 <hammingDecoding+0x1b6>
 744:	e1 14       	cp	r14, r1
 746:	f1 04       	cpc	r15, r1
 748:	19 f0       	breq	.+6      	; 0x750 <hammingDecoding+0x1b6>
 74a:	00 97       	sbiw	r24, 0x00	; 0
 74c:	09 f0       	breq	.+2      	; 0x750 <hammingDecoding+0x1b6>
	{
		error |= 1 << 9;
 74e:	32 60       	ori	r19, 0x02	; 2
	}
	if (checkSum1 && checkSum2 && checkSum3 && checkSum4)	//m11
 750:	cd 2b       	or	r28, r29
 752:	39 f0       	breq	.+14     	; 0x762 <hammingDecoding+0x1c8>
 754:	01 2b       	or	r16, r17
 756:	29 f0       	breq	.+10     	; 0x762 <hammingDecoding+0x1c8>
 758:	ef 28       	or	r14, r15
 75a:	19 f0       	breq	.+6      	; 0x762 <hammingDecoding+0x1c8>
 75c:	89 2b       	or	r24, r25
 75e:	09 f0       	breq	.+2      	; 0x762 <hammingDecoding+0x1c8>
	{
		error |= 1 << 10;
 760:	34 60       	ori	r19, 0x04	; 4
	}

	//Add the error array to the decoded message, flipping any found error.
	*decoded ^= error;
 762:	c2 26       	eor	r12, r18
 764:	d3 26       	eor	r13, r19
 766:	e5 01       	movw	r28, r10
 768:	d9 82       	std	Y+1, r13	; 0x01
 76a:	c8 82       	st	Y, r12

}
 76c:	df 91       	pop	r29
 76e:	cf 91       	pop	r28
 770:	1f 91       	pop	r17
 772:	0f 91       	pop	r16
 774:	ff 90       	pop	r15
 776:	ef 90       	pop	r14
 778:	df 90       	pop	r13
 77a:	cf 90       	pop	r12
 77c:	bf 90       	pop	r11
 77e:	af 90       	pop	r10
 780:	08 95       	ret

00000782 <doubleEncoded>:


void doubleEncoded(uint16_t* encoded, uint32_t* datapakke)
{
 782:	cf 92       	push	r12
 784:	df 92       	push	r13
 786:	ef 92       	push	r14
 788:	ff 92       	push	r15
 78a:	cf 93       	push	r28
 78c:	df 93       	push	r29
 78e:	ec 01       	movw	r28, r24
 790:	db 01       	movw	r26, r22

	for (int i = 0; i < 15; i++)
 792:	20 e0       	ldi	r18, 0x00	; 0
 794:	30 e0       	ldi	r19, 0x00	; 0
 796:	72 c0       	rjmp	.+228    	; 0x87c <doubleEncoded+0xfa>
	{
		if (*encoded & (0b0100000000000000 >> i))
 798:	e8 81       	ld	r30, Y
 79a:	f9 81       	ldd	r31, Y+1	; 0x01
 79c:	40 e0       	ldi	r20, 0x00	; 0
 79e:	50 e4       	ldi	r21, 0x40	; 64
 7a0:	02 2e       	mov	r0, r18
 7a2:	02 c0       	rjmp	.+4      	; 0x7a8 <doubleEncoded+0x26>
 7a4:	55 95       	asr	r21
 7a6:	47 95       	ror	r20
 7a8:	0a 94       	dec	r0
 7aa:	e2 f7       	brpl	.-8      	; 0x7a4 <doubleEncoded+0x22>
 7ac:	4e 23       	and	r20, r30
 7ae:	5f 23       	and	r21, r31
 7b0:	45 2b       	or	r20, r21
 7b2:	89 f1       	breq	.+98     	; 0x816 <doubleEncoded+0x94>
		{
			*datapakke = (*datapakke | (0b10000000000000000000000000000000 >> (i * 2)));
 7b4:	cd 90       	ld	r12, X+
 7b6:	dd 90       	ld	r13, X+
 7b8:	ed 90       	ld	r14, X+
 7ba:	fc 90       	ld	r15, X
 7bc:	13 97       	sbiw	r26, 0x03	; 3
 7be:	c9 01       	movw	r24, r18
 7c0:	88 0f       	add	r24, r24
 7c2:	99 1f       	adc	r25, r25
 7c4:	40 e0       	ldi	r20, 0x00	; 0
 7c6:	50 e0       	ldi	r21, 0x00	; 0
 7c8:	60 e0       	ldi	r22, 0x00	; 0
 7ca:	70 e8       	ldi	r23, 0x80	; 128
 7cc:	08 2e       	mov	r0, r24
 7ce:	04 c0       	rjmp	.+8      	; 0x7d8 <doubleEncoded+0x56>
 7d0:	76 95       	lsr	r23
 7d2:	67 95       	ror	r22
 7d4:	57 95       	ror	r21
 7d6:	47 95       	ror	r20
 7d8:	0a 94       	dec	r0
 7da:	d2 f7       	brpl	.-12     	; 0x7d0 <doubleEncoded+0x4e>
 7dc:	c4 2a       	or	r12, r20
 7de:	d5 2a       	or	r13, r21
 7e0:	e6 2a       	or	r14, r22
 7e2:	f7 2a       	or	r15, r23
			*datapakke = (*datapakke & ~(0b01000000000000000000000000000000 >> (i * 2)));
 7e4:	40 e0       	ldi	r20, 0x00	; 0
 7e6:	50 e0       	ldi	r21, 0x00	; 0
 7e8:	60 e0       	ldi	r22, 0x00	; 0
 7ea:	70 e4       	ldi	r23, 0x40	; 64
 7ec:	04 c0       	rjmp	.+8      	; 0x7f6 <doubleEncoded+0x74>
 7ee:	75 95       	asr	r23
 7f0:	67 95       	ror	r22
 7f2:	57 95       	ror	r21
 7f4:	47 95       	ror	r20
 7f6:	8a 95       	dec	r24
 7f8:	d2 f7       	brpl	.-12     	; 0x7ee <doubleEncoded+0x6c>
 7fa:	40 95       	com	r20
 7fc:	50 95       	com	r21
 7fe:	60 95       	com	r22
 800:	70 95       	com	r23
 802:	4c 21       	and	r20, r12
 804:	5d 21       	and	r21, r13
 806:	6e 21       	and	r22, r14
 808:	7f 21       	and	r23, r15
 80a:	4d 93       	st	X+, r20
 80c:	5d 93       	st	X+, r21
 80e:	6d 93       	st	X+, r22
 810:	7c 93       	st	X, r23
 812:	13 97       	sbiw	r26, 0x03	; 3
 814:	31 c0       	rjmp	.+98     	; 0x878 <doubleEncoded+0xf6>
		}
		else
		{
			*datapakke = (*datapakke | (0b01000000000000000000000000000000 >> (i * 2)));
 816:	cd 90       	ld	r12, X+
 818:	dd 90       	ld	r13, X+
 81a:	ed 90       	ld	r14, X+
 81c:	fc 90       	ld	r15, X
 81e:	13 97       	sbiw	r26, 0x03	; 3
 820:	c9 01       	movw	r24, r18
 822:	88 0f       	add	r24, r24
 824:	99 1f       	adc	r25, r25
 826:	40 e0       	ldi	r20, 0x00	; 0
 828:	50 e0       	ldi	r21, 0x00	; 0
 82a:	60 e0       	ldi	r22, 0x00	; 0
 82c:	70 e4       	ldi	r23, 0x40	; 64
 82e:	08 2e       	mov	r0, r24
 830:	04 c0       	rjmp	.+8      	; 0x83a <doubleEncoded+0xb8>
 832:	75 95       	asr	r23
 834:	67 95       	ror	r22
 836:	57 95       	ror	r21
 838:	47 95       	ror	r20
 83a:	0a 94       	dec	r0
 83c:	d2 f7       	brpl	.-12     	; 0x832 <doubleEncoded+0xb0>
 83e:	4c 29       	or	r20, r12
 840:	5d 29       	or	r21, r13
 842:	6e 29       	or	r22, r14
 844:	7f 29       	or	r23, r15
			*datapakke = (*datapakke & ~(0b10000000000000000000000000000000 >> (i * 2)));
 846:	c1 2c       	mov	r12, r1
 848:	d1 2c       	mov	r13, r1
 84a:	76 01       	movw	r14, r12
 84c:	68 94       	set
 84e:	f7 f8       	bld	r15, 7
 850:	04 c0       	rjmp	.+8      	; 0x85a <doubleEncoded+0xd8>
 852:	f6 94       	lsr	r15
 854:	e7 94       	ror	r14
 856:	d7 94       	ror	r13
 858:	c7 94       	ror	r12
 85a:	8a 95       	dec	r24
 85c:	d2 f7       	brpl	.-12     	; 0x852 <doubleEncoded+0xd0>
 85e:	c0 94       	com	r12
 860:	d0 94       	com	r13
 862:	e0 94       	com	r14
 864:	f0 94       	com	r15
 866:	4c 21       	and	r20, r12
 868:	5d 21       	and	r21, r13
 86a:	6e 21       	and	r22, r14
 86c:	7f 21       	and	r23, r15
 86e:	4d 93       	st	X+, r20
 870:	5d 93       	st	X+, r21
 872:	6d 93       	st	X+, r22
 874:	7c 93       	st	X, r23
 876:	13 97       	sbiw	r26, 0x03	; 3


void doubleEncoded(uint16_t* encoded, uint32_t* datapakke)
{

	for (int i = 0; i < 15; i++)
 878:	2f 5f       	subi	r18, 0xFF	; 255
 87a:	3f 4f       	sbci	r19, 0xFF	; 255
 87c:	2f 30       	cpi	r18, 0x0F	; 15
 87e:	31 05       	cpc	r19, r1
 880:	0c f4       	brge	.+2      	; 0x884 <doubleEncoded+0x102>
 882:	8a cf       	rjmp	.-236    	; 0x798 <doubleEncoded+0x16>
		{
			*datapakke = (*datapakke | (0b01000000000000000000000000000000 >> (i * 2)));
			*datapakke = (*datapakke & ~(0b10000000000000000000000000000000 >> (i * 2)));
		}
	}
}
 884:	df 91       	pop	r29
 886:	cf 91       	pop	r28
 888:	ff 90       	pop	r15
 88a:	ef 90       	pop	r14
 88c:	df 90       	pop	r13
 88e:	cf 90       	pop	r12
 890:	08 95       	ret

00000892 <sendx10>:




void sendx10(uint16_t* adr, uint16_t* com, uint16_t* combined, uint16_t* encoded, uint32_t* datapakke, volatile int* counterPtr)
{
 892:	cf 92       	push	r12
 894:	df 92       	push	r13
 896:	ef 92       	push	r14
 898:	ff 92       	push	r15
 89a:	0f 93       	push	r16
 89c:	1f 93       	push	r17
 89e:	cf 93       	push	r28
 8a0:	df 93       	push	r29
 8a2:	6a 01       	movw	r12, r20
 8a4:	e9 01       	movw	r28, r18

	combineBitArrays(adr, com, combined);
 8a6:	05 de       	rcall	.-1014   	; 0x4b2 <combineBitArrays>

	hammingEncoding(combined, encoded);
 8a8:	be 01       	movw	r22, r28
 8aa:	c6 01       	movw	r24, r12
 8ac:	1c de       	rcall	.-968    	; 0x4e6 <hammingEncoding>

	doubleEncoded(encoded, datapakke);
 8ae:	b8 01       	movw	r22, r16
 8b0:	ce 01       	movw	r24, r28
 8b2:	67 df       	rcall	.-306    	; 0x782 <doubleEncoded>

	*counterPtr = 1;
 8b4:	81 e0       	ldi	r24, 0x01	; 1
 8b6:	90 e0       	ldi	r25, 0x00	; 0
 8b8:	f7 01       	movw	r30, r14
 8ba:	91 83       	std	Z+1, r25	; 0x01
 8bc:	80 83       	st	Z, r24
}
 8be:	df 91       	pop	r29
 8c0:	cf 91       	pop	r28
 8c2:	1f 91       	pop	r17
 8c4:	0f 91       	pop	r16
 8c6:	ff 90       	pop	r15
 8c8:	ef 90       	pop	r14
 8ca:	df 90       	pop	r13
 8cc:	cf 90       	pop	r12
 8ce:	08 95       	ret

000008d0 <halfEncoded>:
	}
}


void halfEncoded(uint16_t* encoded, uint32_t* datapakke)
{
 8d0:	cf 92       	push	r12
 8d2:	df 92       	push	r13
 8d4:	ef 92       	push	r14
 8d6:	ff 92       	push	r15
 8d8:	fc 01       	movw	r30, r24
 8da:	db 01       	movw	r26, r22

	for (int i = 0; i < 15; i++)
 8dc:	20 e0       	ldi	r18, 0x00	; 0
 8de:	30 e0       	ldi	r19, 0x00	; 0
 8e0:	42 c0       	rjmp	.+132    	; 0x966 <halfEncoded+0x96>
	{
		if(*datapakke & (0b10000000000000000000000000000000 >> (i * 2)))
 8e2:	cd 90       	ld	r12, X+
 8e4:	dd 90       	ld	r13, X+
 8e6:	ed 90       	ld	r14, X+
 8e8:	fc 90       	ld	r15, X
 8ea:	13 97       	sbiw	r26, 0x03	; 3
 8ec:	c9 01       	movw	r24, r18
 8ee:	88 0f       	add	r24, r24
 8f0:	99 1f       	adc	r25, r25
 8f2:	40 e0       	ldi	r20, 0x00	; 0
 8f4:	50 e0       	ldi	r21, 0x00	; 0
 8f6:	60 e0       	ldi	r22, 0x00	; 0
 8f8:	70 e8       	ldi	r23, 0x80	; 128
 8fa:	04 c0       	rjmp	.+8      	; 0x904 <halfEncoded+0x34>
 8fc:	76 95       	lsr	r23
 8fe:	67 95       	ror	r22
 900:	57 95       	ror	r21
 902:	47 95       	ror	r20
 904:	8a 95       	dec	r24
 906:	d2 f7       	brpl	.-12     	; 0x8fc <halfEncoded+0x2c>
 908:	4c 21       	and	r20, r12
 90a:	5d 21       	and	r21, r13
 90c:	6e 21       	and	r22, r14
 90e:	7f 21       	and	r23, r15
 910:	45 2b       	or	r20, r21
 912:	46 2b       	or	r20, r22
 914:	47 2b       	or	r20, r23
 916:	91 f0       	breq	.+36     	; 0x93c <halfEncoded+0x6c>
			*encoded |=  1 << (14-i);
 918:	4e e0       	ldi	r20, 0x0E	; 14
 91a:	50 e0       	ldi	r21, 0x00	; 0
 91c:	42 1b       	sub	r20, r18
 91e:	53 0b       	sbc	r21, r19
 920:	81 e0       	ldi	r24, 0x01	; 1
 922:	90 e0       	ldi	r25, 0x00	; 0
 924:	02 c0       	rjmp	.+4      	; 0x92a <halfEncoded+0x5a>
 926:	88 0f       	add	r24, r24
 928:	99 1f       	adc	r25, r25
 92a:	4a 95       	dec	r20
 92c:	e2 f7       	brpl	.-8      	; 0x926 <halfEncoded+0x56>
 92e:	40 81       	ld	r20, Z
 930:	51 81       	ldd	r21, Z+1	; 0x01
 932:	84 2b       	or	r24, r20
 934:	95 2b       	or	r25, r21
 936:	91 83       	std	Z+1, r25	; 0x01
 938:	80 83       	st	Z, r24
 93a:	13 c0       	rjmp	.+38     	; 0x962 <halfEncoded+0x92>
			
		else *encoded &= ~(1 << (14-i));
 93c:	4e e0       	ldi	r20, 0x0E	; 14
 93e:	50 e0       	ldi	r21, 0x00	; 0
 940:	42 1b       	sub	r20, r18
 942:	53 0b       	sbc	r21, r19
 944:	81 e0       	ldi	r24, 0x01	; 1
 946:	90 e0       	ldi	r25, 0x00	; 0
 948:	02 c0       	rjmp	.+4      	; 0x94e <halfEncoded+0x7e>
 94a:	88 0f       	add	r24, r24
 94c:	99 1f       	adc	r25, r25
 94e:	4a 95       	dec	r20
 950:	e2 f7       	brpl	.-8      	; 0x94a <halfEncoded+0x7a>
 952:	80 95       	com	r24
 954:	90 95       	com	r25
 956:	40 81       	ld	r20, Z
 958:	51 81       	ldd	r21, Z+1	; 0x01
 95a:	84 23       	and	r24, r20
 95c:	95 23       	and	r25, r21
 95e:	91 83       	std	Z+1, r25	; 0x01
 960:	80 83       	st	Z, r24


void halfEncoded(uint16_t* encoded, uint32_t* datapakke)
{

	for (int i = 0; i < 15; i++)
 962:	2f 5f       	subi	r18, 0xFF	; 255
 964:	3f 4f       	sbci	r19, 0xFF	; 255
 966:	2f 30       	cpi	r18, 0x0F	; 15
 968:	31 05       	cpc	r19, r1
 96a:	0c f4       	brge	.+2      	; 0x96e <halfEncoded+0x9e>
 96c:	ba cf       	rjmp	.-140    	; 0x8e2 <halfEncoded+0x12>
		if(*datapakke & (0b10000000000000000000000000000000 >> (i * 2)))
			*encoded |=  1 << (14-i);
			
		else *encoded &= ~(1 << (14-i));
	}
 96e:	ff 90       	pop	r15
 970:	ef 90       	pop	r14
 972:	df 90       	pop	r13
 974:	cf 90       	pop	r12
 976:	08 95       	ret

00000978 <recievex10>:

	*counterPtr = 1;
}

void recievex10(uint16_t* adr, uint16_t* com, uint16_t* combined, uint16_t* encoded, uint32_t* datapakke, volatile int* counterPtr)
{
 978:	8f 92       	push	r8
 97a:	9f 92       	push	r9
 97c:	af 92       	push	r10
 97e:	bf 92       	push	r11
 980:	cf 92       	push	r12
 982:	df 92       	push	r13
 984:	ef 92       	push	r14
 986:	ff 92       	push	r15
 988:	0f 93       	push	r16
 98a:	1f 93       	push	r17
 98c:	cf 93       	push	r28
 98e:	df 93       	push	r29
		
		if (*counterPtr == dataSIZE+2)
 990:	d7 01       	movw	r26, r14
 992:	ed 91       	ld	r30, X+
 994:	fc 91       	ld	r31, X
 996:	b0 97       	sbiw	r30, 0x20	; 32
 998:	f9 f4       	brne	.+62     	; 0x9d8 <recievex10+0x60>
 99a:	47 01       	movw	r8, r14
 99c:	79 01       	movw	r14, r18
 99e:	ea 01       	movw	r28, r20
 9a0:	5b 01       	movw	r10, r22
 9a2:	6c 01       	movw	r12, r24
		{
			halfEncoded(encoded, datapakke);
 9a4:	b8 01       	movw	r22, r16
 9a6:	c9 01       	movw	r24, r18
 9a8:	93 df       	rcall	.-218    	; 0x8d0 <halfEncoded>
			
			hammingDecoding(encoded, combined);
 9aa:	be 01       	movw	r22, r28
 9ac:	c7 01       	movw	r24, r14
 9ae:	f5 dd       	rcall	.-1046   	; 0x59a <hammingDecoding>
			
			splitCombine(adr, com, combined);
 9b0:	ae 01       	movw	r20, r28
 9b2:	b5 01       	movw	r22, r10
 9b4:	c6 01       	movw	r24, r12
 9b6:	8a dd       	rcall	.-1260   	; 0x4cc <splitCombine>
			
			*encoded = 0;
 9b8:	f7 01       	movw	r30, r14
 9ba:	11 82       	std	Z+1, r1	; 0x01
 9bc:	10 82       	st	Z, r1
			*combined = 0;
 9be:	19 82       	std	Y+1, r1	; 0x01
 9c0:	18 82       	st	Y, r1
			*datapakke = 0;
 9c2:	d8 01       	movw	r26, r16
 9c4:	1d 92       	st	X+, r1
 9c6:	1d 92       	st	X+, r1
 9c8:	1d 92       	st	X+, r1
 9ca:	1c 92       	st	X, r1
 9cc:	13 97       	sbiw	r26, 0x03	; 3
			*counterPtr = 1;
 9ce:	81 e0       	ldi	r24, 0x01	; 1
 9d0:	90 e0       	ldi	r25, 0x00	; 0
 9d2:	f4 01       	movw	r30, r8
 9d4:	91 83       	std	Z+1, r25	; 0x01
 9d6:	80 83       	st	Z, r24
		}
				
		
}
 9d8:	df 91       	pop	r29
 9da:	cf 91       	pop	r28
 9dc:	1f 91       	pop	r17
 9de:	0f 91       	pop	r16
 9e0:	ff 90       	pop	r15
 9e2:	ef 90       	pop	r14
 9e4:	df 90       	pop	r13
 9e6:	cf 90       	pop	r12
 9e8:	bf 90       	pop	r11
 9ea:	af 90       	pop	r10
 9ec:	9f 90       	pop	r9
 9ee:	8f 90       	pop	r8
 9f0:	08 95       	ret

000009f2 <__udivmodsi4>:
 9f2:	a1 e2       	ldi	r26, 0x21	; 33
 9f4:	1a 2e       	mov	r1, r26
 9f6:	aa 1b       	sub	r26, r26
 9f8:	bb 1b       	sub	r27, r27
 9fa:	fd 01       	movw	r30, r26
 9fc:	0d c0       	rjmp	.+26     	; 0xa18 <__udivmodsi4_ep>

000009fe <__udivmodsi4_loop>:
 9fe:	aa 1f       	adc	r26, r26
 a00:	bb 1f       	adc	r27, r27
 a02:	ee 1f       	adc	r30, r30
 a04:	ff 1f       	adc	r31, r31
 a06:	a2 17       	cp	r26, r18
 a08:	b3 07       	cpc	r27, r19
 a0a:	e4 07       	cpc	r30, r20
 a0c:	f5 07       	cpc	r31, r21
 a0e:	20 f0       	brcs	.+8      	; 0xa18 <__udivmodsi4_ep>
 a10:	a2 1b       	sub	r26, r18
 a12:	b3 0b       	sbc	r27, r19
 a14:	e4 0b       	sbc	r30, r20
 a16:	f5 0b       	sbc	r31, r21

00000a18 <__udivmodsi4_ep>:
 a18:	66 1f       	adc	r22, r22
 a1a:	77 1f       	adc	r23, r23
 a1c:	88 1f       	adc	r24, r24
 a1e:	99 1f       	adc	r25, r25
 a20:	1a 94       	dec	r1
 a22:	69 f7       	brne	.-38     	; 0x9fe <__udivmodsi4_loop>
 a24:	60 95       	com	r22
 a26:	70 95       	com	r23
 a28:	80 95       	com	r24
 a2a:	90 95       	com	r25
 a2c:	9b 01       	movw	r18, r22
 a2e:	ac 01       	movw	r20, r24
 a30:	bd 01       	movw	r22, r26
 a32:	cf 01       	movw	r24, r30
 a34:	08 95       	ret

00000a36 <_exit>:
 a36:	f8 94       	cli

00000a38 <__stop_program>:
 a38:	ff cf       	rjmp	.-2      	; 0xa38 <__stop_program>
