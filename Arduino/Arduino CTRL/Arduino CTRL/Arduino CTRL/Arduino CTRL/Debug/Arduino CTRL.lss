
Arduino CTRL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800200  000002ba  0000032e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000336  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000368  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000012d3  00000000  00000000  00000488  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000f44  00000000  00000000  0000175b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000737  00000000  00000000  0000269f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000018c  00000000  00000000  00002dd8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007c0  00000000  00000000  00002f64  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000336  00000000  00000000  00003724  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  00003a5a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	24 c0       	rjmp	.+72     	; 0x112 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea eb       	ldi	r30, 0xBA	; 186
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 30       	cpi	r26, 0x08	; 8
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	02 d0       	rcall	.+4      	; 0x114 <main>
 110:	d2 c0       	rjmp	.+420    	; 0x2b6 <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <main>:


int main()
{
	// Initialize LED port
	initLEDport();
 114:	1c d0       	rcall	.+56     	; 0x14e <initLEDport>
	// Initialize UART: Baud = 9600, 8 data bits, No Parity
	InitUART(9600,8);
 116:	48 e0       	ldi	r20, 0x08	; 8
 118:	60 e8       	ldi	r22, 0x80	; 128
 11a:	75 e2       	ldi	r23, 0x25	; 37
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	90 e0       	ldi	r25, 0x00	; 0
	initSwitchPort();
 120:	3b d0       	rcall	.+118    	; 0x198 <InitUART>
	
	turnOffLED(2);
 122:	38 d0       	rcall	.+112    	; 0x194 <initSwitchPort>
 124:	82 e0       	ldi	r24, 0x02	; 2
	turnOnLED(3);
 126:	26 d0       	rcall	.+76     	; 0x174 <turnOffLED>
 128:	83 e0       	ldi	r24, 0x03	; 3
	turnOffLED(4);
 12a:	15 d0       	rcall	.+42     	; 0x156 <turnOnLED>
 12c:	84 e0       	ldi	r24, 0x04	; 4
 12e:	22 d0       	rcall	.+68     	; 0x174 <turnOffLED>
	turnOnLED(5);
 130:	85 e0       	ldi	r24, 0x05	; 5
 132:	11 d0       	rcall	.+34     	; 0x156 <turnOnLED>
 134:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 136:	87 ea       	ldi	r24, 0xA7	; 167
 138:	91 e6       	ldi	r25, 0x61	; 97
 13a:	21 50       	subi	r18, 0x01	; 1
 13c:	80 40       	sbci	r24, 0x00	; 0
 13e:	90 40       	sbci	r25, 0x00	; 0
 140:	e1 f7       	brne	.-8      	; 0x13a <main+0x26>
 142:	00 c0       	rjmp	.+0      	; 0x144 <main+0x30>
 144:	00 00       	nop
	
	while (1)
	{
		_delay_ms(2000);
		SendString("21.5");
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	92 e0       	ldi	r25, 0x02	; 2
 14a:	87 d0       	rcall	.+270    	; 0x25a <SendString>
 14c:	f3 cf       	rjmp	.-26     	; 0x134 <main+0x20>

0000014e <initLEDport>:
 14e:	8f ef       	ldi	r24, 0xFF	; 255
void writeAllLEDs(unsigned char pattern)
{
	// Implementering OK
	// Parameteren pattern skal være formateret som 0b01010101
	// Hent parameteren og skriv til lysdioderne
	PORTB = pattern;   
 150:	84 b9       	out	0x04, r24	; 4
 152:	15 b8       	out	0x05, r1	; 5
 154:	08 95       	ret

00000156 <turnOnLED>:
{
	// Implementering OK
	// Lokal variabel
	unsigned char mask;
	// Vi skal kun lave noget, hvis led_nr < 8
	if (led_nr <= MAX_LED_NR)
 156:	88 30       	cpi	r24, 0x08	; 8
 158:	60 f4       	brcc	.+24     	; 0x172 <turnOnLED+0x1c>
	{
		// Dan maske på basis af parameteren (led_nr)
		mask = 0b00000001 << led_nr;
 15a:	21 e0       	ldi	r18, 0x01	; 1
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	a9 01       	movw	r20, r18
 160:	02 c0       	rjmp	.+4      	; 0x166 <turnOnLED+0x10>
 162:	44 0f       	add	r20, r20
 164:	55 1f       	adc	r21, r21
 166:	8a 95       	dec	r24
 168:	e2 f7       	brpl	.-8      	; 0x162 <turnOnLED+0xc>
 16a:	ca 01       	movw	r24, r20
		// Tænd den aktuelle lysdiode (de andre ændres ikke)
		PORTB = PINB | mask;
 16c:	93 b1       	in	r25, 0x03	; 3
 16e:	89 2b       	or	r24, r25
 170:	85 b9       	out	0x05, r24	; 5
 172:	08 95       	ret

00000174 <turnOffLED>:

void turnOffLED(unsigned char led_nr)
{
	//Implementering OK
	// Vi skal kun lave noget, hvis led_nr < 8
	if (led_nr <= MAX_LED_NR)
 174:	88 30       	cpi	r24, 0x08	; 8
 176:	68 f4       	brcc	.+26     	; 0x192 <turnOffLED+0x1e>
	{
		PORTB &= ~(1 << led_nr);
 178:	45 b1       	in	r20, 0x05	; 5
 17a:	21 e0       	ldi	r18, 0x01	; 1
 17c:	30 e0       	ldi	r19, 0x00	; 0
 17e:	b9 01       	movw	r22, r18
 180:	02 c0       	rjmp	.+4      	; 0x186 <turnOffLED+0x12>
 182:	66 0f       	add	r22, r22
 184:	77 1f       	adc	r23, r23
 186:	8a 95       	dec	r24
 188:	e2 f7       	brpl	.-8      	; 0x182 <turnOffLED+0xe>
 18a:	cb 01       	movw	r24, r22
 18c:	80 95       	com	r24
 18e:	84 23       	and	r24, r20
 190:	85 b9       	out	0x05, r24	; 5
 192:	08 95       	ret

00000194 <initSwitchPort>:

// Klargør switch-porten
void initSwitchPort()
{
  // Switch-port = All inputs
  DDRA = 0;
 194:	11 b8       	out	0x01, r1	; 1
 196:	08 95       	ret

00000198 <InitUART>:
  // Wait for new character received
  while ( (UCSR0A & (1<<7)) == 0 )
  {}                        
  // Then return it
  return UDR0;
}
 198:	cf 92       	push	r12
 19a:	df 92       	push	r13
 19c:	ef 92       	push	r14
 19e:	ff 92       	push	r15
 1a0:	0f 93       	push	r16
 1a2:	1f 93       	push	r17
 1a4:	8b 01       	movw	r16, r22
 1a6:	9c 01       	movw	r18, r24
 1a8:	0c 52       	subi	r16, 0x2C	; 44
 1aa:	11 40       	sbci	r17, 0x01	; 1
 1ac:	21 09       	sbc	r18, r1
 1ae:	31 09       	sbc	r19, r1
 1b0:	05 3d       	cpi	r16, 0xD5	; 213
 1b2:	10 4c       	sbci	r17, 0xC0	; 192
 1b4:	21 40       	sbci	r18, 0x01	; 1
 1b6:	31 05       	cpc	r19, r1
 1b8:	08 f0       	brcs	.+2      	; 0x1bc <InitUART+0x24>
 1ba:	41 c0       	rjmp	.+130    	; 0x23e <InitUART+0xa6>
 1bc:	45 30       	cpi	r20, 0x05	; 5
 1be:	08 f4       	brcc	.+2      	; 0x1c2 <InitUART+0x2a>
 1c0:	3e c0       	rjmp	.+124    	; 0x23e <InitUART+0xa6>
 1c2:	49 30       	cpi	r20, 0x09	; 9
 1c4:	e0 f5       	brcc	.+120    	; 0x23e <InitUART+0xa6>
 1c6:	20 e2       	ldi	r18, 0x20	; 32
 1c8:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 1cc:	28 e1       	ldi	r18, 0x18	; 24
 1ce:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
 1d2:	45 50       	subi	r20, 0x05	; 5
 1d4:	44 0f       	add	r20, r20
 1d6:	40 93 c2 00 	sts	0x00C2, r20	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7c00c2>
 1da:	6b 01       	movw	r12, r22
 1dc:	7c 01       	movw	r14, r24
 1de:	20 e8       	ldi	r18, 0x80	; 128
 1e0:	c2 0e       	add	r12, r18
 1e2:	24 e8       	ldi	r18, 0x84	; 132
 1e4:	d2 1e       	adc	r13, r18
 1e6:	2e e1       	ldi	r18, 0x1E	; 30
 1e8:	e2 1e       	adc	r14, r18
 1ea:	f1 1c       	adc	r15, r1
 1ec:	cc 0c       	add	r12, r12
 1ee:	dd 1c       	adc	r13, r13
 1f0:	ee 1c       	adc	r14, r14
 1f2:	ff 1c       	adc	r15, r15
 1f4:	cc 0c       	add	r12, r12
 1f6:	dd 1c       	adc	r13, r13
 1f8:	ee 1c       	adc	r14, r14
 1fa:	ff 1c       	adc	r15, r15
 1fc:	cc 0c       	add	r12, r12
 1fe:	dd 1c       	adc	r13, r13
 200:	ee 1c       	adc	r14, r14
 202:	ff 1c       	adc	r15, r15
 204:	dc 01       	movw	r26, r24
 206:	cb 01       	movw	r24, r22
 208:	88 0f       	add	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	aa 1f       	adc	r26, r26
 20e:	bb 1f       	adc	r27, r27
 210:	88 0f       	add	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	aa 1f       	adc	r26, r26
 216:	bb 1f       	adc	r27, r27
 218:	9c 01       	movw	r18, r24
 21a:	ad 01       	movw	r20, r26
 21c:	22 0f       	add	r18, r18
 21e:	33 1f       	adc	r19, r19
 220:	44 1f       	adc	r20, r20
 222:	55 1f       	adc	r21, r21
 224:	22 0f       	add	r18, r18
 226:	33 1f       	adc	r19, r19
 228:	44 1f       	adc	r20, r20
 22a:	55 1f       	adc	r21, r21
 22c:	c7 01       	movw	r24, r14
 22e:	b6 01       	movw	r22, r12
 230:	20 d0       	rcall	.+64     	; 0x272 <__udivmodsi4>
 232:	21 50       	subi	r18, 0x01	; 1
 234:	31 09       	sbc	r19, r1
 236:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 23a:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
 23e:	1f 91       	pop	r17
 240:	0f 91       	pop	r16
 242:	ff 90       	pop	r15
 244:	ef 90       	pop	r14
 246:	df 90       	pop	r13
 248:	cf 90       	pop	r12
 24a:	08 95       	ret

0000024c <SendChar>:
	Tegn : Character for sending. 
*************************************************************************/
void SendChar(char Tegn)
{
  // Wait for transmitter register empty (ready for new character)
  while ( (UCSR0A & (1<<5)) == 0 )
 24c:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 250:	95 ff       	sbrs	r25, 5
 252:	fc cf       	rjmp	.-8      	; 0x24c <SendChar>
  {}
  // Then send the character
  UDR0 = Tegn;
 254:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 258:	08 95       	ret

0000025a <SendString>:
Sends 0 terminated string.
Parameter:
   Streng: Pointer to the string. 
*************************************************************************/
void SendString(char* Streng)
{
 25a:	cf 93       	push	r28
 25c:	df 93       	push	r29
 25e:	ec 01       	movw	r28, r24
  // Repeat until zero-termination
  while (*Streng != 0)
 260:	02 c0       	rjmp	.+4      	; 0x266 <SendString+0xc>
  {
    // Send the character pointed to by "Streng"
    SendChar(*Streng);
 262:	f4 df       	rcall	.-24     	; 0x24c <SendChar>
    // Advance the pointer one step
    Streng++;
 264:	21 96       	adiw	r28, 0x01	; 1
   Streng: Pointer to the string. 
*************************************************************************/
void SendString(char* Streng)
{
  // Repeat until zero-termination
  while (*Streng != 0)
 266:	88 81       	ld	r24, Y
 268:	81 11       	cpse	r24, r1
 26a:	fb cf       	rjmp	.-10     	; 0x262 <SendString+0x8>
    // Send the character pointed to by "Streng"
    SendChar(*Streng);
    // Advance the pointer one step
    Streng++;
  }
}
 26c:	df 91       	pop	r29
 26e:	cf 91       	pop	r28
 270:	08 95       	ret

00000272 <__udivmodsi4>:
 272:	a1 e2       	ldi	r26, 0x21	; 33
 274:	1a 2e       	mov	r1, r26
 276:	aa 1b       	sub	r26, r26
 278:	bb 1b       	sub	r27, r27
 27a:	fd 01       	movw	r30, r26
 27c:	0d c0       	rjmp	.+26     	; 0x298 <__udivmodsi4_ep>

0000027e <__udivmodsi4_loop>:
 27e:	aa 1f       	adc	r26, r26
 280:	bb 1f       	adc	r27, r27
 282:	ee 1f       	adc	r30, r30
 284:	ff 1f       	adc	r31, r31
 286:	a2 17       	cp	r26, r18
 288:	b3 07       	cpc	r27, r19
 28a:	e4 07       	cpc	r30, r20
 28c:	f5 07       	cpc	r31, r21
 28e:	20 f0       	brcs	.+8      	; 0x298 <__udivmodsi4_ep>
 290:	a2 1b       	sub	r26, r18
 292:	b3 0b       	sbc	r27, r19
 294:	e4 0b       	sbc	r30, r20
 296:	f5 0b       	sbc	r31, r21

00000298 <__udivmodsi4_ep>:
 298:	66 1f       	adc	r22, r22
 29a:	77 1f       	adc	r23, r23
 29c:	88 1f       	adc	r24, r24
 29e:	99 1f       	adc	r25, r25
 2a0:	1a 94       	dec	r1
 2a2:	69 f7       	brne	.-38     	; 0x27e <__udivmodsi4_loop>
 2a4:	60 95       	com	r22
 2a6:	70 95       	com	r23
 2a8:	80 95       	com	r24
 2aa:	90 95       	com	r25
 2ac:	9b 01       	movw	r18, r22
 2ae:	ac 01       	movw	r20, r24
 2b0:	bd 01       	movw	r22, r26
 2b2:	cf 01       	movw	r24, r30
 2b4:	08 95       	ret

000002b6 <_exit>:
 2b6:	f8 94       	cli

000002b8 <__stop_program>:
 2b8:	ff cf       	rjmp	.-2      	; 0x2b8 <__stop_program>
