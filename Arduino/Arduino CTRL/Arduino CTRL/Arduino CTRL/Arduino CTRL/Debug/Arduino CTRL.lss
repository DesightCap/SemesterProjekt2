
Arduino CTRL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800200  00000474  00000508  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000474  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800206  00800206  0000050e  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  0000050e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000570  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  000005b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001868  00000000  00000000  000006a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010bb  00000000  00000000  00001f10  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c5b  00000000  00000000  00002fcb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f4  00000000  00000000  00003c28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008a2  00000000  00000000  00003f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c44  00000000  00000000  000047be  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00005402  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	af c0       	rjmp	.+350    	; 0x164 <__vector_1>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 e7       	ldi	r30, 0x74	; 116
  fc:	f4 e0       	ldi	r31, 0x04	; 4
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 30       	cpi	r26, 0x06	; 6
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a6 e0       	ldi	r26, 0x06	; 6
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a1 31       	cpi	r26, 0x11	; 17
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	02 d0       	rcall	.+4      	; 0x124 <main>
 120:	a7 c1       	rjmp	.+846    	; 0x470 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <main>:
void temperatureRequest()
{
	com = 0b0000000000111100;
	sendInProcess = sendx10(&address, &com, &combined, &encoded, &datapakke, &counter);

}
 124:	48 e0       	ldi	r20, 0x08	; 8
 126:	60 e8       	ldi	r22, 0x80	; 128
 128:	75 e2       	ldi	r23, 0x25	; 37
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	0e d1       	rcall	.+540    	; 0x34c <InitUART>
 130:	74 d1       	rcall	.+744    	; 0x41a <initPort>
 132:	6d d1       	rcall	.+730    	; 0x40e <initISR>
 134:	65 d1       	rcall	.+714    	; 0x400 <ReadChar>
 136:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
 13a:	85 37       	cpi	r24, 0x75	; 117
 13c:	11 f0       	breq	.+4      	; 0x142 <main+0x1e>
 13e:	85 35       	cpi	r24, 0x55	; 85
 140:	29 f4       	brne	.+10     	; 0x14c <main+0x28>
 142:	8f ef       	ldi	r24, 0xFF	; 255
 144:	85 b9       	out	0x05, r24	; 5
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
 14c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 150:	84 36       	cpi	r24, 0x64	; 100
 152:	11 f0       	breq	.+4      	; 0x158 <main+0x34>
 154:	84 34       	cpi	r24, 0x44	; 68
 156:	71 f7       	brne	.-36     	; 0x134 <main+0x10>
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	85 b9       	out	0x05, r24	; 5
 15c:	84 e0       	ldi	r24, 0x04	; 4
 15e:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
 162:	e8 cf       	rjmp	.-48     	; 0x134 <main+0x10>

00000164 <__vector_1>:

ISR(INT0_vect) //Interrupt på int0. Tjek pin nummer
{
 164:	1f 92       	push	r1
 166:	0f 92       	push	r0
 168:	0f b6       	in	r0, 0x3f	; 63
 16a:	0f 92       	push	r0
 16c:	11 24       	eor	r1, r1
 16e:	2f 93       	push	r18
 170:	3f 93       	push	r19
 172:	4f 93       	push	r20
 174:	5f 93       	push	r21
 176:	6f 93       	push	r22
 178:	7f 93       	push	r23
 17a:	8f 93       	push	r24
 17c:	9f 93       	push	r25
 17e:	af 93       	push	r26
 180:	bf 93       	push	r27
	if (sendInProcess)
 182:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__data_end>
 186:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <__data_end+0x1>
 18a:	00 97       	sbiw	r24, 0x00	; 0
 18c:	09 f4       	brne	.+2      	; 0x190 <__vector_1+0x2c>
 18e:	65 c0       	rjmp	.+202    	; 0x25a <__vector_1+0xf6>
	{
		/*Saetter PIN til high / low på ZC interrupt.Counter saettes til 1 når sendx10() kaldes og
		datastroemmen slutter når det sidste bit i datapakke er sat på PORTA*/
		
		if (counter <=4)
 190:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <counter>
 194:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <counter+0x1>
 198:	05 97       	sbiw	r24, 0x05	; 5
 19a:	cc f4       	brge	.+50     	; 0x1ce <__vector_1+0x6a>
		{
			if (start & (0b00001000 >> (counter - 1)))
 19c:	20 91 03 02 	lds	r18, 0x0203	; 0x800203 <counter>
 1a0:	30 91 04 02 	lds	r19, 0x0204	; 0x800204 <counter+0x1>
 1a4:	21 50       	subi	r18, 0x01	; 1
 1a6:	31 09       	sbc	r19, r1
 1a8:	88 e0       	ldi	r24, 0x08	; 8
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	ac 01       	movw	r20, r24
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <__vector_1+0x50>
 1b0:	55 95       	asr	r21
 1b2:	47 95       	ror	r20
 1b4:	2a 95       	dec	r18
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <__vector_1+0x4c>
 1b8:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <start>
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	84 23       	and	r24, r20
 1c0:	95 23       	and	r25, r21
 1c2:	89 2b       	or	r24, r25
 1c4:	19 f0       	breq	.+6      	; 0x1cc <__vector_1+0x68>
			//sendBurst();
			PORTA = 0b00000001;
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	82 b9       	out	0x02, r24	; 2
 1ca:	01 c0       	rjmp	.+2      	; 0x1ce <__vector_1+0x6a>
			
			else PORTA = 0;
 1cc:	12 b8       	out	0x02, r1	; 2
		}
		
		
		if (counter > 4 && counter <= dataSIZE+4)
 1ce:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <counter>
 1d2:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <counter+0x1>
 1d6:	05 97       	sbiw	r24, 0x05	; 5
 1d8:	5c f1       	brlt	.+86     	; 0x230 <__vector_1+0xcc>
 1da:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <counter>
 1de:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <counter+0x1>
 1e2:	83 97       	sbiw	r24, 0x23	; 35
 1e4:	2c f5       	brge	.+74     	; 0x230 <__vector_1+0xcc>
		{
			if (datapakke & (0b10000000000000000000000000000000 >> (counter - 5))) // set PIN high
 1e6:	20 91 03 02 	lds	r18, 0x0203	; 0x800203 <counter>
 1ea:	30 91 04 02 	lds	r19, 0x0204	; 0x800204 <counter+0x1>
 1ee:	25 50       	subi	r18, 0x05	; 5
 1f0:	31 09       	sbc	r19, r1
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	a0 e0       	ldi	r26, 0x00	; 0
 1f8:	b0 e8       	ldi	r27, 0x80	; 128
 1fa:	04 c0       	rjmp	.+8      	; 0x204 <__vector_1+0xa0>
 1fc:	b6 95       	lsr	r27
 1fe:	a7 95       	ror	r26
 200:	97 95       	ror	r25
 202:	87 95       	ror	r24
 204:	2a 95       	dec	r18
 206:	d2 f7       	brpl	.-12     	; 0x1fc <__vector_1+0x98>
 208:	40 91 08 02 	lds	r20, 0x0208	; 0x800208 <datapakke>
 20c:	50 91 09 02 	lds	r21, 0x0209	; 0x800209 <datapakke+0x1>
 210:	60 91 0a 02 	lds	r22, 0x020A	; 0x80020a <datapakke+0x2>
 214:	70 91 0b 02 	lds	r23, 0x020B	; 0x80020b <datapakke+0x3>
 218:	84 23       	and	r24, r20
 21a:	95 23       	and	r25, r21
 21c:	a6 23       	and	r26, r22
 21e:	b7 23       	and	r27, r23
 220:	89 2b       	or	r24, r25
 222:	8a 2b       	or	r24, r26
 224:	8b 2b       	or	r24, r27
 226:	19 f0       	breq	.+6      	; 0x22e <__vector_1+0xca>
			//sendBurst();
			PORTA = 0b00000001;
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	82 b9       	out	0x02, r24	; 2
 22c:	01 c0       	rjmp	.+2      	; 0x230 <__vector_1+0xcc>
			
			else PORTA = 0; //set PIN low
 22e:	12 b8       	out	0x02, r1	; 2
		}
		
		if (counter > dataSIZE+4)
 230:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <counter>
 234:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <counter+0x1>
 238:	83 97       	sbiw	r24, 0x23	; 35
 23a:	2c f0       	brlt	.+10     	; 0x246 <__vector_1+0xe2>
		{
			PORTA = 0;
 23c:	12 b8       	out	0x02, r1	; 2
			sendInProcess = 0;
 23e:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <__data_end+0x1>
 242:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <__data_end>
		}
		counter++;
 246:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <counter>
 24a:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <counter+0x1>
 24e:	01 96       	adiw	r24, 0x01	; 1
 250:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <counter+0x1>
 254:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <counter>
 258:	6a c0       	rjmp	.+212    	; 0x32e <__vector_1+0x1ca>

	}
	else if (!sendInProcess)
 25a:	89 2b       	or	r24, r25
 25c:	09 f0       	breq	.+2      	; 0x260 <__vector_1+0xfc>
 25e:	67 c0       	rjmp	.+206    	; 0x32e <__vector_1+0x1ca>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 260:	87 e8       	ldi	r24, 0x87	; 135
 262:	93 e1       	ldi	r25, 0x13	; 19
 264:	01 97       	sbiw	r24, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <__vector_1+0x100>
 268:	00 c0       	rjmp	.+0      	; 0x26a <__vector_1+0x106>
 26a:	00 00       	nop
	{
		_delay_ms(20);
		uint8_t inputPin = (PINC & 0x1);
 26c:	86 b1       	in	r24, 0x06	; 6
 26e:	98 2f       	mov	r25, r24
 270:	91 70       	andi	r25, 0x01	; 1
		uint32_t longInputPin = 0x0000;
		longInputPin|= inputPin;
 272:	49 2f       	mov	r20, r25
 274:	50 e0       	ldi	r21, 0x00	; 0
 276:	60 e0       	ldi	r22, 0x00	; 0
 278:	70 e0       	ldi	r23, 0x00	; 0
		
		if(startRecieved != 0b00001110)
 27a:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <startRecieved>
 27e:	8e 30       	cpi	r24, 0x0E	; 14
 280:	29 f0       	breq	.+10     	; 0x28c <__vector_1+0x128>
		{
			startRecieved |= inputPin;
 282:	89 2b       	or	r24, r25
			startRecieved = startRecieved << 1;
 284:	88 0f       	add	r24, r24
 286:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <startRecieved>
 28a:	51 c0       	rjmp	.+162    	; 0x32e <__vector_1+0x1ca>
		}
		else
		{
			if(count <= dataSIZE)
 28c:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <count>
 290:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <count+0x1>
 294:	4f 97       	sbiw	r24, 0x1f	; 31
 296:	14 f5       	brge	.+68     	; 0x2dc <__vector_1+0x178>
			{
				datapakkeRecieved |= longInputPin;
 298:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <datapakkeRecieved>
 29c:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <datapakkeRecieved+0x1>
 2a0:	a0 91 0e 02 	lds	r26, 0x020E	; 0x80020e <datapakkeRecieved+0x2>
 2a4:	b0 91 0f 02 	lds	r27, 0x020F	; 0x80020f <datapakkeRecieved+0x3>
 2a8:	48 2b       	or	r20, r24
 2aa:	59 2b       	or	r21, r25
 2ac:	6a 2b       	or	r22, r26
 2ae:	7b 2b       	or	r23, r27
				datapakkeRecieved = (datapakkeRecieved << 1);
 2b0:	44 0f       	add	r20, r20
 2b2:	55 1f       	adc	r21, r21
 2b4:	66 1f       	adc	r22, r22
 2b6:	77 1f       	adc	r23, r23
 2b8:	40 93 0c 02 	sts	0x020C, r20	; 0x80020c <datapakkeRecieved>
 2bc:	50 93 0d 02 	sts	0x020D, r21	; 0x80020d <datapakkeRecieved+0x1>
 2c0:	60 93 0e 02 	sts	0x020E, r22	; 0x80020e <datapakkeRecieved+0x2>
 2c4:	70 93 0f 02 	sts	0x020F, r23	; 0x80020f <datapakkeRecieved+0x3>
				count++;
 2c8:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <count>
 2cc:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <count+0x1>
 2d0:	01 96       	adiw	r24, 0x01	; 1
 2d2:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <count+0x1>
 2d6:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <count>
 2da:	29 c0       	rjmp	.+82     	; 0x32e <__vector_1+0x1ca>
			}
			else if (count == (dataSIZE+1))
 2dc:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <count>
 2e0:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <count+0x1>
 2e4:	4f 97       	sbiw	r24, 0x1f	; 31
 2e6:	19 f5       	brne	.+70     	; 0x32e <__vector_1+0x1ca>
			{
				datapakkeRecieved = datapakkeRecieved << 2;
 2e8:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <datapakkeRecieved>
 2ec:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <datapakkeRecieved+0x1>
 2f0:	a0 91 0e 02 	lds	r26, 0x020E	; 0x80020e <datapakkeRecieved+0x2>
 2f4:	b0 91 0f 02 	lds	r27, 0x020F	; 0x80020f <datapakkeRecieved+0x3>
 2f8:	88 0f       	add	r24, r24
 2fa:	99 1f       	adc	r25, r25
 2fc:	aa 1f       	adc	r26, r26
 2fe:	bb 1f       	adc	r27, r27
 300:	88 0f       	add	r24, r24
 302:	99 1f       	adc	r25, r25
 304:	aa 1f       	adc	r26, r26
 306:	bb 1f       	adc	r27, r27
 308:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <datapakkeRecieved>
 30c:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <datapakkeRecieved+0x1>
 310:	a0 93 0e 02 	sts	0x020E, r26	; 0x80020e <datapakkeRecieved+0x2>
 314:	b0 93 0f 02 	sts	0x020F, r27	; 0x80020f <datapakkeRecieved+0x3>
				startRecieved = 0;
 318:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <startRecieved>
				//PORTB = (datapakkeRecieved);
				count++;
 31c:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <count>
 320:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <count+0x1>
 324:	01 96       	adiw	r24, 0x01	; 1
 326:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <count+0x1>
 32a:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <count>

			
		}
	}
	
 32e:	bf 91       	pop	r27
 330:	af 91       	pop	r26
 332:	9f 91       	pop	r25
 334:	8f 91       	pop	r24
 336:	7f 91       	pop	r23
 338:	6f 91       	pop	r22
 33a:	5f 91       	pop	r21
 33c:	4f 91       	pop	r20
 33e:	3f 91       	pop	r19
 340:	2f 91       	pop	r18
 342:	0f 90       	pop	r0
 344:	0f be       	out	0x3f, r0	; 63
 346:	0f 90       	pop	r0
 348:	1f 90       	pop	r1
 34a:	18 95       	reti

0000034c <InitUART>:
 34c:	cf 92       	push	r12
 34e:	df 92       	push	r13
 350:	ef 92       	push	r14
 352:	ff 92       	push	r15
 354:	0f 93       	push	r16
 356:	1f 93       	push	r17
 358:	8b 01       	movw	r16, r22
 35a:	9c 01       	movw	r18, r24
 35c:	0c 52       	subi	r16, 0x2C	; 44
 35e:	11 40       	sbci	r17, 0x01	; 1
 360:	21 09       	sbc	r18, r1
 362:	31 09       	sbc	r19, r1
 364:	05 3d       	cpi	r16, 0xD5	; 213
 366:	10 4c       	sbci	r17, 0xC0	; 192
 368:	21 40       	sbci	r18, 0x01	; 1
 36a:	31 05       	cpc	r19, r1
 36c:	08 f0       	brcs	.+2      	; 0x370 <InitUART+0x24>
 36e:	41 c0       	rjmp	.+130    	; 0x3f2 <InitUART+0xa6>
 370:	45 30       	cpi	r20, 0x05	; 5
 372:	08 f4       	brcc	.+2      	; 0x376 <InitUART+0x2a>
 374:	3e c0       	rjmp	.+124    	; 0x3f2 <InitUART+0xa6>
 376:	49 30       	cpi	r20, 0x09	; 9
 378:	e0 f5       	brcc	.+120    	; 0x3f2 <InitUART+0xa6>
 37a:	20 e2       	ldi	r18, 0x20	; 32
 37c:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 380:	28 e1       	ldi	r18, 0x18	; 24
 382:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
 386:	45 50       	subi	r20, 0x05	; 5
 388:	44 0f       	add	r20, r20
 38a:	40 93 c2 00 	sts	0x00C2, r20	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7c00c2>
 38e:	6b 01       	movw	r12, r22
 390:	7c 01       	movw	r14, r24
 392:	20 e8       	ldi	r18, 0x80	; 128
 394:	c2 0e       	add	r12, r18
 396:	24 e8       	ldi	r18, 0x84	; 132
 398:	d2 1e       	adc	r13, r18
 39a:	2e e1       	ldi	r18, 0x1E	; 30
 39c:	e2 1e       	adc	r14, r18
 39e:	f1 1c       	adc	r15, r1
 3a0:	cc 0c       	add	r12, r12
 3a2:	dd 1c       	adc	r13, r13
 3a4:	ee 1c       	adc	r14, r14
 3a6:	ff 1c       	adc	r15, r15
 3a8:	cc 0c       	add	r12, r12
 3aa:	dd 1c       	adc	r13, r13
 3ac:	ee 1c       	adc	r14, r14
 3ae:	ff 1c       	adc	r15, r15
 3b0:	cc 0c       	add	r12, r12
 3b2:	dd 1c       	adc	r13, r13
 3b4:	ee 1c       	adc	r14, r14
 3b6:	ff 1c       	adc	r15, r15
 3b8:	dc 01       	movw	r26, r24
 3ba:	cb 01       	movw	r24, r22
 3bc:	88 0f       	add	r24, r24
 3be:	99 1f       	adc	r25, r25
 3c0:	aa 1f       	adc	r26, r26
 3c2:	bb 1f       	adc	r27, r27
 3c4:	88 0f       	add	r24, r24
 3c6:	99 1f       	adc	r25, r25
 3c8:	aa 1f       	adc	r26, r26
 3ca:	bb 1f       	adc	r27, r27
 3cc:	9c 01       	movw	r18, r24
 3ce:	ad 01       	movw	r20, r26
 3d0:	22 0f       	add	r18, r18
 3d2:	33 1f       	adc	r19, r19
 3d4:	44 1f       	adc	r20, r20
 3d6:	55 1f       	adc	r21, r21
 3d8:	22 0f       	add	r18, r18
 3da:	33 1f       	adc	r19, r19
 3dc:	44 1f       	adc	r20, r20
 3de:	55 1f       	adc	r21, r21
 3e0:	c7 01       	movw	r24, r14
 3e2:	b6 01       	movw	r22, r12
 3e4:	23 d0       	rcall	.+70     	; 0x42c <__udivmodsi4>
 3e6:	21 50       	subi	r18, 0x01	; 1
 3e8:	31 09       	sbc	r19, r1
 3ea:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 3ee:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
 3f2:	1f 91       	pop	r17
 3f4:	0f 91       	pop	r16
 3f6:	ff 90       	pop	r15
 3f8:	ef 90       	pop	r14
 3fa:	df 90       	pop	r13
 3fc:	cf 90       	pop	r12
 3fe:	08 95       	ret

00000400 <ReadChar>:
 400:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 404:	88 23       	and	r24, r24
 406:	e4 f7       	brge	.-8      	; 0x400 <ReadChar>
 408:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 40c:	08 95       	ret

0000040e <initISR>:



void initISR() 
{
	EICRA = 0b00000001; // any edge
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
	EIMSK = 0b00000001; // enable interrupt int 0
 414:	8d bb       	out	0x1d, r24	; 29
	sei(); // Global ISR enabler
 416:	78 94       	sei
 418:	08 95       	ret

0000041a <initPort>:
}

void initPort()
{
	DDRA = 0xFF;
 41a:	8f ef       	ldi	r24, 0xFF	; 255
 41c:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x00;
 41e:	12 b8       	out	0x02, r1	; 2
	
	DDRB = 0xFF;
 420:	84 b9       	out	0x04, r24	; 4
	//PORTB = 0xFF;
	
	DDRC = 0x00;
 422:	17 b8       	out	0x07, r1	; 7
	PORTC = 0x00;
 424:	18 b8       	out	0x08, r1	; 8
	
	DDRL = 0x00;
 426:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__TEXT_REGION_LENGTH__+0x7c010a>
 42a:	08 95       	ret

0000042c <__udivmodsi4>:
 42c:	a1 e2       	ldi	r26, 0x21	; 33
 42e:	1a 2e       	mov	r1, r26
 430:	aa 1b       	sub	r26, r26
 432:	bb 1b       	sub	r27, r27
 434:	fd 01       	movw	r30, r26
 436:	0d c0       	rjmp	.+26     	; 0x452 <__udivmodsi4_ep>

00000438 <__udivmodsi4_loop>:
 438:	aa 1f       	adc	r26, r26
 43a:	bb 1f       	adc	r27, r27
 43c:	ee 1f       	adc	r30, r30
 43e:	ff 1f       	adc	r31, r31
 440:	a2 17       	cp	r26, r18
 442:	b3 07       	cpc	r27, r19
 444:	e4 07       	cpc	r30, r20
 446:	f5 07       	cpc	r31, r21
 448:	20 f0       	brcs	.+8      	; 0x452 <__udivmodsi4_ep>
 44a:	a2 1b       	sub	r26, r18
 44c:	b3 0b       	sbc	r27, r19
 44e:	e4 0b       	sbc	r30, r20
 450:	f5 0b       	sbc	r31, r21

00000452 <__udivmodsi4_ep>:
 452:	66 1f       	adc	r22, r22
 454:	77 1f       	adc	r23, r23
 456:	88 1f       	adc	r24, r24
 458:	99 1f       	adc	r25, r25
 45a:	1a 94       	dec	r1
 45c:	69 f7       	brne	.-38     	; 0x438 <__udivmodsi4_loop>
 45e:	60 95       	com	r22
 460:	70 95       	com	r23
 462:	80 95       	com	r24
 464:	90 95       	com	r25
 466:	9b 01       	movw	r18, r22
 468:	ac 01       	movw	r20, r24
 46a:	bd 01       	movw	r22, r26
 46c:	cf 01       	movw	r24, r30
 46e:	08 95       	ret

00000470 <_exit>:
 470:	f8 94       	cli

00000472 <__stop_program>:
 472:	ff cf       	rjmp	.-2      	; 0x472 <__stop_program>
