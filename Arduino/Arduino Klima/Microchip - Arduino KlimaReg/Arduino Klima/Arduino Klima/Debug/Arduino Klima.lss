
Arduino Klima.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800200  00000718  000007ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000718  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000015  00800206  00800206  000007b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000824  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001555  00000000  00000000  000008d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eb8  00000000  00000000  00001e29  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a67  00000000  00000000  00002ce1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000228  00000000  00000000  00003748  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000820  00000000  00000000  00003970  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a60  00000000  00000000  00004190  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00004bf0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	50 c1       	rjmp	.+672    	; 0x2a6 <__vector_1>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e8 e1       	ldi	r30, 0x18	; 24
  fc:	f7 e0       	ldi	r31, 0x07	; 7
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 30       	cpi	r26, 0x06	; 6
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a6 e0       	ldi	r26, 0x06	; 6
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ab 31       	cpi	r26, 0x1B	; 27
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	64 d0       	rcall	.+200    	; 0x1e8 <main>
 120:	f9 c2       	rjmp	.+1522   	; 0x714 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <blowerOn>:
	
}

void blowerOn()
{
		if(blowTime > 0)
 124:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <blowTime>
 128:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <blowTime+0x1>
 12c:	a0 91 0c 02 	lds	r26, 0x020C	; 0x80020c <blowTime+0x2>
 130:	b0 91 0d 02 	lds	r27, 0x020D	; 0x80020d <blowTime+0x3>
 134:	89 2b       	or	r24, r25
 136:	8a 2b       	or	r24, r26
 138:	8b 2b       	or	r24, r27
 13a:	f9 f0       	breq	.+62     	; 0x17a <blowerOn+0x56>
		{
			PORTL |= pinCold;
 13c:	eb e0       	ldi	r30, 0x0B	; 11
 13e:	f1 e0       	ldi	r31, 0x01	; 1
 140:	80 81       	ld	r24, Z
 142:	81 60       	ori	r24, 0x01	; 1
 144:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 146:	8f e8       	ldi	r24, 0x8F	; 143
 148:	91 e0       	ldi	r25, 0x01	; 1
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <blowerOn+0x26>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <blowerOn+0x2c>
 150:	00 00       	nop
			_delay_us(100);
			
			blowTime--;
 152:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <blowTime>
 156:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <blowTime+0x1>
 15a:	a0 91 0c 02 	lds	r26, 0x020C	; 0x80020c <blowTime+0x2>
 15e:	b0 91 0d 02 	lds	r27, 0x020D	; 0x80020d <blowTime+0x3>
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	a1 09       	sbc	r26, r1
 166:	b1 09       	sbc	r27, r1
 168:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <blowTime>
 16c:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <blowTime+0x1>
 170:	a0 93 0c 02 	sts	0x020C, r26	; 0x80020c <blowTime+0x2>
 174:	b0 93 0d 02 	sts	0x020D, r27	; 0x80020d <blowTime+0x3>
 178:	08 95       	ret
		}
			
		else
		{
			PORTL &= ~pinCold;
 17a:	eb e0       	ldi	r30, 0x0B	; 11
 17c:	f1 e0       	ldi	r31, 0x01	; 1
 17e:	80 81       	ld	r24, Z
 180:	8e 7f       	andi	r24, 0xFE	; 254
 182:	80 83       	st	Z, r24
 184:	08 95       	ret

00000186 <heaterOn>:
		}
}

void heaterOn()
{
		if(hotTime > 0)
 186:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__data_end>
 18a:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <__data_end+0x1>
 18e:	a0 91 08 02 	lds	r26, 0x0208	; 0x800208 <__data_end+0x2>
 192:	b0 91 09 02 	lds	r27, 0x0209	; 0x800209 <__data_end+0x3>
 196:	89 2b       	or	r24, r25
 198:	8a 2b       	or	r24, r26
 19a:	8b 2b       	or	r24, r27
 19c:	f9 f0       	breq	.+62     	; 0x1dc <heaterOn+0x56>
		{
			PORTL |= pinHot;
 19e:	eb e0       	ldi	r30, 0x0B	; 11
 1a0:	f1 e0       	ldi	r31, 0x01	; 1
 1a2:	80 81       	ld	r24, Z
 1a4:	84 60       	ori	r24, 0x04	; 4
 1a6:	80 83       	st	Z, r24
 1a8:	8f e8       	ldi	r24, 0x8F	; 143
 1aa:	91 e0       	ldi	r25, 0x01	; 1
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <heaterOn+0x26>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <heaterOn+0x2c>
 1b2:	00 00       	nop
			_delay_us(100);
			hotTime--;
 1b4:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__data_end>
 1b8:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <__data_end+0x1>
 1bc:	a0 91 08 02 	lds	r26, 0x0208	; 0x800208 <__data_end+0x2>
 1c0:	b0 91 09 02 	lds	r27, 0x0209	; 0x800209 <__data_end+0x3>
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	a1 09       	sbc	r26, r1
 1c8:	b1 09       	sbc	r27, r1
 1ca:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <__data_end>
 1ce:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <__data_end+0x1>
 1d2:	a0 93 08 02 	sts	0x0208, r26	; 0x800208 <__data_end+0x2>
 1d6:	b0 93 09 02 	sts	0x0209, r27	; 0x800209 <__data_end+0x3>
 1da:	08 95       	ret
		}
		
		else
		{
			PORTL &= ~pinHot;
 1dc:	eb e0       	ldi	r30, 0x0B	; 11
 1de:	f1 e0       	ldi	r31, 0x01	; 1
 1e0:	80 81       	ld	r24, Z
 1e2:	8b 7f       	andi	r24, 0xFB	; 251
 1e4:	80 83       	st	Z, r24
 1e6:	08 95       	ret

000001e8 <main>:


int main(void)
{

	DDRL = 0xFF;
 1e8:	8f ef       	ldi	r24, 0xFF	; 255
 1ea:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__TEXT_REGION_LENGTH__+0x7c010a>
	


	initPort();
 1ee:	e0 d0       	rcall	.+448    	; 0x3b0 <initPort>
	initISR();
 1f0:	d9 d0       	rcall	.+434    	; 0x3a4 <initISR>
 1f2:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <count>

	
	while (1)
	{
		// Modtag x10
		if (count == (dataSIZE+2))
 1f6:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <count+0x1>
 1fa:	80 97       	sbiw	r24, 0x20	; 32
 1fc:	89 f4       	brne	.+34     	; 0x220 <main+0x38>
 1fe:	0f 2e       	mov	r0, r31
		{
			recievex10(&addressRecieved, &commandRecieved, &combined, &encoded, &datapakkeRecieved, &count);
 200:	f4 e0       	ldi	r31, 0x04	; 4
 202:	ef 2e       	mov	r14, r31
 204:	f2 e0       	ldi	r31, 0x02	; 2
 206:	ff 2e       	mov	r15, r31
 208:	f0 2d       	mov	r31, r0
 20a:	06 e1       	ldi	r16, 0x16	; 22
 20c:	12 e0       	ldi	r17, 0x02	; 2
 20e:	20 e1       	ldi	r18, 0x10	; 16
 210:	32 e0       	ldi	r19, 0x02	; 2
 212:	4e e0       	ldi	r20, 0x0E	; 14
 214:	52 e0       	ldi	r21, 0x02	; 2
 216:	62 e1       	ldi	r22, 0x12	; 18
 218:	72 e0       	ldi	r23, 0x02	; 2
 21a:	84 e1       	ldi	r24, 0x14	; 20
 21c:	92 e0       	ldi	r25, 0x02	; 2
 21e:	25 d2       	rcall	.+1098   	; 0x66a <recievex10>
 220:	20 91 14 02 	lds	r18, 0x0214	; 0x800214 <addressRecieved>
		}
			

		if(addressRecieved == myAddress)
 224:	30 91 15 02 	lds	r19, 0x0215	; 0x800215 <addressRecieved+0x1>
 228:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 22c:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 230:	28 17       	cp	r18, r24
 232:	39 07       	cpc	r19, r25
 234:	a9 f5       	brne	.+106    	; 0x2a0 <main+0xb8>
 236:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <commandRecieved>
		{
				switch (commandRecieved)
 23a:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <commandRecieved+0x1>
 23e:	80 3b       	cpi	r24, 0xB0	; 176
 240:	91 05       	cpc	r25, r1
 242:	a9 f0       	breq	.+42     	; 0x26e <main+0x86>
 244:	80 3c       	cpi	r24, 0xC0	; 192
 246:	91 05       	cpc	r25, r1
 248:	19 f5       	brne	.+70     	; 0x290 <main+0xa8>
 24a:	a0 91 02 02 	lds	r26, 0x0202	; 0x800202 <timeMultiplier>
				{
					case blowCommand:
					blowTime = 100000 * timeMultiplier;
 24e:	b0 91 03 02 	lds	r27, 0x0203	; 0x800203 <timeMultiplier+0x1>
 252:	20 ea       	ldi	r18, 0xA0	; 160
 254:	36 e8       	ldi	r19, 0x86	; 134
 256:	41 e0       	ldi	r20, 0x01	; 1
 258:	50 e0       	ldi	r21, 0x00	; 0
 25a:	3d d2       	rcall	.+1146   	; 0x6d6 <__mulshisi3>
 25c:	60 93 0a 02 	sts	0x020A, r22	; 0x80020a <blowTime>
 260:	70 93 0b 02 	sts	0x020B, r23	; 0x80020b <blowTime+0x1>
 264:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <blowTime+0x2>
 268:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <blowTime+0x3>
 26c:	11 c0       	rjmp	.+34     	; 0x290 <main+0xa8>
					break;
 26e:	a0 91 02 02 	lds	r26, 0x0202	; 0x800202 <timeMultiplier>
					
					case heatCommand:
					hotTime = 100000 * timeMultiplier;
 272:	b0 91 03 02 	lds	r27, 0x0203	; 0x800203 <timeMultiplier+0x1>
 276:	20 ea       	ldi	r18, 0xA0	; 160
 278:	36 e8       	ldi	r19, 0x86	; 134
 27a:	41 e0       	ldi	r20, 0x01	; 1
 27c:	50 e0       	ldi	r21, 0x00	; 0
 27e:	2b d2       	rcall	.+1110   	; 0x6d6 <__mulshisi3>
 280:	60 93 06 02 	sts	0x0206, r22	; 0x800206 <__data_end>
 284:	70 93 07 02 	sts	0x0207, r23	; 0x800207 <__data_end+0x1>
 288:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end+0x2>
 28c:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <__data_end+0x3>
 290:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <addressRecieved+0x1>
					default:
					
					break;
				}
				
				addressRecieved = 0;
 294:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <addressRecieved>
				commandRecieved = 0;
 298:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <commandRecieved+0x1>
 29c:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <commandRecieved>
		}

		
		blowerOn();
 2a0:	41 df       	rcall	.-382    	; 0x124 <blowerOn>
		heaterOn();
 2a2:	71 df       	rcall	.-286    	; 0x186 <heaterOn>
 2a4:	a6 cf       	rjmp	.-180    	; 0x1f2 <main+0xa>

000002a6 <__vector_1>:
			
		
	}
 2a6:	1f 92       	push	r1




ISR(INT0_vect)
{
 2a8:	0f 92       	push	r0
 2aa:	0f b6       	in	r0, 0x3f	; 63
 2ac:	0f 92       	push	r0
 2ae:	11 24       	eor	r1, r1
 2b0:	4f 93       	push	r20
 2b2:	5f 93       	push	r21
 2b4:	6f 93       	push	r22
 2b6:	7f 93       	push	r23
 2b8:	8f 93       	push	r24
 2ba:	9f 93       	push	r25
 2bc:	af 93       	push	r26
 2be:	bf 93       	push	r27
 2c0:	8a e6       	ldi	r24, 0x6A	; 106
 2c2:	8a 95       	dec	r24
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <__vector_1+0x1c>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <__vector_1+0x22>

	_delay_us(20);
	uint8_t inputPin = (PINC & 0x1);
 2c8:	86 b1       	in	r24, 0x06	; 6
 2ca:	98 2f       	mov	r25, r24
 2cc:	91 70       	andi	r25, 0x01	; 1
	uint32_t longInputPin = 0x0000;
	longInputPin|= inputPin;
 2ce:	49 2f       	mov	r20, r25
 2d0:	50 e0       	ldi	r21, 0x00	; 0
 2d2:	60 e0       	ldi	r22, 0x00	; 0
 2d4:	70 e0       	ldi	r23, 0x00	; 0
	
	if(startRecieved != 0b00001110)
 2d6:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <startRecieved>
 2da:	8e 30       	cpi	r24, 0x0E	; 14
 2dc:	29 f0       	breq	.+10     	; 0x2e8 <__vector_1+0x42>
	{
		startRecieved |= inputPin;
 2de:	89 2b       	or	r24, r25
		startRecieved = startRecieved << 1;
 2e0:	88 0f       	add	r24, r24
 2e2:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <startRecieved>
 2e6:	51 c0       	rjmp	.+162    	; 0x38a <__vector_1+0xe4>
	}
	else
	{
		if(count <= dataSIZE)
 2e8:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <count>
 2ec:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <count+0x1>
 2f0:	4f 97       	sbiw	r24, 0x1f	; 31
 2f2:	14 f5       	brge	.+68     	; 0x338 <__vector_1+0x92>
		{
			datapakkeRecieved |= longInputPin;
 2f4:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <datapakkeRecieved>
 2f8:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <datapakkeRecieved+0x1>
 2fc:	a0 91 18 02 	lds	r26, 0x0218	; 0x800218 <datapakkeRecieved+0x2>
 300:	b0 91 19 02 	lds	r27, 0x0219	; 0x800219 <datapakkeRecieved+0x3>
 304:	48 2b       	or	r20, r24
 306:	59 2b       	or	r21, r25
 308:	6a 2b       	or	r22, r26
 30a:	7b 2b       	or	r23, r27
			datapakkeRecieved = (datapakkeRecieved << 1);
 30c:	44 0f       	add	r20, r20
 30e:	55 1f       	adc	r21, r21
 310:	66 1f       	adc	r22, r22
 312:	77 1f       	adc	r23, r23
 314:	40 93 16 02 	sts	0x0216, r20	; 0x800216 <datapakkeRecieved>
 318:	50 93 17 02 	sts	0x0217, r21	; 0x800217 <datapakkeRecieved+0x1>
 31c:	60 93 18 02 	sts	0x0218, r22	; 0x800218 <datapakkeRecieved+0x2>
 320:	70 93 19 02 	sts	0x0219, r23	; 0x800219 <datapakkeRecieved+0x3>
			count++;
 324:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <count>
 328:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <count+0x1>
 32c:	01 96       	adiw	r24, 0x01	; 1
 32e:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <count+0x1>
 332:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <count>
 336:	29 c0       	rjmp	.+82     	; 0x38a <__vector_1+0xe4>
		}
		else if (count == (dataSIZE+1))
 338:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <count>
 33c:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <count+0x1>
 340:	4f 97       	sbiw	r24, 0x1f	; 31
 342:	19 f5       	brne	.+70     	; 0x38a <__vector_1+0xe4>
		{
			datapakkeRecieved = datapakkeRecieved << 2;
 344:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <datapakkeRecieved>
 348:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <datapakkeRecieved+0x1>
 34c:	a0 91 18 02 	lds	r26, 0x0218	; 0x800218 <datapakkeRecieved+0x2>
 350:	b0 91 19 02 	lds	r27, 0x0219	; 0x800219 <datapakkeRecieved+0x3>
 354:	88 0f       	add	r24, r24
 356:	99 1f       	adc	r25, r25
 358:	aa 1f       	adc	r26, r26
 35a:	bb 1f       	adc	r27, r27
 35c:	88 0f       	add	r24, r24
 35e:	99 1f       	adc	r25, r25
 360:	aa 1f       	adc	r26, r26
 362:	bb 1f       	adc	r27, r27
 364:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <datapakkeRecieved>
 368:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <datapakkeRecieved+0x1>
 36c:	a0 93 18 02 	sts	0x0218, r26	; 0x800218 <datapakkeRecieved+0x2>
 370:	b0 93 19 02 	sts	0x0219, r27	; 0x800219 <datapakkeRecieved+0x3>
			startRecieved = 0;
 374:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <startRecieved>
			//PORTB = (datapakkeRecieved);
			count++;
 378:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <count>
 37c:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <count+0x1>
 380:	01 96       	adiw	r24, 0x01	; 1
 382:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <count+0x1>
 386:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <count>
		}

		
	}

 38a:	bf 91       	pop	r27
 38c:	af 91       	pop	r26
 38e:	9f 91       	pop	r25
 390:	8f 91       	pop	r24
 392:	7f 91       	pop	r23
 394:	6f 91       	pop	r22
 396:	5f 91       	pop	r21
 398:	4f 91       	pop	r20
 39a:	0f 90       	pop	r0
 39c:	0f be       	out	0x3f, r0	; 63
 39e:	0f 90       	pop	r0
 3a0:	1f 90       	pop	r1
 3a2:	18 95       	reti

000003a4 <initISR>:
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
 3aa:	8d bb       	out	0x1d, r24	; 29
 3ac:	78 94       	sei
 3ae:	08 95       	ret

000003b0 <initPort>:
 3b0:	8f ef       	ldi	r24, 0xFF	; 255
 3b2:	81 b9       	out	0x01, r24	; 1
 3b4:	12 b8       	out	0x02, r1	; 2
 3b6:	84 b9       	out	0x04, r24	; 4
 3b8:	15 b8       	out	0x05, r1	; 5
 3ba:	17 b8       	out	0x07, r1	; 7
 3bc:	18 b8       	out	0x08, r1	; 8
 3be:	08 95       	ret

000003c0 <hammingDecoding>:
 3c0:	af 92       	push	r10
 3c2:	bf 92       	push	r11
 3c4:	cf 92       	push	r12
 3c6:	df 92       	push	r13
 3c8:	ef 92       	push	r14
 3ca:	ff 92       	push	r15
 3cc:	0f 93       	push	r16
 3ce:	1f 93       	push	r17
 3d0:	cf 93       	push	r28
 3d2:	df 93       	push	r29
 3d4:	5b 01       	movw	r10, r22
 3d6:	eb 01       	movw	r28, r22
 3d8:	19 82       	std	Y+1, r1	; 0x01
 3da:	18 82       	st	Y, r1
 3dc:	fc 01       	movw	r30, r24
 3de:	c0 80       	ld	r12, Z
 3e0:	d1 80       	ldd	r13, Z+1	; 0x01
 3e2:	d6 94       	lsr	r13
 3e4:	c7 94       	ror	r12
 3e6:	d6 94       	lsr	r13
 3e8:	c7 94       	ror	r12
 3ea:	d6 94       	lsr	r13
 3ec:	c7 94       	ror	r12
 3ee:	d6 94       	lsr	r13
 3f0:	c7 94       	ror	r12
 3f2:	d9 82       	std	Y+1, r13	; 0x01
 3f4:	c8 82       	st	Y, r12
 3f6:	d6 01       	movw	r26, r12
 3f8:	a5 7d       	andi	r26, 0xD5	; 213
 3fa:	b6 70       	andi	r27, 0x06	; 6
 3fc:	f6 01       	movw	r30, r12
 3fe:	e3 7b       	andi	r30, 0xB3	; 179
 400:	f5 70       	andi	r31, 0x05	; 5
 402:	a6 01       	movw	r20, r12
 404:	4f 78       	andi	r20, 0x8F	; 143
 406:	53 70       	andi	r21, 0x03	; 3
 408:	96 01       	movw	r18, r12
 40a:	2f 77       	andi	r18, 0x7F	; 127
 40c:	33 27       	eor	r19, r19
 40e:	ec 01       	movw	r28, r24
 410:	88 81       	ld	r24, Y
 412:	99 81       	ldd	r25, Y+1	; 0x01
 414:	83 fb       	bst	r24, 3
 416:	11 27       	eor	r17, r17
 418:	10 f9       	bld	r17, 0
 41a:	c1 2f       	mov	r28, r17
 41c:	60 e0       	ldi	r22, 0x00	; 0
 41e:	d6 2f       	mov	r29, r22
 420:	82 fb       	bst	r24, 2
 422:	00 27       	eor	r16, r16
 424:	00 f9       	bld	r16, 0
 426:	10 e0       	ldi	r17, 0x00	; 0
 428:	81 fb       	bst	r24, 1
 42a:	ee 24       	eor	r14, r14
 42c:	e0 f8       	bld	r14, 0
 42e:	f1 2c       	mov	r15, r1
 430:	81 70       	andi	r24, 0x01	; 1
 432:	99 27       	eor	r25, r25
 434:	06 c0       	rjmp	.+12     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 436:	a0 ff       	sbrs	r26, 0
 438:	02 c0       	rjmp	.+4      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 43a:	61 e0       	ldi	r22, 0x01	; 1
 43c:	c6 27       	eor	r28, r22
 43e:	b6 95       	lsr	r27
 440:	a7 95       	ror	r26
 442:	10 97       	sbiw	r26, 0x00	; 0
 444:	c1 f7       	brne	.-16     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 446:	06 c0       	rjmp	.+12     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 448:	e0 ff       	sbrs	r30, 0
 44a:	02 c0       	rjmp	.+4      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 44c:	61 e0       	ldi	r22, 0x01	; 1
 44e:	06 27       	eor	r16, r22
 450:	f6 95       	lsr	r31
 452:	e7 95       	ror	r30
 454:	30 97       	sbiw	r30, 0x00	; 0
 456:	c1 f7       	brne	.-16     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 458:	06 c0       	rjmp	.+12     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 45a:	40 ff       	sbrs	r20, 0
 45c:	02 c0       	rjmp	.+4      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 45e:	e1 e0       	ldi	r30, 0x01	; 1
 460:	ee 26       	eor	r14, r30
 462:	56 95       	lsr	r21
 464:	47 95       	ror	r20
 466:	41 15       	cp	r20, r1
 468:	51 05       	cpc	r21, r1
 46a:	b9 f7       	brne	.-18     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 46c:	06 c0       	rjmp	.+12     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 46e:	20 ff       	sbrs	r18, 0
 470:	02 c0       	rjmp	.+4      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 472:	f1 e0       	ldi	r31, 0x01	; 1
 474:	8f 27       	eor	r24, r31
 476:	36 95       	lsr	r19
 478:	27 95       	ror	r18
 47a:	21 15       	cp	r18, r1
 47c:	31 05       	cpc	r19, r1
 47e:	b9 f7       	brne	.-18     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 480:	20 97       	sbiw	r28, 0x00	; 0
 482:	59 f0       	breq	.+22     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
 484:	01 15       	cp	r16, r1
 486:	11 05       	cpc	r17, r1
 488:	59 f0       	breq	.+22     	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
 48a:	e1 14       	cp	r14, r1
 48c:	f1 04       	cpc	r15, r1
 48e:	59 f4       	brne	.+22     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 490:	00 97       	sbiw	r24, 0x00	; 0
 492:	61 f0       	breq	.+24     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
 494:	20 e0       	ldi	r18, 0x00	; 0
 496:	30 e0       	ldi	r19, 0x00	; 0
 498:	0b c0       	rjmp	.+22     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
 49a:	20 e0       	ldi	r18, 0x00	; 0
 49c:	30 e0       	ldi	r19, 0x00	; 0
 49e:	08 c0       	rjmp	.+16     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
 4a0:	20 e0       	ldi	r18, 0x00	; 0
 4a2:	30 e0       	ldi	r19, 0x00	; 0
 4a4:	05 c0       	rjmp	.+10     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
 4a6:	20 e0       	ldi	r18, 0x00	; 0
 4a8:	30 e0       	ldi	r19, 0x00	; 0
 4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
 4ac:	21 e0       	ldi	r18, 0x01	; 1
 4ae:	30 e0       	ldi	r19, 0x00	; 0
 4b0:	20 97       	sbiw	r28, 0x00	; 0
 4b2:	49 f0       	breq	.+18     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 4b4:	01 15       	cp	r16, r1
 4b6:	11 05       	cpc	r17, r1
 4b8:	31 f4       	brne	.+12     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 4ba:	e1 14       	cp	r14, r1
 4bc:	f1 04       	cpc	r15, r1
 4be:	19 f0       	breq	.+6      	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 4c0:	00 97       	sbiw	r24, 0x00	; 0
 4c2:	09 f4       	brne	.+2      	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 4c4:	22 60       	ori	r18, 0x02	; 2
 4c6:	20 97       	sbiw	r28, 0x00	; 0
 4c8:	49 f4       	brne	.+18     	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
 4ca:	01 15       	cp	r16, r1
 4cc:	11 05       	cpc	r17, r1
 4ce:	31 f0       	breq	.+12     	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
 4d0:	e1 14       	cp	r14, r1
 4d2:	f1 04       	cpc	r15, r1
 4d4:	19 f0       	breq	.+6      	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
 4d6:	00 97       	sbiw	r24, 0x00	; 0
 4d8:	09 f4       	brne	.+2      	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
 4da:	24 60       	ori	r18, 0x04	; 4
 4dc:	20 97       	sbiw	r28, 0x00	; 0
 4de:	49 f0       	breq	.+18     	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
 4e0:	01 15       	cp	r16, r1
 4e2:	11 05       	cpc	r17, r1
 4e4:	31 f0       	breq	.+12     	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
 4e6:	e1 14       	cp	r14, r1
 4e8:	f1 04       	cpc	r15, r1
 4ea:	19 f0       	breq	.+6      	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
 4ec:	00 97       	sbiw	r24, 0x00	; 0
 4ee:	09 f4       	brne	.+2      	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
 4f0:	28 60       	ori	r18, 0x08	; 8
 4f2:	20 97       	sbiw	r28, 0x00	; 0
 4f4:	49 f0       	breq	.+18     	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
 4f6:	01 15       	cp	r16, r1
 4f8:	11 05       	cpc	r17, r1
 4fa:	31 f4       	brne	.+12     	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
 4fc:	e1 14       	cp	r14, r1
 4fe:	f1 04       	cpc	r15, r1
 500:	19 f4       	brne	.+6      	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
 502:	00 97       	sbiw	r24, 0x00	; 0
 504:	09 f0       	breq	.+2      	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
 506:	20 61       	ori	r18, 0x10	; 16
 508:	20 97       	sbiw	r28, 0x00	; 0
 50a:	49 f4       	brne	.+18     	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
 50c:	01 15       	cp	r16, r1
 50e:	11 05       	cpc	r17, r1
 510:	31 f0       	breq	.+12     	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
 512:	e1 14       	cp	r14, r1
 514:	f1 04       	cpc	r15, r1
 516:	19 f4       	brne	.+6      	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
 518:	00 97       	sbiw	r24, 0x00	; 0
 51a:	09 f0       	breq	.+2      	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
 51c:	20 62       	ori	r18, 0x20	; 32
 51e:	20 97       	sbiw	r28, 0x00	; 0
 520:	49 f0       	breq	.+18     	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
 522:	01 15       	cp	r16, r1
 524:	11 05       	cpc	r17, r1
 526:	31 f0       	breq	.+12     	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
 528:	e1 14       	cp	r14, r1
 52a:	f1 04       	cpc	r15, r1
 52c:	19 f4       	brne	.+6      	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
 52e:	00 97       	sbiw	r24, 0x00	; 0
 530:	09 f0       	breq	.+2      	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
 532:	20 64       	ori	r18, 0x40	; 64
 534:	20 97       	sbiw	r28, 0x00	; 0
 536:	49 f4       	brne	.+18     	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
 538:	01 15       	cp	r16, r1
 53a:	11 05       	cpc	r17, r1
 53c:	31 f4       	brne	.+12     	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
 53e:	e1 14       	cp	r14, r1
 540:	f1 04       	cpc	r15, r1
 542:	19 f0       	breq	.+6      	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
 544:	00 97       	sbiw	r24, 0x00	; 0
 546:	09 f0       	breq	.+2      	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
 548:	20 68       	ori	r18, 0x80	; 128
 54a:	20 97       	sbiw	r28, 0x00	; 0
 54c:	49 f0       	breq	.+18     	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
 54e:	01 15       	cp	r16, r1
 550:	11 05       	cpc	r17, r1
 552:	31 f4       	brne	.+12     	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
 554:	e1 14       	cp	r14, r1
 556:	f1 04       	cpc	r15, r1
 558:	19 f0       	breq	.+6      	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
 55a:	00 97       	sbiw	r24, 0x00	; 0
 55c:	09 f0       	breq	.+2      	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
 55e:	31 60       	ori	r19, 0x01	; 1
 560:	20 97       	sbiw	r28, 0x00	; 0
 562:	49 f4       	brne	.+18     	; 0x576 <__LOCK_REGION_LENGTH__+0x176>
 564:	01 15       	cp	r16, r1
 566:	11 05       	cpc	r17, r1
 568:	31 f0       	breq	.+12     	; 0x576 <__LOCK_REGION_LENGTH__+0x176>
 56a:	e1 14       	cp	r14, r1
 56c:	f1 04       	cpc	r15, r1
 56e:	19 f0       	breq	.+6      	; 0x576 <__LOCK_REGION_LENGTH__+0x176>
 570:	00 97       	sbiw	r24, 0x00	; 0
 572:	09 f0       	breq	.+2      	; 0x576 <__LOCK_REGION_LENGTH__+0x176>
 574:	32 60       	ori	r19, 0x02	; 2
 576:	cd 2b       	or	r28, r29
 578:	39 f0       	breq	.+14     	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
 57a:	01 2b       	or	r16, r17
 57c:	29 f0       	breq	.+10     	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
 57e:	ef 28       	or	r14, r15
 580:	19 f0       	breq	.+6      	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
 582:	89 2b       	or	r24, r25
 584:	09 f0       	breq	.+2      	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
 586:	34 60       	ori	r19, 0x04	; 4
 588:	c2 26       	eor	r12, r18
 58a:	d3 26       	eor	r13, r19
 58c:	e5 01       	movw	r28, r10
 58e:	d9 82       	std	Y+1, r13	; 0x01
 590:	c8 82       	st	Y, r12
 592:	df 91       	pop	r29
 594:	cf 91       	pop	r28
 596:	1f 91       	pop	r17
 598:	0f 91       	pop	r16
 59a:	ff 90       	pop	r15
 59c:	ef 90       	pop	r14
 59e:	df 90       	pop	r13
 5a0:	cf 90       	pop	r12
 5a2:	bf 90       	pop	r11
 5a4:	af 90       	pop	r10
 5a6:	08 95       	ret

000005a8 <halfEncoded>:
 5a8:	cf 92       	push	r12
 5aa:	df 92       	push	r13
 5ac:	ef 92       	push	r14
 5ae:	ff 92       	push	r15
 5b0:	fc 01       	movw	r30, r24
 5b2:	db 01       	movw	r26, r22
 5b4:	20 e0       	ldi	r18, 0x00	; 0
 5b6:	30 e0       	ldi	r19, 0x00	; 0
 5b8:	42 c0       	rjmp	.+132    	; 0x63e <halfEncoded+0x96>
 5ba:	cd 90       	ld	r12, X+
 5bc:	dd 90       	ld	r13, X+
 5be:	ed 90       	ld	r14, X+
 5c0:	fc 90       	ld	r15, X
 5c2:	13 97       	sbiw	r26, 0x03	; 3
 5c4:	c9 01       	movw	r24, r18
 5c6:	88 0f       	add	r24, r24
 5c8:	99 1f       	adc	r25, r25
 5ca:	40 e0       	ldi	r20, 0x00	; 0
 5cc:	50 e0       	ldi	r21, 0x00	; 0
 5ce:	60 e0       	ldi	r22, 0x00	; 0
 5d0:	70 e8       	ldi	r23, 0x80	; 128
 5d2:	04 c0       	rjmp	.+8      	; 0x5dc <halfEncoded+0x34>
 5d4:	76 95       	lsr	r23
 5d6:	67 95       	ror	r22
 5d8:	57 95       	ror	r21
 5da:	47 95       	ror	r20
 5dc:	8a 95       	dec	r24
 5de:	d2 f7       	brpl	.-12     	; 0x5d4 <halfEncoded+0x2c>
 5e0:	4c 21       	and	r20, r12
 5e2:	5d 21       	and	r21, r13
 5e4:	6e 21       	and	r22, r14
 5e6:	7f 21       	and	r23, r15
 5e8:	45 2b       	or	r20, r21
 5ea:	46 2b       	or	r20, r22
 5ec:	47 2b       	or	r20, r23
 5ee:	91 f0       	breq	.+36     	; 0x614 <halfEncoded+0x6c>
 5f0:	4e e0       	ldi	r20, 0x0E	; 14
 5f2:	50 e0       	ldi	r21, 0x00	; 0
 5f4:	42 1b       	sub	r20, r18
 5f6:	53 0b       	sbc	r21, r19
 5f8:	81 e0       	ldi	r24, 0x01	; 1
 5fa:	90 e0       	ldi	r25, 0x00	; 0
 5fc:	02 c0       	rjmp	.+4      	; 0x602 <halfEncoded+0x5a>
 5fe:	88 0f       	add	r24, r24
 600:	99 1f       	adc	r25, r25
 602:	4a 95       	dec	r20
 604:	e2 f7       	brpl	.-8      	; 0x5fe <halfEncoded+0x56>
 606:	40 81       	ld	r20, Z
 608:	51 81       	ldd	r21, Z+1	; 0x01
 60a:	84 2b       	or	r24, r20
 60c:	95 2b       	or	r25, r21
 60e:	91 83       	std	Z+1, r25	; 0x01
 610:	80 83       	st	Z, r24
 612:	13 c0       	rjmp	.+38     	; 0x63a <halfEncoded+0x92>
 614:	4e e0       	ldi	r20, 0x0E	; 14
 616:	50 e0       	ldi	r21, 0x00	; 0
 618:	42 1b       	sub	r20, r18
 61a:	53 0b       	sbc	r21, r19
 61c:	81 e0       	ldi	r24, 0x01	; 1
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	02 c0       	rjmp	.+4      	; 0x626 <halfEncoded+0x7e>
 622:	88 0f       	add	r24, r24
 624:	99 1f       	adc	r25, r25
 626:	4a 95       	dec	r20
 628:	e2 f7       	brpl	.-8      	; 0x622 <halfEncoded+0x7a>
 62a:	80 95       	com	r24
 62c:	90 95       	com	r25
 62e:	40 81       	ld	r20, Z
 630:	51 81       	ldd	r21, Z+1	; 0x01
 632:	84 23       	and	r24, r20
 634:	95 23       	and	r25, r21
 636:	91 83       	std	Z+1, r25	; 0x01
 638:	80 83       	st	Z, r24
 63a:	2f 5f       	subi	r18, 0xFF	; 255
 63c:	3f 4f       	sbci	r19, 0xFF	; 255
 63e:	2f 30       	cpi	r18, 0x0F	; 15
 640:	31 05       	cpc	r19, r1
 642:	0c f4       	brge	.+2      	; 0x646 <halfEncoded+0x9e>
 644:	ba cf       	rjmp	.-140    	; 0x5ba <halfEncoded+0x12>
 646:	ff 90       	pop	r15
 648:	ef 90       	pop	r14
 64a:	df 90       	pop	r13
 64c:	cf 90       	pop	r12
 64e:	08 95       	ret

00000650 <splitCombine>:
 650:	fa 01       	movw	r30, r20
 652:	20 81       	ld	r18, Z
 654:	31 81       	ldd	r19, Z+1	; 0x01
 656:	33 27       	eor	r19, r19
 658:	fb 01       	movw	r30, r22
 65a:	31 83       	std	Z+1, r19	; 0x01
 65c:	20 83       	st	Z, r18
 65e:	fa 01       	movw	r30, r20
 660:	21 81       	ldd	r18, Z+1	; 0x01
 662:	fc 01       	movw	r30, r24
 664:	20 83       	st	Z, r18
 666:	11 82       	std	Z+1, r1	; 0x01
 668:	08 95       	ret

0000066a <recievex10>:
 66a:	8f 92       	push	r8
 66c:	9f 92       	push	r9
 66e:	af 92       	push	r10
 670:	bf 92       	push	r11
 672:	cf 92       	push	r12
 674:	df 92       	push	r13
 676:	ef 92       	push	r14
 678:	ff 92       	push	r15
 67a:	0f 93       	push	r16
 67c:	1f 93       	push	r17
 67e:	cf 93       	push	r28
 680:	df 93       	push	r29
 682:	5c 01       	movw	r10, r24
 684:	4b 01       	movw	r8, r22
 686:	ea 01       	movw	r28, r20
 688:	69 01       	movw	r12, r18
 68a:	b8 01       	movw	r22, r16
 68c:	c9 01       	movw	r24, r18
 68e:	8c df       	rcall	.-232    	; 0x5a8 <halfEncoded>
 690:	be 01       	movw	r22, r28
 692:	c6 01       	movw	r24, r12
 694:	95 de       	rcall	.-726    	; 0x3c0 <hammingDecoding>
 696:	ae 01       	movw	r20, r28
 698:	b4 01       	movw	r22, r8
 69a:	c5 01       	movw	r24, r10
 69c:	d9 df       	rcall	.-78     	; 0x650 <splitCombine>
 69e:	f6 01       	movw	r30, r12
 6a0:	11 82       	std	Z+1, r1	; 0x01
 6a2:	10 82       	st	Z, r1
 6a4:	19 82       	std	Y+1, r1	; 0x01
 6a6:	18 82       	st	Y, r1
 6a8:	f8 01       	movw	r30, r16
 6aa:	10 82       	st	Z, r1
 6ac:	11 82       	std	Z+1, r1	; 0x01
 6ae:	12 82       	std	Z+2, r1	; 0x02
 6b0:	13 82       	std	Z+3, r1	; 0x03
 6b2:	81 e0       	ldi	r24, 0x01	; 1
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	f7 01       	movw	r30, r14
 6b8:	91 83       	std	Z+1, r25	; 0x01
 6ba:	80 83       	st	Z, r24
 6bc:	df 91       	pop	r29
 6be:	cf 91       	pop	r28
 6c0:	1f 91       	pop	r17
 6c2:	0f 91       	pop	r16
 6c4:	ff 90       	pop	r15
 6c6:	ef 90       	pop	r14
 6c8:	df 90       	pop	r13
 6ca:	cf 90       	pop	r12
 6cc:	bf 90       	pop	r11
 6ce:	af 90       	pop	r10
 6d0:	9f 90       	pop	r9
 6d2:	8f 90       	pop	r8
 6d4:	08 95       	ret

000006d6 <__mulshisi3>:
 6d6:	b7 ff       	sbrs	r27, 7
 6d8:	04 c0       	rjmp	.+8      	; 0x6e2 <__muluhisi3>

000006da <__mulohisi3>:
 6da:	03 d0       	rcall	.+6      	; 0x6e2 <__muluhisi3>
 6dc:	82 1b       	sub	r24, r18
 6de:	93 0b       	sbc	r25, r19
 6e0:	08 95       	ret

000006e2 <__muluhisi3>:
 6e2:	09 d0       	rcall	.+18     	; 0x6f6 <__umulhisi3>
 6e4:	a5 9f       	mul	r26, r21
 6e6:	90 0d       	add	r25, r0
 6e8:	b4 9f       	mul	r27, r20
 6ea:	90 0d       	add	r25, r0
 6ec:	a4 9f       	mul	r26, r20
 6ee:	80 0d       	add	r24, r0
 6f0:	91 1d       	adc	r25, r1
 6f2:	11 24       	eor	r1, r1
 6f4:	08 95       	ret

000006f6 <__umulhisi3>:
 6f6:	a2 9f       	mul	r26, r18
 6f8:	b0 01       	movw	r22, r0
 6fa:	b3 9f       	mul	r27, r19
 6fc:	c0 01       	movw	r24, r0
 6fe:	a3 9f       	mul	r26, r19
 700:	70 0d       	add	r23, r0
 702:	81 1d       	adc	r24, r1
 704:	11 24       	eor	r1, r1
 706:	91 1d       	adc	r25, r1
 708:	b2 9f       	mul	r27, r18
 70a:	70 0d       	add	r23, r0
 70c:	81 1d       	adc	r24, r1
 70e:	11 24       	eor	r1, r1
 710:	91 1d       	adc	r25, r1
 712:	08 95       	ret

00000714 <_exit>:
 714:	f8 94       	cli

00000716 <__stop_program>:
 716:	ff cf       	rjmp	.-2      	; 0x716 <__stop_program>
