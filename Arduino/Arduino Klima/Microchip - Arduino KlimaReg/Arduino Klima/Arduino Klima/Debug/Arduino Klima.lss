
Arduino Klima.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  0000064c  000006e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000064c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800202  00800202  000006e2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006e2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000714  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000754  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000153c  00000000  00000000  00000804  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ef4  00000000  00000000  00001d40  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a9d  00000000  00000000  00002c34  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000228  00000000  00000000  000036d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007a2  00000000  00000000  000038fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ab6  00000000  00000000  0000409e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00004b54  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	09 c1       	rjmp	.+530    	; 0x218 <__vector_1>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec e4       	ldi	r30, 0x4C	; 76
  fc:	f6 e0       	ldi	r31, 0x06	; 6
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 30       	cpi	r26, 0x02	; 2
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a2 e0       	ldi	r26, 0x02	; 2
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	af 30       	cpi	r26, 0x0F	; 15
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	10 d0       	rcall	.+32     	; 0x140 <main>
 120:	93 c2       	rjmp	.+1318   	; 0x648 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <StartHeat>:
	}
*/
}
void StartHeat(int hotTime_)
{
	while (hotTime_ > 0)
 124:	04 c0       	rjmp	.+8      	; 0x12e <StartHeat+0xa>
	{
			PORTL = pinHot;
 126:	24 e0       	ldi	r18, 0x04	; 4
 128:	20 93 0b 01 	sts	0x010B, r18	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
			//PORTB |= pinHot;
			hotTime_--;
 12c:	01 97       	sbiw	r24, 0x01	; 1
	}
*/
}
void StartHeat(int hotTime_)
{
	while (hotTime_ > 0)
 12e:	18 16       	cp	r1, r24
 130:	19 06       	cpc	r1, r25
 132:	cc f3       	brlt	.-14     	; 0x126 <StartHeat+0x2>
	{
			PORTL = pinHot;
			//PORTB |= pinHot;
			hotTime_--;
	}
		PORTL &= ~pinHot;
 134:	eb e0       	ldi	r30, 0x0B	; 11
 136:	f1 e0       	ldi	r31, 0x01	; 1
 138:	80 81       	ld	r24, Z
 13a:	8b 7f       	andi	r24, 0xFB	; 251
 13c:	80 83       	st	Z, r24
 13e:	08 95       	ret

00000140 <main>:


int main(void)
{
	// opsæt port/pin
	DDRL = 0xFF;
 140:	8f ef       	ldi	r24, 0xFF	; 255
 142:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__TEXT_REGION_LENGTH__+0x7c010a>
	// 1 pin til hot  - PINA & 0b00001000
	uint32_t blowTime = 0;
	int hotTime = 0;
	int timeMultiplier = 1; // Skal være over 0;

	initPort();
 146:	ed d0       	rcall	.+474    	; 0x322 <initPort>
	initISR();
 148:	e6 d0       	rcall	.+460    	; 0x316 <initISR>
 14a:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <startRecieved>
	
	startRecieved = 0;
 14e:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <datapakkeRecieved>
	datapakkeRecieved = 0x0000;
 152:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <datapakkeRecieved+0x1>
 156:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <datapakkeRecieved+0x2>
 15a:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <datapakkeRecieved+0x3>
 15e:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <addressRecieved+0x1>
	addressRecieved = 0;
 162:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <addressRecieved>
 166:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <commandRecieved+0x1>
	commandRecieved = 0x00;
 16a:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <commandRecieved>
 16e:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <encoded+0x1>
	encoded = 0;
 172:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <encoded>
 176:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <__data_end+0x1>
	combined = 0;
 17a:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <__data_end>
 17e:	81 2c       	mov	r8, r1
{
	// opsæt port/pin
	DDRL = 0xFF;
	// 1 pin til cold - PINA & 0b00000100
	// 1 pin til hot  - PINA & 0b00001000
	uint32_t blowTime = 0;
 180:	91 2c       	mov	r9, r1
 182:	54 01       	movw	r10, r8
 184:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
	combined = 0;
	
	while (1)
	{
		// Modtag x10
		if (count == (dataSIZE+2))
 188:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 18c:	80 97       	sbiw	r24, 0x20	; 32
 18e:	89 f4       	brne	.+34     	; 0x1b2 <main+0x72>
 190:	0f 2e       	mov	r0, r31
			{
			recievex10(&addressRecieved, &commandRecieved, &combined, &encoded, &datapakkeRecieved, &count);
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	ef 2e       	mov	r14, r31
 196:	f2 e0       	ldi	r31, 0x02	; 2
 198:	ff 2e       	mov	r15, r31
 19a:	f0 2d       	mov	r31, r0
 19c:	0a e0       	ldi	r16, 0x0A	; 10
 19e:	12 e0       	ldi	r17, 0x02	; 2
 1a0:	24 e0       	ldi	r18, 0x04	; 4
 1a2:	32 e0       	ldi	r19, 0x02	; 2
 1a4:	42 e0       	ldi	r20, 0x02	; 2
 1a6:	52 e0       	ldi	r21, 0x02	; 2
 1a8:	66 e0       	ldi	r22, 0x06	; 6
 1aa:	72 e0       	ldi	r23, 0x02	; 2
 1ac:	88 e0       	ldi	r24, 0x08	; 8
 1ae:	92 e0       	ldi	r25, 0x02	; 2
 1b0:	15 d2       	rcall	.+1066   	; 0x5dc <recievex10>
 1b2:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <commandRecieved>
		//PORTB = addressRecieved;
		//if (my_adr = addressRecieved)
		
		
		
			switch (commandRecieved)
 1b6:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <commandRecieved+0x1>
 1ba:	8f 30       	cpi	r24, 0x0F	; 15
 1bc:	91 05       	cpc	r25, r1
 1be:	21 f0       	breq	.+8      	; 0x1c8 <main+0x88>
 1c0:	80 3f       	cpi	r24, 0xF0	; 240
 1c2:	91 05       	cpc	r25, r1
 1c4:	29 f0       	breq	.+10     	; 0x1d0 <main+0x90>
 1c6:	0d c0       	rjmp	.+26     	; 0x1e2 <main+0xa2>
				case 0b0000000011110000:
				blowTime = 1000000 * timeMultiplier;
				break;
				case 0b0000000000001111:
				hotTime = 16000000 * timeMultiplier;
				StartHeat(hotTime);
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	94 e2       	ldi	r25, 0x24	; 36
 1cc:	ab df       	rcall	.-170    	; 0x124 <StartHeat>
 1ce:	09 c0       	rjmp	.+18     	; 0x1e2 <main+0xa2>
				break;
 1d0:	0f 2e       	mov	r0, r31
		
		
			switch (commandRecieved)
			{
				case 0b0000000011110000:
				blowTime = 1000000 * timeMultiplier;
 1d2:	f0 e4       	ldi	r31, 0x40	; 64
 1d4:	8f 2e       	mov	r8, r31
 1d6:	f2 e4       	ldi	r31, 0x42	; 66
 1d8:	9f 2e       	mov	r9, r31
 1da:	ff e0       	ldi	r31, 0x0F	; 15
 1dc:	af 2e       	mov	r10, r31
 1de:	b1 2c       	mov	r11, r1
 1e0:	f0 2d       	mov	r31, r0
 1e2:	81 14       	cp	r8, r1
				
				break;
			}
			
			
			if(blowTime > 0)
 1e4:	91 04       	cpc	r9, r1
 1e6:	a1 04       	cpc	r10, r1
 1e8:	b1 04       	cpc	r11, r1
 1ea:	79 f0       	breq	.+30     	; 0x20a <main+0xca>
 1ec:	81 e0       	ldi	r24, 0x01	; 1
			{
				PORTL = pinCold;
 1ee:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
 1f2:	8f e8       	ldi	r24, 0x8F	; 143
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f4:	91 e0       	ldi	r25, 0x01	; 1
 1f6:	01 97       	sbiw	r24, 0x01	; 1
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <main+0xb6>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <main+0xbc>
 1fc:	00 00       	nop
 1fe:	91 e0       	ldi	r25, 0x01	; 1
				_delay_us(100);
				blowTime--;
 200:	89 1a       	sub	r8, r25
 202:	91 08       	sbc	r9, r1
 204:	a1 08       	sbc	r10, r1
 206:	b1 08       	sbc	r11, r1
 208:	02 c0       	rjmp	.+4      	; 0x20e <main+0xce>
 20a:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
			}
			else
			{
				PORTL = 0b00000000;
 20e:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <commandRecieved+0x1>
			}
			
			
		//	addressRecieved = 0;
			commandRecieved = 0;
 212:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <commandRecieved>
 216:	b6 cf       	rjmp	.-148    	; 0x184 <main+0x44>

00000218 <__vector_1>:
			
		
	}
 218:	1f 92       	push	r1




ISR(INT0_vect)
{
 21a:	0f 92       	push	r0
 21c:	0f b6       	in	r0, 0x3f	; 63
 21e:	0f 92       	push	r0
 220:	11 24       	eor	r1, r1
 222:	4f 93       	push	r20
 224:	5f 93       	push	r21
 226:	6f 93       	push	r22
 228:	7f 93       	push	r23
 22a:	8f 93       	push	r24
 22c:	9f 93       	push	r25
 22e:	af 93       	push	r26
 230:	bf 93       	push	r27
 232:	8a e6       	ldi	r24, 0x6A	; 106
 234:	8a 95       	dec	r24
 236:	f1 f7       	brne	.-4      	; 0x234 <__vector_1+0x1c>
 238:	00 c0       	rjmp	.+0      	; 0x23a <__vector_1+0x22>

	_delay_us(20);
	uint8_t inputPin = (PINC & 0x1);
 23a:	86 b1       	in	r24, 0x06	; 6
 23c:	98 2f       	mov	r25, r24
 23e:	91 70       	andi	r25, 0x01	; 1
	uint32_t longInputPin = 0x0000;
	longInputPin|= inputPin;
 240:	49 2f       	mov	r20, r25
 242:	50 e0       	ldi	r21, 0x00	; 0
 244:	60 e0       	ldi	r22, 0x00	; 0
 246:	70 e0       	ldi	r23, 0x00	; 0
	
	if(startRecieved != 0b00001110)
 248:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <startRecieved>
 24c:	8e 30       	cpi	r24, 0x0E	; 14
 24e:	29 f0       	breq	.+10     	; 0x25a <__vector_1+0x42>
	{
		startRecieved |= inputPin;
 250:	89 2b       	or	r24, r25
		startRecieved = startRecieved << 1;
 252:	88 0f       	add	r24, r24
 254:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <startRecieved>
 258:	51 c0       	rjmp	.+162    	; 0x2fc <__vector_1+0xe4>
	}
	else
	{
		if(count <= dataSIZE)
 25a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 25e:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 262:	4f 97       	sbiw	r24, 0x1f	; 31
 264:	14 f5       	brge	.+68     	; 0x2aa <__vector_1+0x92>
		{
			datapakkeRecieved |= longInputPin;
 266:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <datapakkeRecieved>
 26a:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <datapakkeRecieved+0x1>
 26e:	a0 91 0c 02 	lds	r26, 0x020C	; 0x80020c <datapakkeRecieved+0x2>
 272:	b0 91 0d 02 	lds	r27, 0x020D	; 0x80020d <datapakkeRecieved+0x3>
 276:	48 2b       	or	r20, r24
 278:	59 2b       	or	r21, r25
 27a:	6a 2b       	or	r22, r26
 27c:	7b 2b       	or	r23, r27
			datapakkeRecieved = (datapakkeRecieved << 1);
 27e:	44 0f       	add	r20, r20
 280:	55 1f       	adc	r21, r21
 282:	66 1f       	adc	r22, r22
 284:	77 1f       	adc	r23, r23
 286:	40 93 0a 02 	sts	0x020A, r20	; 0x80020a <datapakkeRecieved>
 28a:	50 93 0b 02 	sts	0x020B, r21	; 0x80020b <datapakkeRecieved+0x1>
 28e:	60 93 0c 02 	sts	0x020C, r22	; 0x80020c <datapakkeRecieved+0x2>
 292:	70 93 0d 02 	sts	0x020D, r23	; 0x80020d <datapakkeRecieved+0x3>
			count++;
 296:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 29a:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 29e:	01 96       	adiw	r24, 0x01	; 1
 2a0:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 2a4:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
 2a8:	29 c0       	rjmp	.+82     	; 0x2fc <__vector_1+0xe4>
		}
		else if (count == (dataSIZE+1))
 2aa:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 2ae:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 2b2:	4f 97       	sbiw	r24, 0x1f	; 31
 2b4:	19 f5       	brne	.+70     	; 0x2fc <__vector_1+0xe4>
		{
			datapakkeRecieved = datapakkeRecieved << 2;
 2b6:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <datapakkeRecieved>
 2ba:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <datapakkeRecieved+0x1>
 2be:	a0 91 0c 02 	lds	r26, 0x020C	; 0x80020c <datapakkeRecieved+0x2>
 2c2:	b0 91 0d 02 	lds	r27, 0x020D	; 0x80020d <datapakkeRecieved+0x3>
 2c6:	88 0f       	add	r24, r24
 2c8:	99 1f       	adc	r25, r25
 2ca:	aa 1f       	adc	r26, r26
 2cc:	bb 1f       	adc	r27, r27
 2ce:	88 0f       	add	r24, r24
 2d0:	99 1f       	adc	r25, r25
 2d2:	aa 1f       	adc	r26, r26
 2d4:	bb 1f       	adc	r27, r27
 2d6:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <datapakkeRecieved>
 2da:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <datapakkeRecieved+0x1>
 2de:	a0 93 0c 02 	sts	0x020C, r26	; 0x80020c <datapakkeRecieved+0x2>
 2e2:	b0 93 0d 02 	sts	0x020D, r27	; 0x80020d <datapakkeRecieved+0x3>
			startRecieved = 0;
 2e6:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <startRecieved>
			//PORTB = (datapakkeRecieved);
			count++;
 2ea:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 2ee:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 2f2:	01 96       	adiw	r24, 0x01	; 1
 2f4:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 2f8:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
		}

		
	}

 2fc:	bf 91       	pop	r27
 2fe:	af 91       	pop	r26
 300:	9f 91       	pop	r25
 302:	8f 91       	pop	r24
 304:	7f 91       	pop	r23
 306:	6f 91       	pop	r22
 308:	5f 91       	pop	r21
 30a:	4f 91       	pop	r20
 30c:	0f 90       	pop	r0
 30e:	0f be       	out	0x3f, r0	; 63
 310:	0f 90       	pop	r0
 312:	1f 90       	pop	r1
 314:	18 95       	reti

00000316 <initISR>:
	 //frekvens = 120000hz
	 OCR1A = 66;
	 
	 _delay_ms(1);
	  TCCR1B = 0b00000000;
	  TCCR1A = 0b00000000;
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
 31c:	8d bb       	out	0x1d, r24	; 29
 31e:	78 94       	sei
 320:	08 95       	ret

00000322 <initPort>:
 322:	8f ef       	ldi	r24, 0xFF	; 255
 324:	81 b9       	out	0x01, r24	; 1
 326:	12 b8       	out	0x02, r1	; 2
 328:	84 b9       	out	0x04, r24	; 4
 32a:	15 b8       	out	0x05, r1	; 5
 32c:	17 b8       	out	0x07, r1	; 7
 32e:	18 b8       	out	0x08, r1	; 8
 330:	08 95       	ret

00000332 <hammingDecoding>:
	 
}

void hammingDecoding(uint16_t* str, uint16_t* decoded) // (15,11) Hamming decoding
{
 332:	af 92       	push	r10
 334:	bf 92       	push	r11
 336:	cf 92       	push	r12
 338:	df 92       	push	r13
 33a:	ef 92       	push	r14
 33c:	ff 92       	push	r15
 33e:	0f 93       	push	r16
 340:	1f 93       	push	r17
 342:	cf 93       	push	r28
 344:	df 93       	push	r29
 346:	5b 01       	movw	r10, r22
	*decoded = 0;
 348:	eb 01       	movw	r28, r22
 34a:	19 82       	std	Y+1, r1	; 0x01
 34c:	18 82       	st	Y, r1
	*decoded |= (*str >> 4);
 34e:	fc 01       	movw	r30, r24
 350:	c0 80       	ld	r12, Z
 352:	d1 80       	ldd	r13, Z+1	; 0x01
 354:	d6 94       	lsr	r13
 356:	c7 94       	ror	r12
 358:	d6 94       	lsr	r13
 35a:	c7 94       	ror	r12
 35c:	d6 94       	lsr	r13
 35e:	c7 94       	ror	r12
 360:	d6 94       	lsr	r13
 362:	c7 94       	ror	r12
 364:	d9 82       	std	Y+1, r13	; 0x01
 366:	c8 82       	st	Y, r12

	//Parity bit 1
	uint16_t checkP1 = (0b11011010101 & *decoded);
 368:	d6 01       	movw	r26, r12
 36a:	a5 7d       	andi	r26, 0xD5	; 213
 36c:	b6 70       	andi	r27, 0x06	; 6
	//Parity bit 2
	uint16_t checkP2 = (0b10110110011 & *decoded);
 36e:	f6 01       	movw	r30, r12
 370:	e3 7b       	andi	r30, 0xB3	; 179
 372:	f5 70       	andi	r31, 0x05	; 5
	//Parity bit 3
	uint16_t checkP3 = (0b01110001111 & *decoded);
 374:	a6 01       	movw	r20, r12
 376:	4f 78       	andi	r20, 0x8F	; 143
 378:	53 70       	andi	r21, 0x03	; 3
	//Parity bit 4
	uint16_t checkP4 = (0b00001111111 & *decoded);
 37a:	96 01       	movw	r18, r12
 37c:	2f 77       	andi	r18, 0x7F	; 127
 37e:	33 27       	eor	r19, r19

	//The checkSums, initialized with their parity value
	uint16_t checkSum1 = ((*str & 0b000000000001000) >> 3);
 380:	ec 01       	movw	r28, r24
 382:	88 81       	ld	r24, Y
 384:	99 81       	ldd	r25, Y+1	; 0x01
 386:	83 fb       	bst	r24, 3
 388:	11 27       	eor	r17, r17
 38a:	10 f9       	bld	r17, 0
 38c:	c1 2f       	mov	r28, r17
 38e:	60 e0       	ldi	r22, 0x00	; 0
 390:	d6 2f       	mov	r29, r22
	uint16_t checkSum2 = ((*str & 0b000000000000100) >> 2);
 392:	82 fb       	bst	r24, 2
 394:	00 27       	eor	r16, r16
 396:	00 f9       	bld	r16, 0
 398:	10 e0       	ldi	r17, 0x00	; 0
	uint16_t checkSum3 = ((*str & 0b000000000000010) >> 1);
 39a:	81 fb       	bst	r24, 1
 39c:	ee 24       	eor	r14, r14
 39e:	e0 f8       	bld	r14, 0
 3a0:	f1 2c       	mov	r15, r1
	uint16_t checkSum4 = ((*str & 0b000000000000001) >> 0);
 3a2:	81 70       	andi	r24, 0x01	; 1
 3a4:	99 27       	eor	r25, r25



	while (checkP1)
 3a6:	06 c0       	rjmp	.+12     	; 0x3b4 <hammingDecoding+0x82>
	{
		if (checkP1 & 1)
 3a8:	a0 ff       	sbrs	r26, 0
 3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <hammingDecoding+0x7e>
		{
			checkSum1^= 0b00000001;
 3ac:	61 e0       	ldi	r22, 0x01	; 1
 3ae:	c6 27       	eor	r28, r22
		}
		checkP1 >>= 1;
 3b0:	b6 95       	lsr	r27
 3b2:	a7 95       	ror	r26
	uint16_t checkSum3 = ((*str & 0b000000000000010) >> 1);
	uint16_t checkSum4 = ((*str & 0b000000000000001) >> 0);



	while (checkP1)
 3b4:	10 97       	sbiw	r26, 0x00	; 0
 3b6:	c1 f7       	brne	.-16     	; 0x3a8 <hammingDecoding+0x76>
 3b8:	06 c0       	rjmp	.+12     	; 0x3c6 <hammingDecoding+0x94>
		checkP1 >>= 1;
	}
	
	while (checkP2)
	{
		if (checkP2 & 1)
 3ba:	e0 ff       	sbrs	r30, 0
 3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <hammingDecoding+0x90>
		{
			checkSum2^= 0b00000001;
 3be:	61 e0       	ldi	r22, 0x01	; 1
 3c0:	06 27       	eor	r16, r22
		}
		checkP2 >>= 1;
 3c2:	f6 95       	lsr	r31
 3c4:	e7 95       	ror	r30
			checkSum1^= 0b00000001;
		}
		checkP1 >>= 1;
	}
	
	while (checkP2)
 3c6:	30 97       	sbiw	r30, 0x00	; 0
 3c8:	c1 f7       	brne	.-16     	; 0x3ba <hammingDecoding+0x88>
 3ca:	06 c0       	rjmp	.+12     	; 0x3d8 <hammingDecoding+0xa6>
		checkP2 >>= 1;
	}
	
	while (checkP3)
	{
		if (checkP3 & 1)
 3cc:	40 ff       	sbrs	r20, 0
 3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <hammingDecoding+0xa2>
		{
			checkSum3^= 0b00000001;
 3d0:	e1 e0       	ldi	r30, 0x01	; 1
 3d2:	ee 26       	eor	r14, r30
		}
		checkP3 >>= 1;
 3d4:	56 95       	lsr	r21
 3d6:	47 95       	ror	r20
			checkSum2^= 0b00000001;
		}
		checkP2 >>= 1;
	}
	
	while (checkP3)
 3d8:	41 15       	cp	r20, r1
 3da:	51 05       	cpc	r21, r1
 3dc:	b9 f7       	brne	.-18     	; 0x3cc <hammingDecoding+0x9a>
 3de:	06 c0       	rjmp	.+12     	; 0x3ec <hammingDecoding+0xba>
		checkP3 >>= 1;
	}
	
	while (checkP4)
	{
		if (checkP4 & 1)
 3e0:	20 ff       	sbrs	r18, 0
 3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <hammingDecoding+0xb6>
		{
			checkSum4^= 0b00000001;
 3e4:	f1 e0       	ldi	r31, 0x01	; 1
 3e6:	8f 27       	eor	r24, r31
		}
		checkP4 >>= 1;
 3e8:	36 95       	lsr	r19
 3ea:	27 95       	ror	r18
			checkSum3^= 0b00000001;
		}
		checkP3 >>= 1;
	}
	
	while (checkP4)
 3ec:	21 15       	cp	r18, r1
 3ee:	31 05       	cpc	r19, r1
 3f0:	b9 f7       	brne	.-18     	; 0x3e0 <hammingDecoding+0xae>
	//errors found
	uint16_t error = 0;


	//Check for each bit in message, if an error, add to error array
	if (checkSum1 && checkSum2 && !checkSum3 && !checkSum4)	//m1
 3f2:	20 97       	sbiw	r28, 0x00	; 0
 3f4:	59 f0       	breq	.+22     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3f6:	01 15       	cp	r16, r1
 3f8:	11 05       	cpc	r17, r1
 3fa:	59 f0       	breq	.+22     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 3fc:	e1 14       	cp	r14, r1
 3fe:	f1 04       	cpc	r15, r1
 400:	59 f4       	brne	.+22     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 402:	00 97       	sbiw	r24, 0x00	; 0
 404:	61 f0       	breq	.+24     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
		}
		checkP4 >>= 1;
	}

	//errors found
	uint16_t error = 0;
 406:	20 e0       	ldi	r18, 0x00	; 0
 408:	30 e0       	ldi	r19, 0x00	; 0
 40a:	0b c0       	rjmp	.+22     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 40c:	20 e0       	ldi	r18, 0x00	; 0
 40e:	30 e0       	ldi	r19, 0x00	; 0
 410:	08 c0       	rjmp	.+16     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 412:	20 e0       	ldi	r18, 0x00	; 0
 414:	30 e0       	ldi	r19, 0x00	; 0
 416:	05 c0       	rjmp	.+10     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 418:	20 e0       	ldi	r18, 0x00	; 0
 41a:	30 e0       	ldi	r19, 0x00	; 0
 41c:	02 c0       	rjmp	.+4      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>


	//Check for each bit in message, if an error, add to error array
	if (checkSum1 && checkSum2 && !checkSum3 && !checkSum4)	//m1
	{
		error |= 1 << 0;
 41e:	21 e0       	ldi	r18, 0x01	; 1
 420:	30 e0       	ldi	r19, 0x00	; 0
	}
	if (checkSum1 && !checkSum2 && checkSum3 && !checkSum4)	//m2
 422:	20 97       	sbiw	r28, 0x00	; 0
 424:	49 f0       	breq	.+18     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 426:	01 15       	cp	r16, r1
 428:	11 05       	cpc	r17, r1
 42a:	31 f4       	brne	.+12     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 42c:	e1 14       	cp	r14, r1
 42e:	f1 04       	cpc	r15, r1
 430:	19 f0       	breq	.+6      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 432:	00 97       	sbiw	r24, 0x00	; 0
 434:	09 f4       	brne	.+2      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
	{
		error |= 1 << 1;
 436:	22 60       	ori	r18, 0x02	; 2
	}
	if (!checkSum1 && checkSum2 && checkSum3 && !checkSum4)	//m3
 438:	20 97       	sbiw	r28, 0x00	; 0
 43a:	49 f4       	brne	.+18     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 43c:	01 15       	cp	r16, r1
 43e:	11 05       	cpc	r17, r1
 440:	31 f0       	breq	.+12     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 442:	e1 14       	cp	r14, r1
 444:	f1 04       	cpc	r15, r1
 446:	19 f0       	breq	.+6      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 448:	00 97       	sbiw	r24, 0x00	; 0
 44a:	09 f4       	brne	.+2      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
	{
		error |= 1 << 2;
 44c:	24 60       	ori	r18, 0x04	; 4
	}
	if (checkSum1 && checkSum2 && checkSum3 && !checkSum4)	//m4
 44e:	20 97       	sbiw	r28, 0x00	; 0
 450:	49 f0       	breq	.+18     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 452:	01 15       	cp	r16, r1
 454:	11 05       	cpc	r17, r1
 456:	31 f0       	breq	.+12     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 458:	e1 14       	cp	r14, r1
 45a:	f1 04       	cpc	r15, r1
 45c:	19 f0       	breq	.+6      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 45e:	00 97       	sbiw	r24, 0x00	; 0
 460:	09 f4       	brne	.+2      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
	{
		error |= 1 << 3;
 462:	28 60       	ori	r18, 0x08	; 8
	}
	if (checkSum1 && !checkSum2 && !checkSum3 && checkSum4)	//m5
 464:	20 97       	sbiw	r28, 0x00	; 0
 466:	49 f0       	breq	.+18     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 468:	01 15       	cp	r16, r1
 46a:	11 05       	cpc	r17, r1
 46c:	31 f4       	brne	.+12     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 46e:	e1 14       	cp	r14, r1
 470:	f1 04       	cpc	r15, r1
 472:	19 f4       	brne	.+6      	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 474:	00 97       	sbiw	r24, 0x00	; 0
 476:	09 f0       	breq	.+2      	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
	{
		error |= 1 << 4;
 478:	20 61       	ori	r18, 0x10	; 16
	}
	if (!checkSum1 && checkSum2 && !checkSum3 && checkSum4)	//m6
 47a:	20 97       	sbiw	r28, 0x00	; 0
 47c:	49 f4       	brne	.+18     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 47e:	01 15       	cp	r16, r1
 480:	11 05       	cpc	r17, r1
 482:	31 f0       	breq	.+12     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 484:	e1 14       	cp	r14, r1
 486:	f1 04       	cpc	r15, r1
 488:	19 f4       	brne	.+6      	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 48a:	00 97       	sbiw	r24, 0x00	; 0
 48c:	09 f0       	breq	.+2      	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
	{
		error |= 1 << 5;
 48e:	20 62       	ori	r18, 0x20	; 32
	}
	if (checkSum1 && checkSum2 && !checkSum3 && checkSum4)	//m7
 490:	20 97       	sbiw	r28, 0x00	; 0
 492:	49 f0       	breq	.+18     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 494:	01 15       	cp	r16, r1
 496:	11 05       	cpc	r17, r1
 498:	31 f0       	breq	.+12     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 49a:	e1 14       	cp	r14, r1
 49c:	f1 04       	cpc	r15, r1
 49e:	19 f4       	brne	.+6      	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 4a0:	00 97       	sbiw	r24, 0x00	; 0
 4a2:	09 f0       	breq	.+2      	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
	{
		error |= 1 << 6;
 4a4:	20 64       	ori	r18, 0x40	; 64
	}
	if (!checkSum1 && !checkSum2 && checkSum3 && checkSum4)	//m8
 4a6:	20 97       	sbiw	r28, 0x00	; 0
 4a8:	49 f4       	brne	.+18     	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
 4aa:	01 15       	cp	r16, r1
 4ac:	11 05       	cpc	r17, r1
 4ae:	31 f4       	brne	.+12     	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
 4b0:	e1 14       	cp	r14, r1
 4b2:	f1 04       	cpc	r15, r1
 4b4:	19 f0       	breq	.+6      	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
 4b6:	00 97       	sbiw	r24, 0x00	; 0
 4b8:	09 f0       	breq	.+2      	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
	{
		error |= 1 << 7;
 4ba:	20 68       	ori	r18, 0x80	; 128
	}
	if (checkSum1 && !checkSum2 && checkSum3 && checkSum4)	//m9
 4bc:	20 97       	sbiw	r28, 0x00	; 0
 4be:	49 f0       	breq	.+18     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
 4c0:	01 15       	cp	r16, r1
 4c2:	11 05       	cpc	r17, r1
 4c4:	31 f4       	brne	.+12     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
 4c6:	e1 14       	cp	r14, r1
 4c8:	f1 04       	cpc	r15, r1
 4ca:	19 f0       	breq	.+6      	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
 4cc:	00 97       	sbiw	r24, 0x00	; 0
 4ce:	09 f0       	breq	.+2      	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
	{
		error |= 1 << 8;
 4d0:	31 60       	ori	r19, 0x01	; 1
	}
	if (!checkSum1 && checkSum2 && checkSum3 && checkSum4)	//m10
 4d2:	20 97       	sbiw	r28, 0x00	; 0
 4d4:	49 f4       	brne	.+18     	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
 4d6:	01 15       	cp	r16, r1
 4d8:	11 05       	cpc	r17, r1
 4da:	31 f0       	breq	.+12     	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
 4dc:	e1 14       	cp	r14, r1
 4de:	f1 04       	cpc	r15, r1
 4e0:	19 f0       	breq	.+6      	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
 4e2:	00 97       	sbiw	r24, 0x00	; 0
 4e4:	09 f0       	breq	.+2      	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
	{
		error |= 1 << 9;
 4e6:	32 60       	ori	r19, 0x02	; 2
	}
	if (checkSum1 && checkSum2 && checkSum3 && checkSum4)	//m11
 4e8:	cd 2b       	or	r28, r29
 4ea:	39 f0       	breq	.+14     	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
 4ec:	01 2b       	or	r16, r17
 4ee:	29 f0       	breq	.+10     	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
 4f0:	ef 28       	or	r14, r15
 4f2:	19 f0       	breq	.+6      	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
 4f4:	89 2b       	or	r24, r25
 4f6:	09 f0       	breq	.+2      	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
	{
		error |= 1 << 10;
 4f8:	34 60       	ori	r19, 0x04	; 4
	}

	//Add the error array to the decoded message, flipping any found error.
	*decoded ^= error;
 4fa:	c2 26       	eor	r12, r18
 4fc:	d3 26       	eor	r13, r19
 4fe:	e5 01       	movw	r28, r10
 500:	d9 82       	std	Y+1, r13	; 0x01
 502:	c8 82       	st	Y, r12

}
 504:	df 91       	pop	r29
 506:	cf 91       	pop	r28
 508:	1f 91       	pop	r17
 50a:	0f 91       	pop	r16
 50c:	ff 90       	pop	r15
 50e:	ef 90       	pop	r14
 510:	df 90       	pop	r13
 512:	cf 90       	pop	r12
 514:	bf 90       	pop	r11
 516:	af 90       	pop	r10
 518:	08 95       	ret

0000051a <halfEncoded>:

void halfEncoded(uint16_t* encoded, uint32_t* datapakke)
{
 51a:	cf 92       	push	r12
 51c:	df 92       	push	r13
 51e:	ef 92       	push	r14
 520:	ff 92       	push	r15
 522:	fc 01       	movw	r30, r24
 524:	db 01       	movw	r26, r22

	for (int i = 0; i < 15; i++)
 526:	20 e0       	ldi	r18, 0x00	; 0
 528:	30 e0       	ldi	r19, 0x00	; 0
 52a:	42 c0       	rjmp	.+132    	; 0x5b0 <halfEncoded+0x96>
	{
		if(*datapakke & (0b10000000000000000000000000000000 >> (i * 2)))
 52c:	cd 90       	ld	r12, X+
 52e:	dd 90       	ld	r13, X+
 530:	ed 90       	ld	r14, X+
 532:	fc 90       	ld	r15, X
 534:	13 97       	sbiw	r26, 0x03	; 3
 536:	c9 01       	movw	r24, r18
 538:	88 0f       	add	r24, r24
 53a:	99 1f       	adc	r25, r25
 53c:	40 e0       	ldi	r20, 0x00	; 0
 53e:	50 e0       	ldi	r21, 0x00	; 0
 540:	60 e0       	ldi	r22, 0x00	; 0
 542:	70 e8       	ldi	r23, 0x80	; 128
 544:	04 c0       	rjmp	.+8      	; 0x54e <halfEncoded+0x34>
 546:	76 95       	lsr	r23
 548:	67 95       	ror	r22
 54a:	57 95       	ror	r21
 54c:	47 95       	ror	r20
 54e:	8a 95       	dec	r24
 550:	d2 f7       	brpl	.-12     	; 0x546 <halfEncoded+0x2c>
 552:	4c 21       	and	r20, r12
 554:	5d 21       	and	r21, r13
 556:	6e 21       	and	r22, r14
 558:	7f 21       	and	r23, r15
 55a:	45 2b       	or	r20, r21
 55c:	46 2b       	or	r20, r22
 55e:	47 2b       	or	r20, r23
 560:	91 f0       	breq	.+36     	; 0x586 <halfEncoded+0x6c>
		*encoded |=  1 << (14-i);
 562:	4e e0       	ldi	r20, 0x0E	; 14
 564:	50 e0       	ldi	r21, 0x00	; 0
 566:	42 1b       	sub	r20, r18
 568:	53 0b       	sbc	r21, r19
 56a:	81 e0       	ldi	r24, 0x01	; 1
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	02 c0       	rjmp	.+4      	; 0x574 <halfEncoded+0x5a>
 570:	88 0f       	add	r24, r24
 572:	99 1f       	adc	r25, r25
 574:	4a 95       	dec	r20
 576:	e2 f7       	brpl	.-8      	; 0x570 <halfEncoded+0x56>
 578:	40 81       	ld	r20, Z
 57a:	51 81       	ldd	r21, Z+1	; 0x01
 57c:	84 2b       	or	r24, r20
 57e:	95 2b       	or	r25, r21
 580:	91 83       	std	Z+1, r25	; 0x01
 582:	80 83       	st	Z, r24
 584:	13 c0       	rjmp	.+38     	; 0x5ac <halfEncoded+0x92>
		
		else *encoded &= ~(1 << (14-i));
 586:	4e e0       	ldi	r20, 0x0E	; 14
 588:	50 e0       	ldi	r21, 0x00	; 0
 58a:	42 1b       	sub	r20, r18
 58c:	53 0b       	sbc	r21, r19
 58e:	81 e0       	ldi	r24, 0x01	; 1
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	02 c0       	rjmp	.+4      	; 0x598 <halfEncoded+0x7e>
 594:	88 0f       	add	r24, r24
 596:	99 1f       	adc	r25, r25
 598:	4a 95       	dec	r20
 59a:	e2 f7       	brpl	.-8      	; 0x594 <halfEncoded+0x7a>
 59c:	80 95       	com	r24
 59e:	90 95       	com	r25
 5a0:	40 81       	ld	r20, Z
 5a2:	51 81       	ldd	r21, Z+1	; 0x01
 5a4:	84 23       	and	r24, r20
 5a6:	95 23       	and	r25, r21
 5a8:	91 83       	std	Z+1, r25	; 0x01
 5aa:	80 83       	st	Z, r24
}

void halfEncoded(uint16_t* encoded, uint32_t* datapakke)
{

	for (int i = 0; i < 15; i++)
 5ac:	2f 5f       	subi	r18, 0xFF	; 255
 5ae:	3f 4f       	sbci	r19, 0xFF	; 255
 5b0:	2f 30       	cpi	r18, 0x0F	; 15
 5b2:	31 05       	cpc	r19, r1
 5b4:	0c f4       	brge	.+2      	; 0x5b8 <halfEncoded+0x9e>
 5b6:	ba cf       	rjmp	.-140    	; 0x52c <halfEncoded+0x12>
		if(*datapakke & (0b10000000000000000000000000000000 >> (i * 2)))
		*encoded |=  1 << (14-i);
		
		else *encoded &= ~(1 << (14-i));
	}
}
 5b8:	ff 90       	pop	r15
 5ba:	ef 90       	pop	r14
 5bc:	df 90       	pop	r13
 5be:	cf 90       	pop	r12
 5c0:	08 95       	ret

000005c2 <splitCombine>:
}

void splitCombine(uint16_t* adr, uint16_t* com, uint16_t* combined) //Splits a combined int back into the address and command
{

	*com = (*combined & 0b0000000011111111);
 5c2:	fa 01       	movw	r30, r20
 5c4:	20 81       	ld	r18, Z
 5c6:	31 81       	ldd	r19, Z+1	; 0x01
 5c8:	33 27       	eor	r19, r19
 5ca:	fb 01       	movw	r30, r22
 5cc:	31 83       	std	Z+1, r19	; 0x01
 5ce:	20 83       	st	Z, r18

	*adr = (*combined >> 8);
 5d0:	fa 01       	movw	r30, r20
 5d2:	21 81       	ldd	r18, Z+1	; 0x01
 5d4:	fc 01       	movw	r30, r24
 5d6:	20 83       	st	Z, r18
 5d8:	11 82       	std	Z+1, r1	; 0x01
 5da:	08 95       	ret

000005dc <recievex10>:
		else *encoded &= ~(1 << (14-i));
	}
}

void recievex10(uint16_t* adr, uint16_t* com, uint16_t* combined, uint16_t* encoded, uint32_t* datapakke, volatile int* counterPtr)
{
 5dc:	8f 92       	push	r8
 5de:	9f 92       	push	r9
 5e0:	af 92       	push	r10
 5e2:	bf 92       	push	r11
 5e4:	cf 92       	push	r12
 5e6:	df 92       	push	r13
 5e8:	ef 92       	push	r14
 5ea:	ff 92       	push	r15
 5ec:	0f 93       	push	r16
 5ee:	1f 93       	push	r17
 5f0:	cf 93       	push	r28
 5f2:	df 93       	push	r29
 5f4:	5c 01       	movw	r10, r24
 5f6:	4b 01       	movw	r8, r22
 5f8:	ea 01       	movw	r28, r20
 5fa:	69 01       	movw	r12, r18
	
	
	halfEncoded(encoded, datapakke);
 5fc:	b8 01       	movw	r22, r16
 5fe:	c9 01       	movw	r24, r18
 600:	8c df       	rcall	.-232    	; 0x51a <halfEncoded>
	
	hammingDecoding(encoded, combined);
 602:	be 01       	movw	r22, r28
 604:	c6 01       	movw	r24, r12
 606:	95 de       	rcall	.-726    	; 0x332 <hammingDecoding>
	
	splitCombine(adr, com, combined);
 608:	ae 01       	movw	r20, r28
 60a:	b4 01       	movw	r22, r8
 60c:	c5 01       	movw	r24, r10
 60e:	d9 df       	rcall	.-78     	; 0x5c2 <splitCombine>
	
	*encoded = 0;
 610:	f6 01       	movw	r30, r12
 612:	11 82       	std	Z+1, r1	; 0x01
 614:	10 82       	st	Z, r1
	*combined = 0;
 616:	19 82       	std	Y+1, r1	; 0x01
 618:	18 82       	st	Y, r1
	*datapakke = 0;
 61a:	f8 01       	movw	r30, r16
 61c:	10 82       	st	Z, r1
 61e:	11 82       	std	Z+1, r1	; 0x01
 620:	12 82       	std	Z+2, r1	; 0x02
 622:	13 82       	std	Z+3, r1	; 0x03
	*counterPtr = 1;
 624:	81 e0       	ldi	r24, 0x01	; 1
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	f7 01       	movw	r30, r14
 62a:	91 83       	std	Z+1, r25	; 0x01
 62c:	80 83       	st	Z, r24
	
}
 62e:	df 91       	pop	r29
 630:	cf 91       	pop	r28
 632:	1f 91       	pop	r17
 634:	0f 91       	pop	r16
 636:	ff 90       	pop	r15
 638:	ef 90       	pop	r14
 63a:	df 90       	pop	r13
 63c:	cf 90       	pop	r12
 63e:	bf 90       	pop	r11
 640:	af 90       	pop	r10
 642:	9f 90       	pop	r9
 644:	8f 90       	pop	r8
 646:	08 95       	ret

00000648 <_exit>:
 648:	f8 94       	cli

0000064a <__stop_program>:
 64a:	ff cf       	rjmp	.-2      	; 0x64a <__stop_program>
