
lockArd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800200  000006b8  0000074c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800204  00800204  00000750  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000750  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000780  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  000007c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015d1  00000000  00000000  00000868  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f33  00000000  00000000  00001e39  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a79  00000000  00000000  00002d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000280  00000000  00000000  000037e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000071d  00000000  00000000  00003a68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000dd0  00000000  00000000  00004185  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00004f55  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8f c0       	rjmp	.+286    	; 0x124 <__vector_1>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e8 eb       	ldi	r30, 0xB8	; 184
  fc:	f6 e0       	ldi	r31, 0x06	; 6
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a4 30       	cpi	r26, 0x04	; 4
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a4 e0       	ldi	r26, 0x04	; 4
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a2 31       	cpi	r26, 0x12	; 18
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	b2 d0       	rcall	.+356    	; 0x284 <main>
 120:	c9 c2       	rjmp	.+1426   	; 0x6b4 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <__vector_1>:
}



ISR(INT0_vect)
{
 124:	1f 92       	push	r1
 126:	0f 92       	push	r0
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	0f 92       	push	r0
 12c:	11 24       	eor	r1, r1
 12e:	0f 93       	push	r16
 130:	1f 93       	push	r17
 132:	2f 93       	push	r18
 134:	3f 93       	push	r19
 136:	4f 93       	push	r20
 138:	5f 93       	push	r21
 13a:	6f 93       	push	r22
 13c:	7f 93       	push	r23
 13e:	8f 93       	push	r24
 140:	9f 93       	push	r25
 142:	af 93       	push	r26
 144:	bf 93       	push	r27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 146:	0a e6       	ldi	r16, 0x6A	; 106
 148:	0a 95       	dec	r16
 14a:	f1 f7       	brne	.-4      	; 0x148 <__vector_1+0x24>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <__vector_1+0x2a>

	_delay_us(20);
	uint8_t inputPin = (PINC & 0x1);
 14e:	86 b1       	in	r24, 0x06	; 6
 150:	98 2f       	mov	r25, r24
 152:	91 70       	andi	r25, 0x01	; 1
	uint32_t longInputPin = 0x0000;
	longInputPin|= inputPin;
	
	if(startRecieved != 0b00001110)
 154:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <startRecieved>
 158:	8e 30       	cpi	r24, 0x0E	; 14
 15a:	29 f0       	breq	.+10     	; 0x166 <__vector_1+0x42>
	{
		startRecieved |= inputPin;
		startRecieved = startRecieved << 1;
 15c:	89 2b       	or	r24, r25
 15e:	88 0f       	add	r24, r24
 160:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <startRecieved>
 164:	53 c0       	rjmp	.+166    	; 0x20c <__vector_1+0xe8>
	}
	else
	{
		if(count <= dataSIZE)
 166:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <count>
 16a:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <count+0x1>
 16e:	2f 31       	cpi	r18, 0x1F	; 31
 170:	31 05       	cpc	r19, r1
 172:	1c f5       	brge	.+70     	; 0x1ba <__vector_1+0x96>
		{
			datapakkeRecieved |= longInputPin;
			datapakkeRecieved = (datapakkeRecieved << 1);
 174:	40 91 0d 02 	lds	r20, 0x020D	; 0x80020d <datapakkeRecieved>
 178:	50 91 0e 02 	lds	r21, 0x020E	; 0x80020e <datapakkeRecieved+0x1>
 17c:	60 91 0f 02 	lds	r22, 0x020F	; 0x80020f <datapakkeRecieved+0x2>
 180:	70 91 10 02 	lds	r23, 0x0210	; 0x800210 <datapakkeRecieved+0x3>
 184:	8a 01       	movw	r16, r20
 186:	9b 01       	movw	r18, r22
 188:	09 2b       	or	r16, r25
 18a:	d9 01       	movw	r26, r18
 18c:	c8 01       	movw	r24, r16
 18e:	88 0f       	add	r24, r24
 190:	99 1f       	adc	r25, r25
 192:	aa 1f       	adc	r26, r26
 194:	bb 1f       	adc	r27, r27
 196:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <datapakkeRecieved>
 19a:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <datapakkeRecieved+0x1>
 19e:	a0 93 0f 02 	sts	0x020F, r26	; 0x80020f <datapakkeRecieved+0x2>
 1a2:	b0 93 10 02 	sts	0x0210, r27	; 0x800210 <datapakkeRecieved+0x3>
			count++;
 1a6:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <count>
 1aa:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <count+0x1>
 1ae:	01 96       	adiw	r24, 0x01	; 1
 1b0:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <count+0x1>
 1b4:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <count>
 1b8:	29 c0       	rjmp	.+82     	; 0x20c <__vector_1+0xe8>
		}
		else if (count == (dataSIZE+1))
 1ba:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <count>
 1be:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <count+0x1>
 1c2:	4f 97       	sbiw	r24, 0x1f	; 31
 1c4:	19 f5       	brne	.+70     	; 0x20c <__vector_1+0xe8>
		{
			datapakkeRecieved = datapakkeRecieved << 2;
 1c6:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <datapakkeRecieved>
 1ca:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <datapakkeRecieved+0x1>
 1ce:	a0 91 0f 02 	lds	r26, 0x020F	; 0x80020f <datapakkeRecieved+0x2>
 1d2:	b0 91 10 02 	lds	r27, 0x0210	; 0x800210 <datapakkeRecieved+0x3>
 1d6:	88 0f       	add	r24, r24
 1d8:	99 1f       	adc	r25, r25
 1da:	aa 1f       	adc	r26, r26
 1dc:	bb 1f       	adc	r27, r27
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	aa 1f       	adc	r26, r26
 1e4:	bb 1f       	adc	r27, r27
 1e6:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <datapakkeRecieved>
 1ea:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <datapakkeRecieved+0x1>
 1ee:	a0 93 0f 02 	sts	0x020F, r26	; 0x80020f <datapakkeRecieved+0x2>
 1f2:	b0 93 10 02 	sts	0x0210, r27	; 0x800210 <datapakkeRecieved+0x3>
			startRecieved = 0;
 1f6:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <startRecieved>
			count++;
 1fa:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <count>
 1fe:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <count+0x1>
 202:	01 96       	adiw	r24, 0x01	; 1
 204:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <count+0x1>
 208:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <count>
		}

		
	}

}
 20c:	bf 91       	pop	r27
 20e:	af 91       	pop	r26
 210:	9f 91       	pop	r25
 212:	8f 91       	pop	r24
 214:	7f 91       	pop	r23
 216:	6f 91       	pop	r22
 218:	5f 91       	pop	r21
 21a:	4f 91       	pop	r20
 21c:	3f 91       	pop	r19
 21e:	2f 91       	pop	r18
 220:	1f 91       	pop	r17
 222:	0f 91       	pop	r16
 224:	0f 90       	pop	r0
 226:	0f be       	out	0x3f, r0	; 63
 228:	0f 90       	pop	r0
 22a:	1f 90       	pop	r1
 22c:	18 95       	reti

0000022e <setCode>:
void setCode(uint16_t command)
{
	uint8_t newCode = (uint8_t) command;
	newCode &= 0b00001111;
	
	PORTA |= newCode;
 22e:	92 b1       	in	r25, 0x02	; 2
 230:	8f 70       	andi	r24, 0x0F	; 15
 232:	98 2b       	or	r25, r24
 234:	92 b9       	out	0x02, r25	; 2
	PORTB = PORTA; //For testing, can delete
 236:	82 b1       	in	r24, 0x02	; 2
 238:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 23a:	2f ef       	ldi	r18, 0xFF	; 255
 23c:	81 ee       	ldi	r24, 0xE1	; 225
 23e:	94 e0       	ldi	r25, 0x04	; 4
 240:	21 50       	subi	r18, 0x01	; 1
 242:	80 40       	sbci	r24, 0x00	; 0
 244:	90 40       	sbci	r25, 0x00	; 0
 246:	e1 f7       	brne	.-8      	; 0x240 <setCode+0x12>
 248:	00 c0       	rjmp	.+0      	; 0x24a <setCode+0x1c>
 24a:	00 00       	nop
	_delay_ms(100);
	
	PORTA |= 0b10000000;
 24c:	17 9a       	sbi	0x02, 7	; 2
	PORTB = PORTA; //For testing, can delete
 24e:	82 b1       	in	r24, 0x02	; 2
 250:	85 b9       	out	0x05, r24	; 5
 252:	2f ef       	ldi	r18, 0xFF	; 255
 254:	81 ee       	ldi	r24, 0xE1	; 225
 256:	94 e0       	ldi	r25, 0x04	; 4
 258:	21 50       	subi	r18, 0x01	; 1
 25a:	80 40       	sbci	r24, 0x00	; 0
 25c:	90 40       	sbci	r25, 0x00	; 0
 25e:	e1 f7       	brne	.-8      	; 0x258 <setCode+0x2a>
 260:	00 c0       	rjmp	.+0      	; 0x262 <setCode+0x34>
 262:	00 00       	nop
	_delay_ms(100);
	
	PORTA &= 0b01111111;
 264:	17 98       	cbi	0x02, 7	; 2
	PORTB = PORTA; //For testing, can delete
 266:	82 b1       	in	r24, 0x02	; 2
 268:	85 b9       	out	0x05, r24	; 5
 26a:	2f ef       	ldi	r18, 0xFF	; 255
 26c:	81 ee       	ldi	r24, 0xE1	; 225
 26e:	94 e0       	ldi	r25, 0x04	; 4
 270:	21 50       	subi	r18, 0x01	; 1
 272:	80 40       	sbci	r24, 0x00	; 0
 274:	90 40       	sbci	r25, 0x00	; 0
 276:	e1 f7       	brne	.-8      	; 0x270 <setCode+0x42>
 278:	00 c0       	rjmp	.+0      	; 0x27a <setCode+0x4c>
 27a:	00 00       	nop
	_delay_ms(100);
	
	PORTA = 0b00000000;
 27c:	12 b8       	out	0x02, r1	; 2
	PORTB = PORTA; //For testing, can delete
 27e:	82 b1       	in	r24, 0x02	; 2
 280:	85 b9       	out	0x05, r24	; 5
 282:	08 95       	ret

00000284 <main>:


int main(void)
{
	
	DDRA = 0xFF;
 284:	8f ef       	ldi	r24, 0xFF	; 255
 286:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x00;
 288:	12 b8       	out	0x02, r1	; 2
	DDRB = 0xFF; //For testing, can delete
 28a:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00; //For testing, can delete
 28c:	15 b8       	out	0x05, r1	; 5
	
	initPort();
 28e:	3e d0       	rcall	.+124    	; 0x30c <initPort>
	initISR();
 290:	37 d0       	rcall	.+110    	; 0x300 <initISR>
 292:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <count>
	//commandRecieved = 0b0000000010001100; //For testing only
	
	while (1) 
    {
		
		if (count == (dataSIZE+2))
 296:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <count+0x1>
 29a:	80 97       	sbiw	r24, 0x20	; 32
 29c:	89 f4       	brne	.+34     	; 0x2c0 <main+0x3c>
 29e:	0f 2e       	mov	r0, r31
		{
			recievex10(&addressRecieved, &commandRecieved, &combined, &encoded, &datapakkeRecieved, &count);
 2a0:	f2 e0       	ldi	r31, 0x02	; 2
 2a2:	ef 2e       	mov	r14, r31
 2a4:	f2 e0       	ldi	r31, 0x02	; 2
 2a6:	ff 2e       	mov	r15, r31
 2a8:	f0 2d       	mov	r31, r0
 2aa:	0d e0       	ldi	r16, 0x0D	; 13
 2ac:	12 e0       	ldi	r17, 0x02	; 2
 2ae:	27 e0       	ldi	r18, 0x07	; 7
 2b0:	32 e0       	ldi	r19, 0x02	; 2
 2b2:	45 e0       	ldi	r20, 0x05	; 5
 2b4:	52 e0       	ldi	r21, 0x02	; 2
 2b6:	69 e0       	ldi	r22, 0x09	; 9
 2b8:	72 e0       	ldi	r23, 0x02	; 2
 2ba:	8b e0       	ldi	r24, 0x0B	; 11
 2bc:	92 e0       	ldi	r25, 0x02	; 2
 2be:	be d1       	rcall	.+892    	; 0x63c <recievex10>
 2c0:	20 91 0b 02 	lds	r18, 0x020B	; 0x80020b <addressRecieved>
		}
		
		if(addressRecieved == myAddress)
 2c4:	30 91 0c 02 	lds	r19, 0x020C	; 0x80020c <addressRecieved+0x1>
 2c8:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 2cc:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 2d0:	28 17       	cp	r18, r24
 2d2:	39 07       	cpc	r19, r25
 2d4:	f1 f6       	brne	.-68     	; 0x292 <main+0xe>
 2d6:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <commandRecieved>
		{
			changeCode = (commandRecieved & 0x80) >>7;
 2da:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <commandRecieved+0x1>
 2de:	87 fb       	bst	r24, 7
 2e0:	22 27       	eor	r18, r18
 2e2:	20 f9       	bld	r18, 0
 2e4:	20 93 04 02 	sts	0x0204, r18	; 0x800204 <__data_end>
			
			switch(changeCode)
 2e8:	21 30       	cpi	r18, 0x01	; 1
 2ea:	09 f4       	brne	.+2      	; 0x2ee <main+0x6a>
			{
				case 1:
				setCode(commandRecieved);
 2ec:	a0 df       	rcall	.-192    	; 0x22e <setCode>
 2ee:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <addressRecieved+0x1>
				break;

			}	
			
			
			addressRecieved = 0;
 2f2:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <addressRecieved>
 2f6:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <commandRecieved+0x1>
			commandRecieved = 0;
 2fa:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <commandRecieved>
 2fe:	c9 cf       	rjmp	.-110    	; 0x292 <main+0xe>

00000300 <initISR>:
 300:	81 e0       	ldi	r24, 0x01	; 1
	 //frekvens = 120000hz
	 OCR1A = 66;
	 
	 _delay_ms(1);
	  TCCR1B = 0b00000000;
	  TCCR1A = 0b00000000;
 302:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
 306:	8d bb       	out	0x1d, r24	; 29
 308:	78 94       	sei
 30a:	08 95       	ret

0000030c <initPort>:
 30c:	8f ef       	ldi	r24, 0xFF	; 255
 30e:	81 b9       	out	0x01, r24	; 1
 310:	12 b8       	out	0x02, r1	; 2
 312:	84 b9       	out	0x04, r24	; 4
 314:	15 b8       	out	0x05, r1	; 5
 316:	17 b8       	out	0x07, r1	; 7
 318:	18 b8       	out	0x08, r1	; 8
 31a:	08 95       	ret

0000031c <hammingDecoding>:
	 
}

void hammingDecoding(uint16_t* str, uint16_t* decoded) // (15,11) Hamming decoding
{
 31c:	af 92       	push	r10
 31e:	bf 92       	push	r11
 320:	cf 92       	push	r12
 322:	df 92       	push	r13
 324:	ef 92       	push	r14
 326:	ff 92       	push	r15
 328:	0f 93       	push	r16
 32a:	1f 93       	push	r17
 32c:	cf 93       	push	r28
 32e:	df 93       	push	r29
 330:	5b 01       	movw	r10, r22
	*decoded = 0;
 332:	eb 01       	movw	r28, r22
 334:	19 82       	std	Y+1, r1	; 0x01
 336:	18 82       	st	Y, r1
	*decoded |= (*str >> 4);
 338:	fc 01       	movw	r30, r24
 33a:	c0 80       	ld	r12, Z
 33c:	d1 80       	ldd	r13, Z+1	; 0x01
 33e:	d6 94       	lsr	r13
 340:	c7 94       	ror	r12
 342:	d6 94       	lsr	r13
 344:	c7 94       	ror	r12
 346:	d6 94       	lsr	r13
 348:	c7 94       	ror	r12
 34a:	d6 94       	lsr	r13
 34c:	c7 94       	ror	r12
 34e:	d9 82       	std	Y+1, r13	; 0x01
 350:	c8 82       	st	Y, r12

	//Parity bit 1
	uint16_t checkP1 = (0b11011010101 & *decoded);
 352:	d6 01       	movw	r26, r12
 354:	a5 7d       	andi	r26, 0xD5	; 213
 356:	b6 70       	andi	r27, 0x06	; 6
	//Parity bit 2
	uint16_t checkP2 = (0b10110110011 & *decoded);
 358:	f6 01       	movw	r30, r12
 35a:	e3 7b       	andi	r30, 0xB3	; 179
 35c:	f5 70       	andi	r31, 0x05	; 5
	//Parity bit 3
	uint16_t checkP3 = (0b01110001111 & *decoded);
 35e:	a6 01       	movw	r20, r12
 360:	4f 78       	andi	r20, 0x8F	; 143
 362:	53 70       	andi	r21, 0x03	; 3
	//Parity bit 4
	uint16_t checkP4 = (0b00001111111 & *decoded);
 364:	96 01       	movw	r18, r12
 366:	2f 77       	andi	r18, 0x7F	; 127
 368:	33 27       	eor	r19, r19

	//The checkSums, initialized with their parity value
	uint16_t checkSum1 = ((*str & 0b000000000001000) >> 3);
 36a:	ec 01       	movw	r28, r24
 36c:	88 81       	ld	r24, Y
 36e:	99 81       	ldd	r25, Y+1	; 0x01
 370:	83 fb       	bst	r24, 3
 372:	11 27       	eor	r17, r17
 374:	10 f9       	bld	r17, 0
 376:	c1 2f       	mov	r28, r17
 378:	60 e0       	ldi	r22, 0x00	; 0
 37a:	d6 2f       	mov	r29, r22
	uint16_t checkSum2 = ((*str & 0b000000000000100) >> 2);
 37c:	82 fb       	bst	r24, 2
 37e:	00 27       	eor	r16, r16
 380:	00 f9       	bld	r16, 0
 382:	10 e0       	ldi	r17, 0x00	; 0
	uint16_t checkSum3 = ((*str & 0b000000000000010) >> 1);
 384:	81 fb       	bst	r24, 1
 386:	ee 24       	eor	r14, r14
 388:	e0 f8       	bld	r14, 0
 38a:	f1 2c       	mov	r15, r1
	uint16_t checkSum4 = ((*str & 0b000000000000001) >> 0);
 38c:	81 70       	andi	r24, 0x01	; 1
 38e:	99 27       	eor	r25, r25



	while (checkP1)
 390:	10 97       	sbiw	r26, 0x00	; 0
 392:	41 f0       	breq	.+16     	; 0x3a4 <hammingDecoding+0x88>
	{
		if (checkP1 & 1)
 394:	a0 ff       	sbrs	r26, 0
 396:	02 c0       	rjmp	.+4      	; 0x39c <hammingDecoding+0x80>
		{
			checkSum1^= 0b00000001;
 398:	61 e0       	ldi	r22, 0x01	; 1
 39a:	c6 27       	eor	r28, r22
		}
		checkP1 >>= 1;
 39c:	b6 95       	lsr	r27
 39e:	a7 95       	ror	r26
	uint16_t checkSum3 = ((*str & 0b000000000000010) >> 1);
	uint16_t checkSum4 = ((*str & 0b000000000000001) >> 0);



	while (checkP1)
 3a0:	10 97       	sbiw	r26, 0x00	; 0
 3a2:	c1 f7       	brne	.-16     	; 0x394 <hammingDecoding+0x78>
			checkSum1^= 0b00000001;
		}
		checkP1 >>= 1;
	}
	
	while (checkP2)
 3a4:	30 97       	sbiw	r30, 0x00	; 0
 3a6:	41 f0       	breq	.+16     	; 0x3b8 <hammingDecoding+0x9c>
	{
		if (checkP2 & 1)
 3a8:	e0 ff       	sbrs	r30, 0
 3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <hammingDecoding+0x94>
		{
			checkSum2^= 0b00000001;
 3ac:	61 e0       	ldi	r22, 0x01	; 1
 3ae:	06 27       	eor	r16, r22
		}
		checkP2 >>= 1;
 3b0:	f6 95       	lsr	r31
 3b2:	e7 95       	ror	r30
			checkSum1^= 0b00000001;
		}
		checkP1 >>= 1;
	}
	
	while (checkP2)
 3b4:	30 97       	sbiw	r30, 0x00	; 0
 3b6:	c1 f7       	brne	.-16     	; 0x3a8 <hammingDecoding+0x8c>
			checkSum2^= 0b00000001;
		}
		checkP2 >>= 1;
	}
	
	while (checkP3)
 3b8:	41 15       	cp	r20, r1
 3ba:	51 05       	cpc	r21, r1
 3bc:	49 f0       	breq	.+18     	; 0x3d0 <hammingDecoding+0xb4>
	{
		if (checkP3 & 1)
 3be:	40 ff       	sbrs	r20, 0
 3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <hammingDecoding+0xaa>
		{
			checkSum3^= 0b00000001;
 3c2:	e1 e0       	ldi	r30, 0x01	; 1
 3c4:	ee 26       	eor	r14, r30
		}
		checkP3 >>= 1;
 3c6:	56 95       	lsr	r21
 3c8:	47 95       	ror	r20
			checkSum2^= 0b00000001;
		}
		checkP2 >>= 1;
	}
	
	while (checkP3)
 3ca:	41 15       	cp	r20, r1
 3cc:	51 05       	cpc	r21, r1
 3ce:	b9 f7       	brne	.-18     	; 0x3be <hammingDecoding+0xa2>
			checkSum3^= 0b00000001;
		}
		checkP3 >>= 1;
	}
	
	while (checkP4)
 3d0:	21 15       	cp	r18, r1
 3d2:	31 05       	cpc	r19, r1
 3d4:	49 f0       	breq	.+18     	; 0x3e8 <hammingDecoding+0xcc>
	{
		if (checkP4 & 1)
 3d6:	20 ff       	sbrs	r18, 0
 3d8:	02 c0       	rjmp	.+4      	; 0x3de <hammingDecoding+0xc2>
		{
			checkSum4^= 0b00000001;
 3da:	f1 e0       	ldi	r31, 0x01	; 1
 3dc:	8f 27       	eor	r24, r31
		}
		checkP4 >>= 1;
 3de:	36 95       	lsr	r19
 3e0:	27 95       	ror	r18
			checkSum3^= 0b00000001;
		}
		checkP3 >>= 1;
	}
	
	while (checkP4)
 3e2:	21 15       	cp	r18, r1
 3e4:	31 05       	cpc	r19, r1
 3e6:	b9 f7       	brne	.-18     	; 0x3d6 <hammingDecoding+0xba>
	//errors found
	uint16_t error = 0;


	//Check for each bit in message, if an error, add to error array
	if (checkSum1 && checkSum2 && !checkSum3 && !checkSum4)	//m1
 3e8:	20 97       	sbiw	r28, 0x00	; 0
 3ea:	09 f4       	brne	.+2      	; 0x3ee <hammingDecoding+0xd2>
 3ec:	99 c0       	rjmp	.+306    	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
 3ee:	01 15       	cp	r16, r1
 3f0:	11 05       	cpc	r17, r1
 3f2:	09 f4       	brne	.+2      	; 0x3f6 <hammingDecoding+0xda>
 3f4:	7c c0       	rjmp	.+248    	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
 3f6:	e1 14       	cp	r14, r1
 3f8:	f1 04       	cpc	r15, r1
 3fa:	09 f0       	breq	.+2      	; 0x3fe <hammingDecoding+0xe2>
 3fc:	71 c0       	rjmp	.+226    	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
		}
		checkP4 >>= 1;
	}

	//errors found
	uint16_t error = 0;
 3fe:	51 e0       	ldi	r21, 0x01	; 1
 400:	40 e0       	ldi	r20, 0x00	; 0
 402:	00 97       	sbiw	r24, 0x00	; 0
 404:	09 f0       	breq	.+2      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 406:	50 e0       	ldi	r21, 0x00	; 0
 408:	25 2f       	mov	r18, r21
 40a:	34 2f       	mov	r19, r20
 40c:	6b c0       	rjmp	.+214    	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
	//Check for each bit in message, if an error, add to error array
	if (checkSum1 && checkSum2 && !checkSum3 && !checkSum4)	//m1
	{
		error |= 1 << 0;
	}
	if (checkSum1 && !checkSum2 && checkSum3 && !checkSum4)	//m2
 40e:	00 97       	sbiw	r24, 0x00	; 0
 410:	09 f4       	brne	.+2      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 412:	8d c0       	rjmp	.+282    	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
		}
		checkP4 >>= 1;
	}

	//errors found
	uint16_t error = 0;
 414:	20 e0       	ldi	r18, 0x00	; 0
 416:	30 e0       	ldi	r19, 0x00	; 0
 418:	13 c0       	rjmp	.+38     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
	}
	if (checkSum1 && !checkSum2 && checkSum3 && !checkSum4)	//m2
	{
		error |= 1 << 1;
	}
	if (!checkSum1 && checkSum2 && checkSum3 && !checkSum4)	//m3
 41a:	e1 14       	cp	r14, r1
 41c:	f1 04       	cpc	r15, r1
 41e:	09 f4       	brne	.+2      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 420:	89 c0       	rjmp	.+274    	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
 422:	00 97       	sbiw	r24, 0x00	; 0
 424:	09 f4       	brne	.+2      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 426:	89 c0       	rjmp	.+274    	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
		}
		checkP4 >>= 1;
	}

	//errors found
	uint16_t error = 0;
 428:	20 e0       	ldi	r18, 0x00	; 0
 42a:	30 e0       	ldi	r19, 0x00	; 0
 42c:	12 c0       	rjmp	.+36     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
	}
	if (!checkSum1 && checkSum2 && checkSum3 && !checkSum4)	//m3
	{
		error |= 1 << 2;
	}
	if (checkSum1 && checkSum2 && checkSum3 && !checkSum4)	//m4
 42e:	e1 14       	cp	r14, r1
 430:	f1 04       	cpc	r15, r1
 432:	09 f4       	brne	.+2      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 434:	63 c0       	rjmp	.+198    	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
 436:	00 97       	sbiw	r24, 0x00	; 0
 438:	09 f0       	breq	.+2      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 43a:	60 c0       	rjmp	.+192    	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
	{
		error |= 1 << 3;
 43c:	28 60       	ori	r18, 0x08	; 8
 43e:	5e c0       	rjmp	.+188    	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
	}
	if (checkSum1 && !checkSum2 && !checkSum3 && checkSum4)	//m5
 440:	e1 14       	cp	r14, r1
 442:	f1 04       	cpc	r15, r1
 444:	09 f0       	breq	.+2      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 446:	5e c0       	rjmp	.+188    	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
 448:	00 97       	sbiw	r24, 0x00	; 0
 44a:	09 f4       	brne	.+2      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 44c:	5b c0       	rjmp	.+182    	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
	{
		error |= 1 << 4;
 44e:	20 61       	ori	r18, 0x10	; 16
 450:	59 c0       	rjmp	.+178    	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
	}
	if (!checkSum1 && checkSum2 && !checkSum3 && checkSum4)	//m6
 452:	01 15       	cp	r16, r1
 454:	11 05       	cpc	r17, r1
 456:	09 f4       	brne	.+2      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 458:	73 c0       	rjmp	.+230    	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
 45a:	e1 14       	cp	r14, r1
 45c:	f1 04       	cpc	r15, r1
 45e:	09 f0       	breq	.+2      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 460:	55 c0       	rjmp	.+170    	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
 462:	00 97       	sbiw	r24, 0x00	; 0
 464:	09 f4       	brne	.+2      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 466:	52 c0       	rjmp	.+164    	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
	{
		error |= 1 << 5;
 468:	20 62       	ori	r18, 0x20	; 32
 46a:	50 c0       	rjmp	.+160    	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
	}
	if (checkSum1 && checkSum2 && !checkSum3 && checkSum4)	//m7
 46c:	01 15       	cp	r16, r1
 46e:	11 05       	cpc	r17, r1
 470:	09 f4       	brne	.+2      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 472:	6a c0       	rjmp	.+212    	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
 474:	e1 14       	cp	r14, r1
 476:	f1 04       	cpc	r15, r1
 478:	09 f0       	breq	.+2      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 47a:	4c c0       	rjmp	.+152    	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
 47c:	00 97       	sbiw	r24, 0x00	; 0
 47e:	09 f4       	brne	.+2      	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 480:	49 c0       	rjmp	.+146    	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
	{
		error |= 1 << 6;
 482:	20 64       	ori	r18, 0x40	; 64
 484:	47 c0       	rjmp	.+142    	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
	}
	if (!checkSum1 && !checkSum2 && checkSum3 && checkSum4)	//m8
 486:	01 15       	cp	r16, r1
 488:	11 05       	cpc	r17, r1
 48a:	09 f0       	breq	.+2      	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 48c:	65 c0       	rjmp	.+202    	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
 48e:	e1 14       	cp	r14, r1
 490:	f1 04       	cpc	r15, r1
 492:	09 f4       	brne	.+2      	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 494:	5d c0       	rjmp	.+186    	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
 496:	00 97       	sbiw	r24, 0x00	; 0
 498:	09 f4       	brne	.+2      	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
 49a:	5a c0       	rjmp	.+180    	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
	{
		error |= 1 << 7;
 49c:	20 68       	ori	r18, 0x80	; 128
 49e:	58 c0       	rjmp	.+176    	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
	}
	if (checkSum1 && !checkSum2 && checkSum3 && checkSum4)	//m9
 4a0:	01 15       	cp	r16, r1
 4a2:	11 05       	cpc	r17, r1
 4a4:	09 f0       	breq	.+2      	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
 4a6:	5c c0       	rjmp	.+184    	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
 4a8:	e1 14       	cp	r14, r1
 4aa:	f1 04       	cpc	r15, r1
 4ac:	b1 f1       	breq	.+108    	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
 4ae:	00 97       	sbiw	r24, 0x00	; 0
 4b0:	a1 f1       	breq	.+104    	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
	{
		error |= 1 << 8;
 4b2:	31 60       	ori	r19, 0x01	; 1
 4b4:	32 c0       	rjmp	.+100    	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
	}
	if (!checkSum1 && checkSum2 && checkSum3 && checkSum4)	//m10
 4b6:	01 2b       	or	r16, r17
 4b8:	69 f0       	breq	.+26     	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
 4ba:	ef 28       	or	r14, r15
 4bc:	59 f0       	breq	.+22     	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
 4be:	89 2b       	or	r24, r25
 4c0:	49 f0       	breq	.+18     	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
	{
		error |= 1 << 9;
 4c2:	32 60       	ori	r19, 0x02	; 2
 4c4:	07 c0       	rjmp	.+14     	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
	}
	if (checkSum1 && checkSum2 && checkSum3 && checkSum4)	//m11
 4c6:	01 2b       	or	r16, r17
 4c8:	29 f0       	breq	.+10     	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
 4ca:	ef 28       	or	r14, r15
 4cc:	19 f0       	breq	.+6      	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
 4ce:	89 2b       	or	r24, r25
 4d0:	09 f0       	breq	.+2      	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
	{
		error |= 1 << 10;
 4d2:	34 60       	ori	r19, 0x04	; 4
	}

	//Add the error array to the decoded message, flipping any found error.
	*decoded ^= error;
 4d4:	c2 26       	eor	r12, r18
 4d6:	d3 26       	eor	r13, r19
 4d8:	e5 01       	movw	r28, r10
 4da:	d9 82       	std	Y+1, r13	; 0x01
 4dc:	c8 82       	st	Y, r12

}
 4de:	44 c0       	rjmp	.+136    	; 0x568 <__LOCK_REGION_LENGTH__+0x168>
		}
		checkP4 >>= 1;
	}

	//errors found
	uint16_t error = 0;
 4e0:	20 e0       	ldi	r18, 0x00	; 0
 4e2:	30 e0       	ldi	r19, 0x00	; 0
	}
	if (!checkSum1 && checkSum2 && checkSum3 && !checkSum4)	//m3
	{
		error |= 1 << 2;
	}
	if (checkSum1 && checkSum2 && checkSum3 && !checkSum4)	//m4
 4e4:	01 15       	cp	r16, r1
 4e6:	11 05       	cpc	r17, r1
 4e8:	09 f0       	breq	.+2      	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
 4ea:	a1 cf       	rjmp	.-190    	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 4ec:	a9 cf       	rjmp	.-174    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
	//Check for each bit in message, if an error, add to error array
	if (checkSum1 && checkSum2 && !checkSum3 && !checkSum4)	//m1
	{
		error |= 1 << 0;
	}
	if (checkSum1 && !checkSum2 && checkSum3 && !checkSum4)	//m2
 4ee:	e1 14       	cp	r14, r1
 4f0:	f1 04       	cpc	r15, r1
 4f2:	09 f0       	breq	.+2      	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
 4f4:	8c cf       	rjmp	.-232    	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
		}
		checkP4 >>= 1;
	}

	//errors found
	uint16_t error = 0;
 4f6:	20 e0       	ldi	r18, 0x00	; 0
 4f8:	30 e0       	ldi	r19, 0x00	; 0
 4fa:	a2 cf       	rjmp	.-188    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
	}
	if (checkSum1 && !checkSum2 && !checkSum3 && checkSum4)	//m5
	{
		error |= 1 << 4;
	}
	if (!checkSum1 && checkSum2 && !checkSum3 && checkSum4)	//m6
 4fc:	20 97       	sbiw	r28, 0x00	; 0
 4fe:	09 f0       	breq	.+2      	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
 500:	b5 cf       	rjmp	.-150    	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 502:	a7 cf       	rjmp	.-178    	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
	{
		error |= 1 << 5;
	}
	if (checkSum1 && checkSum2 && !checkSum3 && checkSum4)	//m7
 504:	20 97       	sbiw	r28, 0x00	; 0
 506:	09 f0       	breq	.+2      	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
 508:	b1 cf       	rjmp	.-158    	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 50a:	bd cf       	rjmp	.-134    	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
	{
		error |= 1 << 6;
	}
	if (!checkSum1 && !checkSum2 && checkSum3 && checkSum4)	//m8
 50c:	20 97       	sbiw	r28, 0x00	; 0
 50e:	09 f4       	brne	.+2      	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
 510:	ba cf       	rjmp	.-140    	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 512:	c6 cf       	rjmp	.-116    	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
	{
		error |= 1 << 7;
	}
	if (checkSum1 && !checkSum2 && checkSum3 && checkSum4)	//m9
 514:	20 97       	sbiw	r28, 0x00	; 0
 516:	21 f6       	brne	.-120    	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
 518:	ce cf       	rjmp	.-100    	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
	}
	if (!checkSum1 && checkSum2 && checkSum3 && checkSum4)	//m10
	{
		error |= 1 << 9;
	}
	if (checkSum1 && checkSum2 && checkSum3 && checkSum4)	//m11
 51a:	cd 2b       	or	r28, r29
 51c:	a1 f6       	brne	.-88     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 51e:	da cf       	rjmp	.-76     	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
	}
	if (checkSum1 && !checkSum2 && checkSum3 && !checkSum4)	//m2
	{
		error |= 1 << 1;
	}
	if (!checkSum1 && checkSum2 && checkSum3 && !checkSum4)	//m3
 520:	01 15       	cp	r16, r1
 522:	11 05       	cpc	r17, r1
 524:	09 f0       	breq	.+2      	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
 526:	79 cf       	rjmp	.-270    	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
		}
		checkP4 >>= 1;
	}

	//errors found
	uint16_t error = 0;
 528:	20 e0       	ldi	r18, 0x00	; 0
 52a:	30 e0       	ldi	r19, 0x00	; 0
 52c:	92 cf       	rjmp	.-220    	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
	{
		error |= 1 << 0;
	}
	if (checkSum1 && !checkSum2 && checkSum3 && !checkSum4)	//m2
	{
		error |= 1 << 1;
 52e:	22 e0       	ldi	r18, 0x02	; 2
 530:	30 e0       	ldi	r19, 0x00	; 0
 532:	86 cf       	rjmp	.-244    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
		}
		checkP4 >>= 1;
	}

	//errors found
	uint16_t error = 0;
 534:	20 e0       	ldi	r18, 0x00	; 0
 536:	30 e0       	ldi	r19, 0x00	; 0
 538:	8c cf       	rjmp	.-232    	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
	{
		error |= 1 << 1;
	}
	if (!checkSum1 && checkSum2 && checkSum3 && !checkSum4)	//m3
	{
		error |= 1 << 2;
 53a:	24 e0       	ldi	r18, 0x04	; 4
 53c:	30 e0       	ldi	r19, 0x00	; 0
 53e:	89 cf       	rjmp	.-238    	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
	}
	if (checkSum1 && checkSum2 && !checkSum3 && checkSum4)	//m7
	{
		error |= 1 << 6;
	}
	if (!checkSum1 && !checkSum2 && checkSum3 && checkSum4)	//m8
 540:	20 97       	sbiw	r28, 0x00	; 0
 542:	09 f4       	brne	.+2      	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
 544:	a4 cf       	rjmp	.-184    	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 546:	ac cf       	rjmp	.-168    	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
	{
		error |= 1 << 7;
	}
	if (checkSum1 && !checkSum2 && checkSum3 && checkSum4)	//m9
 548:	20 97       	sbiw	r28, 0x00	; 0
 54a:	09 f0       	breq	.+2      	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
 54c:	ad cf       	rjmp	.-166    	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
 54e:	b3 cf       	rjmp	.-154    	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
	{
		error |= 1 << 8;
	}
	if (!checkSum1 && checkSum2 && checkSum3 && checkSum4)	//m10
 550:	cd 2b       	or	r28, r29
 552:	09 f4       	brne	.+2      	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
 554:	bf cf       	rjmp	.-130    	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
 556:	b7 cf       	rjmp	.-146    	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 558:	cd 2b       	or	r28, r29
 55a:	09 f4       	brne	.+2      	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
 55c:	ae cf       	rjmp	.-164    	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
 55e:	b3 cf       	rjmp	.-154    	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
	{
		error |= 1 << 9;
	}
	if (checkSum1 && checkSum2 && checkSum3 && checkSum4)	//m11
 560:	cd 2b       	or	r28, r29
 562:	09 f0       	breq	.+2      	; 0x566 <__LOCK_REGION_LENGTH__+0x166>
 564:	b2 cf       	rjmp	.-156    	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
 566:	b6 cf       	rjmp	.-148    	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
	}

	//Add the error array to the decoded message, flipping any found error.
	*decoded ^= error;

}
 568:	df 91       	pop	r29
 56a:	cf 91       	pop	r28
 56c:	1f 91       	pop	r17
 56e:	0f 91       	pop	r16
 570:	ff 90       	pop	r15
 572:	ef 90       	pop	r14
 574:	df 90       	pop	r13
 576:	cf 90       	pop	r12
 578:	bf 90       	pop	r11
 57a:	af 90       	pop	r10
 57c:	08 95       	ret

0000057e <halfEncoded>:

void halfEncoded(uint16_t* encoded, uint32_t* datapakke)
{
 57e:	8f 92       	push	r8
 580:	9f 92       	push	r9
 582:	af 92       	push	r10
 584:	bf 92       	push	r11
 586:	cf 92       	push	r12
 588:	df 92       	push	r13
 58a:	ef 92       	push	r14
 58c:	ff 92       	push	r15
 58e:	cf 93       	push	r28
 590:	df 93       	push	r29
 592:	dc 01       	movw	r26, r24
 594:	eb 01       	movw	r28, r22
 596:	20 e0       	ldi	r18, 0x00	; 0
 598:	30 e0       	ldi	r19, 0x00	; 0
 59a:	ee e0       	ldi	r30, 0x0E	; 14
 59c:	f0 e0       	ldi	r31, 0x00	; 0

	for (int i = 0; i < 15; i++)
	{
		if(*datapakke & (0b10000000000000000000000000000000 >> (i * 2)))
 59e:	81 2c       	mov	r8, r1
 5a0:	91 2c       	mov	r9, r1
 5a2:	54 01       	movw	r10, r8
 5a4:	68 94       	set
 5a6:	b7 f8       	bld	r11, 7
		*encoded |=  1 << (14-i);
		
		else *encoded &= ~(1 << (14-i));
 5a8:	81 e0       	ldi	r24, 0x01	; 1
 5aa:	90 e0       	ldi	r25, 0x00	; 0
void halfEncoded(uint16_t* encoded, uint32_t* datapakke)
{

	for (int i = 0; i < 15; i++)
	{
		if(*datapakke & (0b10000000000000000000000000000000 >> (i * 2)))
 5ac:	48 81       	ld	r20, Y
 5ae:	59 81       	ldd	r21, Y+1	; 0x01
 5b0:	6a 81       	ldd	r22, Y+2	; 0x02
 5b2:	7b 81       	ldd	r23, Y+3	; 0x03
 5b4:	75 01       	movw	r14, r10
 5b6:	64 01       	movw	r12, r8
 5b8:	02 2e       	mov	r0, r18
 5ba:	04 c0       	rjmp	.+8      	; 0x5c4 <halfEncoded+0x46>
 5bc:	f6 94       	lsr	r15
 5be:	e7 94       	ror	r14
 5c0:	d7 94       	ror	r13
 5c2:	c7 94       	ror	r12
 5c4:	0a 94       	dec	r0
 5c6:	d2 f7       	brpl	.-12     	; 0x5bc <halfEncoded+0x3e>
 5c8:	4c 21       	and	r20, r12
 5ca:	5d 21       	and	r21, r13
 5cc:	6e 21       	and	r22, r14
 5ce:	7f 21       	and	r23, r15
 5d0:	45 2b       	or	r20, r21
 5d2:	46 2b       	or	r20, r22
 5d4:	47 2b       	or	r20, r23
 5d6:	81 f0       	breq	.+32     	; 0x5f8 <halfEncoded+0x7a>
		*encoded |=  1 << (14-i);
 5d8:	6d 91       	ld	r22, X+
 5da:	7c 91       	ld	r23, X
 5dc:	11 97       	sbiw	r26, 0x01	; 1
 5de:	ac 01       	movw	r20, r24
 5e0:	0e 2e       	mov	r0, r30
 5e2:	02 c0       	rjmp	.+4      	; 0x5e8 <halfEncoded+0x6a>
 5e4:	44 0f       	add	r20, r20
 5e6:	55 1f       	adc	r21, r21
 5e8:	0a 94       	dec	r0
 5ea:	e2 f7       	brpl	.-8      	; 0x5e4 <halfEncoded+0x66>
 5ec:	46 2b       	or	r20, r22
 5ee:	57 2b       	or	r21, r23
 5f0:	11 96       	adiw	r26, 0x01	; 1
 5f2:	5c 93       	st	X, r21
 5f4:	4e 93       	st	-X, r20
 5f6:	11 c0       	rjmp	.+34     	; 0x61a <halfEncoded+0x9c>
		
		else *encoded &= ~(1 << (14-i));
 5f8:	ac 01       	movw	r20, r24
 5fa:	0e 2e       	mov	r0, r30
 5fc:	02 c0       	rjmp	.+4      	; 0x602 <halfEncoded+0x84>
 5fe:	44 0f       	add	r20, r20
 600:	55 1f       	adc	r21, r21
 602:	0a 94       	dec	r0
 604:	e2 f7       	brpl	.-8      	; 0x5fe <halfEncoded+0x80>
 606:	40 95       	com	r20
 608:	50 95       	com	r21
 60a:	6d 91       	ld	r22, X+
 60c:	7c 91       	ld	r23, X
 60e:	11 97       	sbiw	r26, 0x01	; 1
 610:	46 23       	and	r20, r22
 612:	57 23       	and	r21, r23
 614:	11 96       	adiw	r26, 0x01	; 1
 616:	5c 93       	st	X, r21
 618:	4e 93       	st	-X, r20
 61a:	31 97       	sbiw	r30, 0x01	; 1
 61c:	2e 5f       	subi	r18, 0xFE	; 254
 61e:	3f 4f       	sbci	r19, 0xFF	; 255
}

void halfEncoded(uint16_t* encoded, uint32_t* datapakke)
{

	for (int i = 0; i < 15; i++)
 620:	2e 31       	cpi	r18, 0x1E	; 30
 622:	31 05       	cpc	r19, r1
 624:	19 f6       	brne	.-122    	; 0x5ac <halfEncoded+0x2e>
		if(*datapakke & (0b10000000000000000000000000000000 >> (i * 2)))
		*encoded |=  1 << (14-i);
		
		else *encoded &= ~(1 << (14-i));
	}
}
 626:	df 91       	pop	r29
 628:	cf 91       	pop	r28
 62a:	ff 90       	pop	r15
 62c:	ef 90       	pop	r14
 62e:	df 90       	pop	r13
 630:	cf 90       	pop	r12
 632:	bf 90       	pop	r11
 634:	af 90       	pop	r10
 636:	9f 90       	pop	r9
 638:	8f 90       	pop	r8
 63a:	08 95       	ret

0000063c <recievex10>:

void recievex10(uint16_t* adr, uint16_t* com, uint16_t* combined, uint16_t* encoded, uint32_t* datapakke, volatile int* counterPtr)
{
 63c:	8f 92       	push	r8
 63e:	9f 92       	push	r9
 640:	af 92       	push	r10
 642:	bf 92       	push	r11
 644:	cf 92       	push	r12
 646:	df 92       	push	r13
 648:	ef 92       	push	r14
 64a:	ff 92       	push	r15
 64c:	0f 93       	push	r16
 64e:	1f 93       	push	r17
 650:	cf 93       	push	r28
 652:	df 93       	push	r29
 654:	5c 01       	movw	r10, r24
 656:	4b 01       	movw	r8, r22
 658:	ea 01       	movw	r28, r20
 65a:	69 01       	movw	r12, r18
	
	
	halfEncoded(encoded, datapakke);
 65c:	b8 01       	movw	r22, r16
 65e:	c9 01       	movw	r24, r18
 660:	8e df       	rcall	.-228    	; 0x57e <halfEncoded>
	
	hammingDecoding(encoded, combined);
 662:	be 01       	movw	r22, r28
 664:	c6 01       	movw	r24, r12
 666:	5a de       	rcall	.-844    	; 0x31c <hammingDecoding>
}

void splitCombine(uint16_t* adr, uint16_t* com, uint16_t* combined) //Splits a combined int back into the address and command
{

	*com = (*combined & 0b0000000011111111);
 668:	88 81       	ld	r24, Y
 66a:	99 81       	ldd	r25, Y+1	; 0x01
 66c:	99 27       	eor	r25, r25
 66e:	f4 01       	movw	r30, r8
 670:	91 83       	std	Z+1, r25	; 0x01
 672:	80 83       	st	Z, r24

	*adr = (*combined >> 8);
 674:	89 81       	ldd	r24, Y+1	; 0x01
 676:	f5 01       	movw	r30, r10
 678:	80 83       	st	Z, r24
 67a:	11 82       	std	Z+1, r1	; 0x01
	
	hammingDecoding(encoded, combined);
	
	splitCombine(adr, com, combined);
	
	*encoded = 0;
 67c:	f6 01       	movw	r30, r12
 67e:	11 82       	std	Z+1, r1	; 0x01
 680:	10 82       	st	Z, r1
	*combined = 0;
 682:	19 82       	std	Y+1, r1	; 0x01
 684:	18 82       	st	Y, r1
	*datapakke = 0;
 686:	f8 01       	movw	r30, r16
 688:	10 82       	st	Z, r1
 68a:	11 82       	std	Z+1, r1	; 0x01
 68c:	12 82       	std	Z+2, r1	; 0x02
 68e:	13 82       	std	Z+3, r1	; 0x03
	*counterPtr = 1;
 690:	81 e0       	ldi	r24, 0x01	; 1
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	f7 01       	movw	r30, r14
 696:	91 83       	std	Z+1, r25	; 0x01
 698:	80 83       	st	Z, r24
	
}
 69a:	df 91       	pop	r29
 69c:	cf 91       	pop	r28
 69e:	1f 91       	pop	r17
 6a0:	0f 91       	pop	r16
 6a2:	ff 90       	pop	r15
 6a4:	ef 90       	pop	r14
 6a6:	df 90       	pop	r13
 6a8:	cf 90       	pop	r12
 6aa:	bf 90       	pop	r11
 6ac:	af 90       	pop	r10
 6ae:	9f 90       	pop	r9
 6b0:	8f 90       	pop	r8
 6b2:	08 95       	ret

000006b4 <_exit>:
 6b4:	f8 94       	cli

000006b6 <__stop_program>:
 6b6:	ff cf       	rjmp	.-2      	; 0x6b6 <__stop_program>
